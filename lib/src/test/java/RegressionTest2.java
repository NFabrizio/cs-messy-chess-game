import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.util.ArrayList<java.lang.String> strList18 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList21 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        java.lang.String str8 = pawn3.toString();
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard48 = null;
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard48, color62);
        a1.King king67 = new a1.King(chessBoard0, color62);
        java.lang.String str68 = king67.toString();
        java.util.ArrayList<java.lang.String> strList69 = king67.legalMoves();
        java.util.ArrayList<java.lang.String> strList70 = king67.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u265a" + "'", str68, "\u265a");
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strList70);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.toString();
        java.lang.String str12 = bishop10.toString();
        java.lang.String str13 = bishop10.toString();
        // The following exception was thrown during execution in test generation
        try {
            bishop10.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265d" + "'", str11, "\u265d");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265d" + "'", str13, "\u265d");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard52, color58);
        a1.Pawn pawn61 = new a1.Pawn(chessBoard0, color58);
        java.util.ArrayList<java.lang.String> strList62 = pawn61.legalMoves();
        java.util.ArrayList<java.lang.String> strList63 = pawn61.legalMoves();
        java.util.ArrayList<java.lang.String> strList64 = pawn61.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = null;
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        java.util.ArrayList<java.lang.String> strList12 = pawn11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = pawn11.legalMoves();
        boolean boolean15 = chessBoard8.placePiece((a1.ChessPiece) pawn11, "\u265d");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.King king33 = new a1.King(chessBoard21, color30);
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.util.ArrayList<java.lang.String> strList37 = pawn36.legalMoves();
        boolean boolean39 = chessBoard21.placePiece((a1.ChessPiece) pawn36, "\u265e");
        chessBoard21.initialize();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Pawn pawn56 = new a1.Pawn(chessBoard44, color54);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard41, color54);
        a1.Pawn pawn58 = new a1.Pawn(chessBoard21, color54);
        a1.Knight knight59 = new a1.Knight(chessBoard16, color54);
        a1.King king60 = new a1.King(chessBoard8, color54);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265e");
        // The following exception was thrown during execution in test generation
        try {
            king60.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        java.lang.String str24 = pawn20.getPosition();
        boolean boolean26 = chessBoard0.placePiece((a1.ChessPiece) pawn20, "a1.IllegalMoveException: hi!");
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece29 = chessBoard0.getPiece("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        a1.ChessPiece.Color color71 = null;
        a1.Knight knight72 = new a1.Knight(chessBoard0, color71);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece74 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Knight knight47 = new a1.Knight(chessBoard31, color44);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Pawn pawn63 = new a1.Pawn(chessBoard51, color61);
        a1.Pawn pawn64 = new a1.Pawn(chessBoard48, color61);
        a1.Pawn pawn65 = new a1.Pawn(chessBoard31, color61);
        a1.Pawn pawn66 = new a1.Pawn(chessBoard14, color61);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard0, color61);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.lang.String str9 = bishop8.toString();
        java.lang.String str10 = bishop8.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265d" + "'", str9, "\u265d");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265e", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("\u265a", throwable3);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException5);
        java.lang.String str8 = illegalPositionException7.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        chessBoard0.initialize();
        a1.ChessPiece.Color color60 = null;
        a1.Bishop bishop61 = new a1.Bishop(chessBoard0, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        java.lang.String str65 = rook64.toString();
        java.lang.String str66 = rook64.getPosition();
        java.util.ArrayList<java.lang.String> strList67 = rook64.legalMoves();
        java.util.ArrayList<java.lang.String> strList68 = rook64.legalMoves();
        boolean boolean70 = chessBoard0.placePiece((a1.ChessPiece) rook64, "\u265c");
        java.lang.String str71 = rook64.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265c" + "'", str65, "\u265c");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u265c" + "'", str71, "\u265c");
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Bishop bishop21 = new a1.Bishop(chessBoard13, color19);
        a1.Knight knight22 = new a1.Knight(chessBoard6, color19);
        a1.Knight knight23 = new a1.Knight(chessBoard0, color19);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece25 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable[] throwableArray25 = illegalPositionException24.getSuppressed();
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException24);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str21 = bishop20.toString();
        java.lang.String str22 = bishop20.getPosition();
        a1.ChessPiece.Color color23 = bishop20.getColor();
        java.lang.String str24 = bishop20.toString();
        java.util.ArrayList<java.lang.String> strList25 = bishop20.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265d" + "'", str21, "\u265d");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265d" + "'", str24, "\u265d");
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = null;
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = null;
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        java.lang.String str8 = pawn7.toString();
        boolean boolean10 = chessBoard4.placePiece((a1.ChessPiece) pawn7, "");
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Knight knight20 = new a1.Knight(chessBoard4, color17);
        a1.Knight knight21 = new a1.Knight(chessBoard3, color17);
        a1.Pawn pawn22 = new a1.Pawn(chessBoard0, color17);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = null;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard26, color32);
        a1.King king35 = new a1.King(chessBoard23, color32);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = null;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.King king48 = new a1.King(chessBoard36, color45);
        a1.ChessBoard chessBoard49 = null;
        a1.ChessPiece.Color color50 = null;
        a1.Pawn pawn51 = new a1.Pawn(chessBoard49, color50);
        java.util.ArrayList<java.lang.String> strList52 = pawn51.legalMoves();
        boolean boolean54 = chessBoard36.placePiece((a1.ChessPiece) pawn51, "\u265e");
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard36, color55);
        a1.Rook rook57 = new a1.Rook(chessBoard23, color55);
        a1.Knight knight58 = new a1.Knight(chessBoard0, color55);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        boolean boolean64 = chessBoard59.placePiece((a1.ChessPiece) rook62, "\u265f");
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Knight knight73 = new a1.Knight(chessBoard65, color71);
        boolean boolean75 = chessBoard59.placePiece((a1.ChessPiece) knight73, "");
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Bishop bishop77 = new a1.Bishop(chessBoard59, color76);
        a1.King king78 = new a1.King(chessBoard0, color76);
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        chessBoard0.initialize();
        chessBoard0.initialize();
        chessBoard0.initialize();
        chessBoard0.initialize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.lang.String str16 = king12.getPosition();
        java.lang.String str17 = king12.toString();
        a1.ChessPiece.Color color18 = king12.getColor();
        java.util.ArrayList<java.lang.String> strList19 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException11);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException11);
        java.lang.Throwable throwable15 = null;
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265c", throwable15);
        illegalPositionException11.addSuppressed((java.lang.Throwable) illegalPositionException16);
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException16);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = null;
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        java.lang.String str8 = pawn7.toString();
        boolean boolean10 = chessBoard4.placePiece((a1.ChessPiece) pawn7, "");
        java.lang.String str11 = pawn7.getPosition();
        java.util.ArrayList<java.lang.String> strList12 = pawn7.legalMoves();
        java.lang.String str13 = pawn7.toString();
        java.lang.String str14 = pawn7.toString();
        java.util.ArrayList<java.lang.String> strList15 = pawn7.legalMoves();
        boolean boolean17 = chessBoard0.placePiece((a1.ChessPiece) pawn7, "");
        java.util.ArrayList<java.lang.String> strList18 = pawn7.legalMoves();
        java.lang.String str19 = pawn7.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265f" + "'", str14, "\u265f");
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265f" + "'", str19, "\u265f");
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        java.util.ArrayList<java.lang.String> strList63 = king60.legalMoves();
        java.util.ArrayList<java.lang.String> strList64 = king60.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        java.lang.String str60 = rook59.toString();
        java.util.ArrayList<java.lang.String> strList61 = rook59.legalMoves();
        java.lang.String str62 = rook59.toString();
        java.lang.String str63 = rook59.toString();
        a1.ChessPiece.Color color64 = rook59.getColor();
        a1.Bishop bishop65 = new a1.Bishop(chessBoard54, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard0, color64);
        java.lang.String str67 = bishop66.getPosition();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265c" + "'", str60, "\u265c");
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265c" + "'", str62, "\u265c");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265c" + "'", str63, "\u265c");
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard35, color48);
        a1.ChessPiece.Color color52 = pawn51.getColor();
        a1.Rook rook53 = new a1.Rook(chessBoard0, color52);
        java.util.ArrayList<java.lang.String> strList54 = rook53.legalMoves();
        java.lang.String str55 = rook53.toString();
        java.lang.String str56 = rook53.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265c" + "'", str55, "\u265c");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265c" + "'", str56, "\u265c");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook2.legalMoves();
        java.lang.String str8 = rook2.toString();
        java.lang.String str9 = rook2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Pawn pawn28 = new a1.Pawn(chessBoard16, color26);
        a1.Pawn pawn29 = new a1.Pawn(chessBoard13, color26);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = null;
        a1.ChessPiece.Color color32 = null;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard31, color32);
        java.lang.String str34 = pawn33.toString();
        boolean boolean36 = chessBoard30.placePiece((a1.ChessPiece) pawn33, "");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard30, color47);
        java.util.ArrayList<java.lang.String> strList51 = bishop50.legalMoves();
        a1.ChessPiece.Color color52 = bishop50.getColor();
        a1.Knight knight53 = new a1.Knight(chessBoard13, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard0, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        boolean boolean60 = chessBoard55.placePiece((a1.ChessPiece) rook58, "\u265f");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = null;
        a1.ChessPiece.Color color63 = null;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard62, color63);
        java.lang.String str65 = pawn64.toString();
        boolean boolean67 = chessBoard61.placePiece((a1.ChessPiece) pawn64, "");
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Knight knight72 = new a1.Knight(chessBoard68, color70);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Bishop bishop76 = new a1.Bishop(chessBoard68, color74);
        a1.Knight knight77 = new a1.Knight(chessBoard61, color74);
        a1.Knight knight78 = new a1.Knight(chessBoard55, color74);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = null;
        a1.ChessPiece.Color color81 = null;
        a1.Pawn pawn82 = new a1.Pawn(chessBoard80, color81);
        java.lang.String str83 = pawn82.toString();
        boolean boolean85 = chessBoard79.placePiece((a1.ChessPiece) pawn82, "");
        a1.ChessBoard chessBoard86 = new a1.ChessBoard();
        a1.ChessBoard chessBoard87 = new a1.ChessBoard();
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook89 = new a1.Rook(chessBoard87, color88);
        a1.Knight knight90 = new a1.Knight(chessBoard86, color88);
        a1.ChessBoard chessBoard91 = new a1.ChessBoard();
        a1.ChessPiece.Color color92 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook93 = new a1.Rook(chessBoard91, color92);
        a1.Bishop bishop94 = new a1.Bishop(chessBoard86, color92);
        a1.Knight knight95 = new a1.Knight(chessBoard79, color92);
        a1.Rook rook96 = new a1.Rook(chessBoard55, color92);
        a1.Pawn pawn97 = new a1.Pawn(chessBoard0, color92);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265f" + "'", str34, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265f" + "'", str65, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265f" + "'", str83, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color88.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color92 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color92.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.lang.String str6 = rook2.getPosition();
        java.lang.String str7 = rook2.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str21 = bishop20.toString();
        java.lang.String str22 = bishop20.getPosition();
        a1.ChessPiece.Color color23 = bishop20.getColor();
        java.util.ArrayList<java.lang.String> strList24 = bishop20.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265d" + "'", str21, "\u265d");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard48 = null;
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard48, color62);
        a1.King king67 = new a1.King(chessBoard0, color62);
        java.lang.String str68 = king67.toString();
        java.lang.Class<?> wildcardClass69 = king67.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u265a" + "'", str68, "\u265a");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException11);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException11);
        java.lang.Throwable throwable16 = null;
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("hi!", throwable16);
        java.lang.Throwable[] throwableArray18 = illegalMoveException17.getSuppressed();
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        java.lang.Throwable[] throwableArray22 = illegalMoveException21.getSuppressed();
        illegalMoveException17.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException17);
        illegalPositionException11.addSuppressed((java.lang.Throwable) illegalMoveException17);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalPositionException11);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException9);
        java.lang.Throwable[] throwableArray11 = illegalPositionException9.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        java.lang.String str44 = knight43.getPosition();
        java.util.ArrayList<java.lang.String> strList45 = knight43.legalMoves();
        java.lang.String str46 = knight43.toString();
        java.lang.String str47 = knight43.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u265e" + "'", str46, "\u265e");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u265e" + "'", str47, "\u265e");
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        java.lang.Throwable[] throwableArray7 = illegalMoveException6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = illegalMoveException6.getSuppressed();
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable[] throwableArray11 = illegalMoveException6.getSuppressed();
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        java.lang.Throwable[] throwableArray16 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = illegalMoveException15.getSuppressed();
        java.lang.Throwable throwable22 = null;
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("hi!", throwable22);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException23);
        illegalMoveException15.addSuppressed((java.lang.Throwable) illegalMoveException25);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException25);
        java.lang.Throwable throwable30 = null;
        a1.IllegalMoveException illegalMoveException31 = new a1.IllegalMoveException("hi!", throwable30);
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("\u265a", throwable30);
        java.lang.Throwable[] throwableArray33 = illegalMoveException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = illegalMoveException32.getSuppressed();
        java.lang.Throwable throwable38 = null;
        a1.IllegalMoveException illegalMoveException39 = new a1.IllegalMoveException("hi!", throwable38);
        java.lang.Throwable[] throwableArray40 = illegalMoveException39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = illegalMoveException39.getSuppressed();
        a1.IllegalPositionException illegalPositionException42 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException39);
        java.lang.Throwable[] throwableArray43 = illegalPositionException42.getSuppressed();
        a1.IllegalMoveException illegalMoveException44 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException42);
        illegalMoveException32.addSuppressed((java.lang.Throwable) illegalPositionException42);
        illegalPositionException27.addSuppressed((java.lang.Throwable) illegalPositionException42);
        illegalMoveException6.addSuppressed((java.lang.Throwable) illegalPositionException42);
        a1.IllegalMoveException illegalMoveException48 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException49 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException48);
        java.lang.Throwable[] throwableArray50 = illegalMoveException48.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.lang.String str4 = pawn2.toString();
        java.lang.String str5 = pawn2.toString();
        java.lang.String str6 = pawn2.getPosition();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException9);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException9);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException9);
        a1.IllegalPositionException illegalPositionException14 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException13);
        java.lang.Throwable throwable23 = null;
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("hi!", throwable23);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException24);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException24);
        java.lang.Throwable throwable28 = null;
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("hi!", throwable28);
        java.lang.Throwable[] throwableArray30 = illegalMoveException29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = illegalMoveException29.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException29.getSuppressed();
        java.lang.Throwable throwable36 = null;
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("hi!", throwable36);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException37);
        a1.IllegalMoveException illegalMoveException39 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException37);
        illegalMoveException29.addSuppressed((java.lang.Throwable) illegalMoveException39);
        illegalMoveException26.addSuppressed((java.lang.Throwable) illegalMoveException39);
        a1.IllegalPositionException illegalPositionException42 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException39);
        a1.IllegalMoveException illegalMoveException43 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException42);
        a1.IllegalMoveException illegalMoveException44 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException43);
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException43);
        a1.IllegalMoveException illegalMoveException46 = new a1.IllegalMoveException("a1.IllegalPositionException: hi!", (java.lang.Throwable) illegalMoveException43);
        illegalPositionException14.addSuppressed((java.lang.Throwable) illegalMoveException46);
        java.lang.Throwable[] throwableArray48 = illegalMoveException46.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = null;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.King king56 = new a1.King(chessBoard44, color53);
        a1.ChessBoard chessBoard57 = null;
        a1.ChessPiece.Color color58 = null;
        a1.Pawn pawn59 = new a1.Pawn(chessBoard57, color58);
        java.util.ArrayList<java.lang.String> strList60 = pawn59.legalMoves();
        boolean boolean62 = chessBoard44.placePiece((a1.ChessPiece) pawn59, "\u265e");
        chessBoard44.initialize();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard67, color69);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard67, color73);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Pawn pawn79 = new a1.Pawn(chessBoard67, color77);
        a1.Pawn pawn80 = new a1.Pawn(chessBoard64, color77);
        a1.Pawn pawn81 = new a1.Pawn(chessBoard44, color77);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color77);
        java.lang.String str83 = rook82.toString();
        // The following exception was thrown during execution in test generation
        try {
            rook82.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.util.ArrayList<java.lang.String> strList18 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList21 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = king12.legalMoves();
        java.lang.String str23 = king12.getPosition();
        java.util.ArrayList<java.lang.String> strList24 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException11);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException13);
        java.lang.String str16 = illegalMoveException13.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265c" + "'", str16, "\u265c");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        java.util.ArrayList<java.lang.String> strList54 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList55 = king53.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList55);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        chessBoard0.initialize();
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        java.lang.String str33 = pawn31.toString();
        boolean boolean35 = chessBoard22.placePiece((a1.ChessPiece) pawn31, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        boolean boolean41 = chessBoard36.placePiece((a1.ChessPiece) rook39, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard36.placePiece((a1.ChessPiece) knight50, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        a1.King king74 = new a1.King(chessBoard36, color70);
        a1.King king75 = new a1.King(chessBoard22, color70);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color70);
        java.lang.String str77 = knight76.toString();
        a1.ChessPiece.Color color78 = knight76.getColor();
        java.util.ArrayList<java.lang.String> strList79 = knight76.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265e" + "'", str77, "\u265e");
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList79);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.lang.String str38 = pawn37.toString();
        boolean boolean40 = chessBoard34.placePiece((a1.ChessPiece) pawn37, "");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard41, color51);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard34, color51);
        java.util.ArrayList<java.lang.String> strList55 = bishop54.legalMoves();
        a1.ChessPiece.Color color56 = bishop54.getColor();
        a1.Knight knight57 = new a1.Knight(chessBoard17, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard0, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard62, color72);
        a1.Pawn pawn75 = new a1.Pawn(chessBoard59, color72);
        a1.King king76 = new a1.King(chessBoard0, color72);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = null;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        java.lang.String str83 = rook82.toString();
        java.util.ArrayList<java.lang.String> strList84 = rook82.legalMoves();
        java.lang.String str85 = rook82.toString();
        java.lang.String str86 = rook82.toString();
        a1.ChessPiece.Color color87 = rook82.getColor();
        a1.Bishop bishop88 = new a1.Bishop(chessBoard77, color87);
        a1.Rook rook89 = new a1.Rook(chessBoard0, color87);
        java.util.ArrayList<java.lang.String> strList90 = rook89.legalMoves();
        java.util.ArrayList<java.lang.String> strList91 = rook89.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265c" + "'", str85, "\u265c");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u265c" + "'", str86, "\u265c");
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strList91);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        boolean boolean51 = chessBoard46.placePiece((a1.ChessPiece) rook49, "\u265f");
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard52, color58);
        boolean boolean62 = chessBoard46.placePiece((a1.ChessPiece) knight60, "");
        a1.ChessPiece.Color color63 = knight60.getColor();
        a1.Knight knight64 = new a1.Knight(chessBoard45, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard0, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard66, color72);
        a1.Knight knight75 = new a1.Knight(chessBoard0, color72);
        java.util.ArrayList<java.lang.String> strList76 = knight75.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList76);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.lang.String str16 = pawn15.toString();
        java.lang.String str17 = pawn15.toString();
        boolean boolean19 = chessBoard6.placePiece((a1.ChessPiece) pawn15, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        boolean boolean25 = chessBoard20.placePiece((a1.ChessPiece) rook23, "\u265f");
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard26, color32);
        boolean boolean36 = chessBoard20.placePiece((a1.ChessPiece) knight34, "");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = null;
        a1.ChessPiece.Color color39 = null;
        a1.Pawn pawn40 = new a1.Pawn(chessBoard38, color39);
        java.lang.String str41 = pawn40.toString();
        boolean boolean43 = chessBoard37.placePiece((a1.ChessPiece) pawn40, "");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Pawn pawn56 = new a1.Pawn(chessBoard44, color54);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard37, color54);
        a1.King king58 = new a1.King(chessBoard20, color54);
        a1.King king59 = new a1.King(chessBoard6, color54);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = null;
        a1.ChessPiece.Color color62 = null;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard61, color62);
        java.lang.String str64 = pawn63.toString();
        boolean boolean66 = chessBoard60.placePiece((a1.ChessPiece) pawn63, "");
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard67, color69);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard67, color73);
        a1.Knight knight76 = new a1.Knight(chessBoard60, color73);
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight78 = new a1.Knight(chessBoard60, color77);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard6, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Knight knight84 = new a1.Knight(chessBoard80, color82);
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard80, color86);
        a1.ChessBoard chessBoard89 = new a1.ChessBoard();
        a1.ChessPiece.Color color90 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook91 = new a1.Rook(chessBoard89, color90);
        a1.Pawn pawn92 = new a1.Pawn(chessBoard80, color90);
        a1.Bishop bishop93 = new a1.Bishop(chessBoard6, color90);
        a1.Knight knight94 = new a1.Knight(chessBoard0, color90);
        java.util.ArrayList<java.lang.String> strList95 = knight94.legalMoves();
        java.util.ArrayList<java.lang.String> strList96 = knight94.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265f" + "'", str16, "\u265f");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265f" + "'", str41, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265f" + "'", str64, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(strList96);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList37 = rook36.legalMoves();
        java.lang.String str38 = rook36.toString();
        java.lang.String str39 = rook36.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265c" + "'", str38, "\u265c");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265c" + "'", str39, "\u265c");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        java.util.ArrayList<java.lang.String> strList20 = pawn16.legalMoves();
        a1.ChessPiece.Color color21 = pawn16.getColor();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) pawn16, "\u265e");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Bishop bishop35 = new a1.Bishop(chessBoard27, color33);
        a1.King king36 = new a1.King(chessBoard24, color33);
        a1.ChessBoard chessBoard37 = null;
        a1.ChessPiece.Color color38 = null;
        a1.Pawn pawn39 = new a1.Pawn(chessBoard37, color38);
        java.util.ArrayList<java.lang.String> strList40 = pawn39.legalMoves();
        boolean boolean42 = chessBoard24.placePiece((a1.ChessPiece) pawn39, "\u265e");
        chessBoard24.initialize();
        a1.ChessPiece.Color color44 = null;
        a1.Pawn pawn45 = new a1.Pawn(chessBoard24, color44);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = null;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.Rook rook71 = new a1.Rook(chessBoard59, color68);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard46, color68);
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn74 = new a1.Pawn(chessBoard46, color73);
        a1.Pawn pawn75 = new a1.Pawn(chessBoard24, color73);
        java.util.ArrayList<java.lang.String> strList76 = pawn75.legalMoves();
        java.lang.String str77 = pawn75.toString();
        boolean boolean79 = chessBoard0.placePiece((a1.ChessPiece) pawn75, "a1.IllegalMoveException: ");
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessBoard chessBoard81 = null;
        a1.ChessPiece.Color color82 = null;
        a1.Pawn pawn83 = new a1.Pawn(chessBoard81, color82);
        java.util.ArrayList<java.lang.String> strList84 = pawn83.legalMoves();
        java.util.ArrayList<java.lang.String> strList85 = pawn83.legalMoves();
        boolean boolean87 = chessBoard80.placePiece((a1.ChessPiece) pawn83, "\u265d");
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.WHITE;
        a1.Knight knight89 = new a1.Knight(chessBoard80, color88);
        a1.Bishop bishop90 = new a1.Bishop(chessBoard0, color88);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: a1.IllegalPositionException: ", "\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(color21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265f" + "'", str77, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.WHITE + "'", color88.equals(a1.ChessPiece.Color.WHITE));
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        java.lang.String str33 = pawn31.toString();
        boolean boolean35 = chessBoard22.placePiece((a1.ChessPiece) pawn31, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        boolean boolean41 = chessBoard36.placePiece((a1.ChessPiece) rook39, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard36.placePiece((a1.ChessPiece) knight50, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        a1.King king74 = new a1.King(chessBoard36, color70);
        a1.King king75 = new a1.King(chessBoard22, color70);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color70);
        java.util.ArrayList<java.lang.String> strList77 = knight76.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList77);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException5);
        java.lang.Class<?> wildcardClass7 = illegalMoveException6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        a1.ChessPiece.Color color44 = knight43.getColor();
        java.lang.String str45 = knight43.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265e" + "'", str45, "\u265e");
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        chessBoard0.initialize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException8);
        java.lang.Throwable[] throwableArray12 = illegalPositionException8.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException22);
        java.lang.Throwable throwable26 = null;
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("hi!", throwable26);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("\u265a", throwable26);
        java.lang.Throwable[] throwableArray29 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = illegalMoveException28.getSuppressed();
        illegalPositionException22.addSuppressed((java.lang.Throwable) illegalMoveException28);
        illegalPositionException8.addSuppressed((java.lang.Throwable) illegalPositionException22);
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException22);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException6);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalMoveException12);
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable22 = null;
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("hi!", throwable22);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException23);
        java.lang.Throwable throwable28 = null;
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("hi!", throwable28);
        a1.IllegalPositionException illegalPositionException30 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException29);
        a1.IllegalMoveException illegalMoveException31 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException30);
        illegalMoveException23.addSuppressed((java.lang.Throwable) illegalPositionException30);
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException23);
        illegalPositionException17.addSuppressed((java.lang.Throwable) illegalMoveException23);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("", "\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        a1.ChessPiece.Color color9 = pawn3.getColor();
        java.lang.String str10 = pawn3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(color9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        chessBoard0.initialize();
        a1.ChessPiece.Color color60 = null;
        a1.Bishop bishop61 = new a1.Bishop(chessBoard0, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        java.lang.String str65 = rook64.toString();
        java.lang.String str66 = rook64.getPosition();
        java.util.ArrayList<java.lang.String> strList67 = rook64.legalMoves();
        java.util.ArrayList<java.lang.String> strList68 = rook64.legalMoves();
        boolean boolean70 = chessBoard0.placePiece((a1.ChessPiece) rook64, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece72 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265c" + "'", str65, "\u265c");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        java.lang.String str14 = pawn9.getPosition();
        java.util.ArrayList<java.lang.String> strList15 = pawn9.legalMoves();
        java.util.ArrayList<java.lang.String> strList16 = pawn9.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265a", throwable5);
        java.lang.Throwable[] throwableArray8 = illegalMoveException7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = illegalMoveException7.getSuppressed();
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException14.getSuppressed();
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException14);
        java.lang.Throwable[] throwableArray18 = illegalPositionException17.getSuppressed();
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException17);
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalPositionException17);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalPositionException21);
        java.lang.Throwable[] throwableArray24 = illegalPositionException23.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException9);
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException14.getSuppressed();
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException22);
        illegalMoveException14.addSuppressed((java.lang.Throwable) illegalMoveException24);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException24);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException24);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException27);
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException28);
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException28);
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException36);
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException41.getSuppressed();
        java.lang.Throwable throwable48 = null;
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("hi!", throwable48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException49);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException49);
        illegalMoveException41.addSuppressed((java.lang.Throwable) illegalMoveException51);
        illegalMoveException38.addSuppressed((java.lang.Throwable) illegalMoveException51);
        a1.IllegalPositionException illegalPositionException54 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException51);
        java.lang.Throwable[] throwableArray55 = illegalMoveException51.getSuppressed();
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException51);
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException30);
        java.lang.Throwable throwable59 = null;
        a1.IllegalMoveException illegalMoveException60 = new a1.IllegalMoveException("hi!", throwable59);
        java.lang.Throwable[] throwableArray61 = illegalMoveException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = illegalMoveException60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = illegalMoveException60.getSuppressed();
        java.lang.Throwable throwable67 = null;
        a1.IllegalMoveException illegalMoveException68 = new a1.IllegalMoveException("hi!", throwable67);
        a1.IllegalPositionException illegalPositionException69 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException68);
        a1.IllegalMoveException illegalMoveException70 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException68);
        illegalMoveException60.addSuppressed((java.lang.Throwable) illegalMoveException70);
        java.lang.Throwable[] throwableArray72 = illegalMoveException60.getSuppressed();
        java.lang.Throwable throwable78 = null;
        a1.IllegalMoveException illegalMoveException79 = new a1.IllegalMoveException("hi!", throwable78);
        a1.IllegalPositionException illegalPositionException80 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException79);
        a1.IllegalMoveException illegalMoveException81 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException80);
        a1.IllegalPositionException illegalPositionException82 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException80);
        a1.IllegalMoveException illegalMoveException83 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException80);
        illegalMoveException60.addSuppressed((java.lang.Throwable) illegalMoveException83);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException60);
        java.lang.Throwable[] throwableArray86 = illegalMoveException30.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray86);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        java.util.ArrayList<java.lang.String> strList50 = king47.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            king47.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strList50);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException24);
        java.lang.String str26 = illegalMoveException25.toString();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "a1.IllegalMoveException: a1.IllegalMoveException: hi!" + "'", str26, "a1.IllegalMoveException: a1.IllegalMoveException: hi!");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Knight knight9 = new a1.Knight(chessBoard1, color7);
        a1.Knight knight10 = new a1.Knight(chessBoard0, color7);
        java.lang.String str11 = knight10.toString();
        java.util.ArrayList<java.lang.String> strList12 = knight10.legalMoves();
        java.lang.String str13 = knight10.toString();
        java.util.ArrayList<java.lang.String> strList14 = knight10.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = knight10.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265e" + "'", str11, "\u265e");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265e" + "'", str13, "\u265e");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        chessBoard13.initialize();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard36, color38);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Bishop bishop44 = new a1.Bishop(chessBoard36, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard36, color46);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard33, color46);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard13, color46);
        a1.Knight knight51 = new a1.Knight(chessBoard8, color46);
        a1.King king52 = new a1.King(chessBoard0, color46);
        java.lang.String str53 = king52.toString();
        a1.ChessPiece.Color color54 = king52.getColor();
        java.lang.String str55 = king52.toString();
        java.lang.String str56 = king52.toString();
        java.lang.Class<?> wildcardClass57 = king52.getClass();
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265a" + "'", str53, "\u265a");
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265a" + "'", str55, "\u265a");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265a" + "'", str56, "\u265a");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.King king66 = new a1.King(chessBoard54, color63);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard0, color63);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        java.lang.String str70 = bishop67.toString();
        java.lang.String str71 = bishop67.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265d" + "'", str70, "\u265d");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u265d" + "'", str71, "\u265d");
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable[] throwableArray7 = illegalMoveException3.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.lang.String str6 = rook2.getPosition();
        java.lang.String str7 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList8 = rook2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        boolean boolean10 = chessBoard0.placePiece((a1.ChessPiece) rook6, "\u265e");
        a1.ChessPiece.Color color11 = null;
        a1.Rook rook12 = new a1.Rook(chessBoard0, color11);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard13, color20);
        java.util.ArrayList<java.lang.String> strList24 = knight23.legalMoves();
        a1.ChessPiece.Color color25 = knight23.getColor();
        a1.Knight knight26 = new a1.Knight(chessBoard0, color25);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = null;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard33, color39);
        a1.Rook rook42 = new a1.Rook(chessBoard30, color39);
        a1.Pawn pawn43 = new a1.Pawn(chessBoard27, color39);
        a1.ChessPiece.Color color44 = pawn43.getColor();
        a1.Knight knight45 = new a1.Knight(chessBoard0, color44);
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard19, color21);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color25);
        a1.Rook rook28 = new a1.Rook(chessBoard16, color25);
        a1.Pawn pawn29 = new a1.Pawn(chessBoard13, color25);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.Rook rook65 = new a1.Rook(chessBoard33, color60);
        a1.Rook rook66 = new a1.Rook(chessBoard30, color60);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.Rook rook79 = new a1.Rook(chessBoard67, color76);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = null;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Knight knight87 = new a1.Knight(chessBoard83, color85);
        a1.ChessBoard chessBoard88 = new a1.ChessBoard();
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook90 = new a1.Rook(chessBoard88, color89);
        a1.Bishop bishop91 = new a1.Bishop(chessBoard83, color89);
        a1.Rook rook92 = new a1.Rook(chessBoard80, color89);
        a1.Bishop bishop93 = new a1.Bishop(chessBoard67, color89);
        a1.Knight knight94 = new a1.Knight(chessBoard30, color89);
        a1.Rook rook95 = new a1.Rook(chessBoard13, color89);
        a1.Knight knight96 = new a1.Knight(chessBoard0, color89);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece98 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        java.lang.String str22 = bishop20.toString();
        java.lang.String str23 = bishop20.toString();
        java.util.ArrayList<java.lang.String> strList24 = bishop20.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265d" + "'", str22, "\u265d");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265d" + "'", str23, "\u265d");
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        java.lang.String str54 = king53.toString();
        java.lang.String str55 = king53.toString();
        java.util.ArrayList<java.lang.String> strList56 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList57 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList58 = king53.legalMoves();
        java.lang.String str59 = king53.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265a" + "'", str55, "\u265a");
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265a" + "'", str59, "\u265a");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str21 = bishop20.toString();
        java.lang.String str22 = bishop20.getPosition();
        a1.ChessPiece.Color color23 = bishop20.getColor();
        java.lang.String str24 = bishop20.toString();
        java.lang.String str25 = bishop20.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265d" + "'", str21, "\u265d");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265d" + "'", str24, "\u265d");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u265d" + "'", str25, "\u265d");
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException25);
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException32);
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException32);
        java.lang.Throwable throwable36 = null;
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("hi!", throwable36);
        java.lang.Throwable[] throwableArray38 = illegalMoveException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = illegalMoveException37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = illegalMoveException37.getSuppressed();
        java.lang.Throwable throwable44 = null;
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("hi!", throwable44);
        a1.IllegalPositionException illegalPositionException46 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException45);
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException45);
        illegalMoveException37.addSuppressed((java.lang.Throwable) illegalMoveException47);
        illegalMoveException34.addSuppressed((java.lang.Throwable) illegalMoveException47);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException47);
        java.lang.Throwable[] throwableArray51 = illegalMoveException47.getSuppressed();
        illegalMoveException26.addSuppressed((java.lang.Throwable) illegalMoveException47);
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException47);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray51);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.lang.String str9 = bishop8.toString();
        java.lang.String str10 = bishop8.toString();
        java.lang.String str11 = bishop8.toString();
        java.lang.String str12 = bishop8.toString();
        java.lang.String str13 = bishop8.toString();
        java.util.ArrayList<java.lang.String> strList14 = bishop8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265d" + "'", str9, "\u265d");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265d" + "'", str10, "\u265d");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265d" + "'", str11, "\u265d");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265d" + "'", str13, "\u265d");
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Bishop bishop39 = new a1.Bishop(chessBoard31, color37);
        a1.King king40 = new a1.King(chessBoard28, color37);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Pawn pawn56 = new a1.Pawn(chessBoard44, color54);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard41, color54);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = null;
        a1.ChessPiece.Color color60 = null;
        a1.Pawn pawn61 = new a1.Pawn(chessBoard59, color60);
        java.lang.String str62 = pawn61.toString();
        boolean boolean64 = chessBoard58.placePiece((a1.ChessPiece) pawn61, "");
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Pawn pawn77 = new a1.Pawn(chessBoard65, color75);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard58, color75);
        java.util.ArrayList<java.lang.String> strList79 = bishop78.legalMoves();
        a1.ChessPiece.Color color80 = bishop78.getColor();
        a1.Knight knight81 = new a1.Knight(chessBoard41, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard28, color80);
        a1.Knight knight83 = new a1.Knight(chessBoard0, color80);
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265f" + "'", str62, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Bishop bishop39 = new a1.Bishop(chessBoard31, color37);
        a1.King king40 = new a1.King(chessBoard28, color37);
        a1.ChessBoard chessBoard41 = null;
        a1.ChessPiece.Color color42 = null;
        a1.Pawn pawn43 = new a1.Pawn(chessBoard41, color42);
        java.util.ArrayList<java.lang.String> strList44 = pawn43.legalMoves();
        boolean boolean46 = chessBoard28.placePiece((a1.ChessPiece) pawn43, "\u265e");
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Pawn pawn59 = new a1.Pawn(chessBoard47, color57);
        java.lang.String str60 = pawn59.getPosition();
        a1.ChessPiece.Color color61 = pawn59.getColor();
        a1.Pawn pawn62 = new a1.Pawn(chessBoard28, color61);
        a1.King king63 = new a1.King(chessBoard0, color61);
        java.lang.String str64 = king63.toString();
        java.util.ArrayList<java.lang.String> strList65 = king63.legalMoves();
        java.lang.String str66 = king63.toString();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265a" + "'", str64, "\u265a");
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u265a" + "'", str66, "\u265a");
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        java.lang.String str24 = pawn20.getPosition();
        boolean boolean26 = chessBoard0.placePiece((a1.ChessPiece) pawn20, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard27 = null;
        a1.ChessPiece.Color color28 = null;
        a1.Pawn pawn29 = new a1.Pawn(chessBoard27, color28);
        java.lang.String str30 = pawn29.toString();
        java.util.ArrayList<java.lang.String> strList31 = pawn29.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = pawn29.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = pawn29.legalMoves();
        java.lang.String str34 = pawn29.toString();
        java.util.ArrayList<java.lang.String> strList35 = pawn29.legalMoves();
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn29, "\u265d");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u265f" + "'", str30, "\u265f");
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265f" + "'", str34, "\u265f");
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.lang.String str5 = rook2.toString();
        // The following exception was thrown during execution in test generation
        try {
            rook2.setPosition("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265a", throwable5);
        java.lang.Throwable[] throwableArray8 = illegalMoveException7.getSuppressed();
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException7);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        chessBoard35.initialize();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        java.util.ArrayList<java.lang.String> strList42 = rook41.legalMoves();
        java.util.ArrayList<java.lang.String> strList43 = rook41.legalMoves();
        boolean boolean45 = chessBoard35.placePiece((a1.ChessPiece) rook41, "\u265e");
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) rook41, "a1.IllegalMoveException: ");
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = null;
        a1.ChessPiece.Color color50 = null;
        a1.Pawn pawn51 = new a1.Pawn(chessBoard49, color50);
        java.lang.String str52 = pawn51.toString();
        boolean boolean54 = chessBoard48.placePiece((a1.ChessPiece) pawn51, "");
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        java.lang.String str59 = pawn57.toString();
        boolean boolean61 = chessBoard48.placePiece((a1.ChessPiece) pawn57, "\u265f");
        chessBoard48.initialize();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard66, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Pawn pawn78 = new a1.Pawn(chessBoard66, color76);
        a1.Pawn pawn79 = new a1.Pawn(chessBoard63, color76);
        a1.ChessPiece.Color color80 = pawn79.getColor();
        a1.Bishop bishop81 = new a1.Bishop(chessBoard48, color80);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color80);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u265f" + "'", str52, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265f" + "'", str59, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.lang.String str6 = rook2.toString();
        java.lang.String str7 = rook2.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = rook2.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException9);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException9);
        java.lang.Throwable[] throwableArray13 = illegalPositionException9.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException23);
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("\u265a", throwable27);
        java.lang.Throwable[] throwableArray30 = illegalMoveException29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = illegalMoveException29.getSuppressed();
        illegalPositionException23.addSuppressed((java.lang.Throwable) illegalMoveException29);
        illegalPositionException9.addSuppressed((java.lang.Throwable) illegalPositionException23);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalPositionException23);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException34);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard23, color29);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard23, color32);
        java.lang.String str34 = bishop33.toString();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) bishop33, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        boolean boolean42 = chessBoard37.placePiece((a1.ChessPiece) rook40, "\u265f");
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard43, color49);
        boolean boolean53 = chessBoard37.placePiece((a1.ChessPiece) knight51, "");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Pawn pawn73 = new a1.Pawn(chessBoard61, color71);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard54, color71);
        a1.King king75 = new a1.King(chessBoard37, color71);
        a1.King king76 = new a1.King(chessBoard0, color71);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265d" + "'", str34, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        java.lang.String str38 = bishop37.toString();
        java.lang.String str39 = bishop37.toString();
        java.lang.String str40 = bishop37.toString();
        java.lang.String str41 = bishop37.toString();
        java.lang.String str42 = bishop37.toString();
        boolean boolean44 = chessBoard0.placePiece((a1.ChessPiece) bishop37, "\u265c");
        java.lang.String str45 = bishop37.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265d" + "'", str38, "\u265d");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265d" + "'", str39, "\u265d");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u265d" + "'", str40, "\u265d");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265d" + "'", str41, "\u265d");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265d" + "'", str42, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265d" + "'", str45, "\u265d");
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        java.lang.String str39 = king38.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265a" + "'", str39, "\u265a");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        a1.IllegalPositionException illegalPositionException4 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable[] throwableArray5 = illegalPositionException4.getSuppressed();
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        a1.IllegalPositionException illegalPositionException14 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException16);
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException17);
        illegalPositionException4.addSuppressed((java.lang.Throwable) illegalMoveException18);
        java.lang.Class<?> wildcardClass20 = illegalMoveException18.getClass();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException13);
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalPositionException15);
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable[] throwableArray24 = illegalMoveException23.getSuppressed();
        illegalPositionException15.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("a1.IllegalMoveException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException15);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalPositionException15);
        java.lang.String str28 = illegalPositionException15.toString();
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "a1.IllegalPositionException: a1.IllegalPositionException: " + "'", str28, "a1.IllegalPositionException: a1.IllegalPositionException: ");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Rook rook38 = new a1.Rook(chessBoard26, color35);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.Rook rook51 = new a1.Rook(chessBoard39, color48);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard26, color48);
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard26, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard21, color53);
        java.util.ArrayList<java.lang.String> strList56 = bishop55.legalMoves();
        java.lang.String str57 = bishop55.toString();
        a1.ChessPiece.Color color58 = bishop55.getColor();
        a1.Pawn pawn59 = new a1.Pawn(chessBoard0, color58);
        java.lang.String str60 = pawn59.toString();
        // The following exception was thrown during execution in test generation
        try {
            pawn59.setPosition("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265d" + "'", str57, "\u265d");
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265f" + "'", str60, "\u265f");
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Knight knight54 = new a1.Knight(chessBoard50, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = null;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.Rook rook67 = new a1.Rook(chessBoard55, color64);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = null;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Knight knight75 = new a1.Knight(chessBoard71, color73);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard71, color77);
        a1.Rook rook80 = new a1.Rook(chessBoard68, color77);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard55, color77);
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn83 = new a1.Pawn(chessBoard55, color82);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard50, color82);
        java.util.ArrayList<java.lang.String> strList85 = bishop84.legalMoves();
        java.lang.String str86 = bishop84.toString();
        a1.ChessPiece.Color color87 = bishop84.getColor();
        a1.King king88 = new a1.King(chessBoard0, color87);
        java.lang.String str89 = king88.toString();
        java.lang.String str90 = king88.toString();
        java.lang.Class<?> wildcardClass91 = king88.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u265d" + "'", str86, "\u265d");
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u265a" + "'", str89, "\u265a");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u265a" + "'", str90, "\u265a");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = null;
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        java.lang.String str12 = pawn11.toString();
        boolean boolean14 = chessBoard8.placePiece((a1.ChessPiece) pawn11, "");
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.Knight knight24 = new a1.Knight(chessBoard8, color21);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.lang.String str29 = pawn28.toString();
        boolean boolean31 = chessBoard25.placePiece((a1.ChessPiece) pawn28, "");
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        java.lang.String str36 = pawn34.toString();
        boolean boolean38 = chessBoard25.placePiece((a1.ChessPiece) pawn34, "\u265f");
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        boolean boolean44 = chessBoard39.placePiece((a1.ChessPiece) rook42, "\u265f");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard45, color51);
        boolean boolean55 = chessBoard39.placePiece((a1.ChessPiece) knight53, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = null;
        a1.ChessPiece.Color color58 = null;
        a1.Pawn pawn59 = new a1.Pawn(chessBoard57, color58);
        java.lang.String str60 = pawn59.toString();
        boolean boolean62 = chessBoard56.placePiece((a1.ChessPiece) pawn59, "");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard63, color69);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Pawn pawn75 = new a1.Pawn(chessBoard63, color73);
        a1.Bishop bishop76 = new a1.Bishop(chessBoard56, color73);
        a1.King king77 = new a1.King(chessBoard39, color73);
        a1.King king78 = new a1.King(chessBoard25, color73);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = null;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Knight knight86 = new a1.Knight(chessBoard82, color84);
        a1.ChessBoard chessBoard87 = new a1.ChessBoard();
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook89 = new a1.Rook(chessBoard87, color88);
        a1.Bishop bishop90 = new a1.Bishop(chessBoard82, color88);
        a1.King king91 = new a1.King(chessBoard79, color88);
        a1.Bishop bishop92 = new a1.Bishop(chessBoard25, color88);
        a1.ChessPiece.Color color93 = bishop92.getColor();
        a1.Pawn pawn94 = new a1.Pawn(chessBoard8, color93);
        a1.ChessBoard chessBoard95 = new a1.ChessBoard();
        a1.ChessPiece.Color color96 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook97 = new a1.Rook(chessBoard95, color96);
        a1.King king98 = new a1.King(chessBoard8, color96);
        a1.King king99 = new a1.King(chessBoard0, color96);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265f" + "'", str12, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u265f" + "'", str29, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265f" + "'", str36, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265f" + "'", str60, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color88.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color93 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color93.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color96 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color96.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = bishop20.legalMoves();
        java.lang.String str23 = bishop20.getPosition();
        a1.ChessPiece.Color color24 = bishop20.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.King king30 = new a1.King(chessBoard18, color27);
        a1.ChessBoard chessBoard31 = null;
        a1.ChessPiece.Color color32 = null;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard31, color32);
        java.util.ArrayList<java.lang.String> strList34 = pawn33.legalMoves();
        boolean boolean36 = chessBoard18.placePiece((a1.ChessPiece) pawn33, "\u265e");
        chessBoard18.initialize();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard41, color51);
        a1.Pawn pawn54 = new a1.Pawn(chessBoard38, color51);
        a1.Pawn pawn55 = new a1.Pawn(chessBoard18, color51);
        a1.Knight knight56 = new a1.Knight(chessBoard13, color51);
        a1.Rook rook57 = new a1.Rook(chessBoard6, color51);
        a1.Knight knight58 = new a1.Knight(chessBoard0, color51);
        java.util.ArrayList<java.lang.String> strList59 = knight58.legalMoves();
        java.util.ArrayList<java.lang.String> strList60 = knight58.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(strList60);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        java.util.ArrayList<java.lang.String> strList13 = pawn12.legalMoves();
        java.lang.String str14 = pawn12.toString();
        java.util.ArrayList<java.lang.String> strList15 = pawn12.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265f" + "'", str14, "\u265f");
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.util.ArrayList<java.lang.String> strList5 = knight4.legalMoves();
        a1.ChessPiece.Color color6 = knight4.getColor();
        java.util.ArrayList<java.lang.String> strList7 = knight4.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException22);
        java.lang.Throwable[] throwableArray26 = illegalMoveException22.getSuppressed();
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException33);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException34);
        a1.IllegalPositionException illegalPositionException36 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException34);
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException34);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalMoveException37);
        java.lang.Throwable throwable41 = null;
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("hi!", throwable41);
        java.lang.Throwable[] throwableArray43 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable46 = null;
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("hi!", throwable46);
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException47);
        java.lang.Throwable[] throwableArray49 = illegalMoveException47.getSuppressed();
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalMoveException47);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException42);
        illegalMoveException37.addSuppressed((java.lang.Throwable) illegalMoveException42);
        a1.IllegalPositionException illegalPositionException53 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException37);
        a1.IllegalMoveException illegalMoveException54 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException37);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray49);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException25);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException26);
        java.lang.String str28 = illegalMoveException26.toString();
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "a1.IllegalMoveException: a1.IllegalMoveException: hi!" + "'", str28, "a1.IllegalMoveException: a1.IllegalMoveException: hi!");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        java.lang.String str6 = rook3.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException11);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException13);
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        java.lang.Throwable[] throwableArray21 = illegalMoveException20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = illegalMoveException20.getSuppressed();
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException20);
        java.lang.Throwable[] throwableArray25 = illegalMoveException20.getSuppressed();
        java.lang.Throwable throwable28 = null;
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("hi!", throwable28);
        java.lang.Throwable[] throwableArray30 = illegalMoveException29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = illegalMoveException29.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException29.getSuppressed();
        java.lang.Throwable throwable36 = null;
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("hi!", throwable36);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException37);
        a1.IllegalMoveException illegalMoveException39 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException37);
        illegalMoveException29.addSuppressed((java.lang.Throwable) illegalMoveException39);
        a1.IllegalPositionException illegalPositionException41 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException39);
        java.lang.Throwable throwable44 = null;
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("hi!", throwable44);
        a1.IllegalMoveException illegalMoveException46 = new a1.IllegalMoveException("\u265a", throwable44);
        java.lang.Throwable[] throwableArray47 = illegalMoveException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = illegalMoveException46.getSuppressed();
        java.lang.Throwable throwable52 = null;
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("hi!", throwable52);
        java.lang.Throwable[] throwableArray54 = illegalMoveException53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = illegalMoveException53.getSuppressed();
        a1.IllegalPositionException illegalPositionException56 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException53);
        java.lang.Throwable[] throwableArray57 = illegalPositionException56.getSuppressed();
        a1.IllegalMoveException illegalMoveException58 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException56);
        illegalMoveException46.addSuppressed((java.lang.Throwable) illegalPositionException56);
        illegalPositionException41.addSuppressed((java.lang.Throwable) illegalPositionException56);
        illegalMoveException20.addSuppressed((java.lang.Throwable) illegalPositionException56);
        illegalMoveException15.addSuppressed((java.lang.Throwable) illegalPositionException56);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        chessBoard6.initialize();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        java.util.ArrayList<java.lang.String> strList13 = rook12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook12.legalMoves();
        boolean boolean16 = chessBoard6.placePiece((a1.ChessPiece) rook12, "\u265e");
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard6, color17);
        a1.ChessBoard chessBoard19 = null;
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        a1.Knight knight29 = new a1.Knight(chessBoard19, color26);
        java.util.ArrayList<java.lang.String> strList30 = knight29.legalMoves();
        a1.ChessPiece.Color color31 = knight29.getColor();
        a1.Knight knight32 = new a1.Knight(chessBoard6, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color31);
        java.lang.String str34 = bishop33.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265d" + "'", str34, "\u265d");
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece7 = chessBoard0.getPiece("a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable[] throwableArray9 = illegalPositionException8.getSuppressed();
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException10);
        java.lang.Throwable throwable15 = null;
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("hi!", throwable15);
        java.lang.Throwable[] throwableArray17 = illegalMoveException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = illegalMoveException16.getSuppressed();
        java.lang.Throwable[] throwableArray19 = illegalMoveException16.getSuppressed();
        java.lang.Throwable throwable23 = null;
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("hi!", throwable23);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException24);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException24);
        illegalMoveException16.addSuppressed((java.lang.Throwable) illegalMoveException26);
        a1.IllegalPositionException illegalPositionException28 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException26);
        java.lang.Throwable throwable34 = null;
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("hi!", throwable34);
        a1.IllegalPositionException illegalPositionException36 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException35);
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException35);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException35);
        a1.IllegalMoveException illegalMoveException39 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException38);
        java.lang.Throwable throwable42 = null;
        a1.IllegalMoveException illegalMoveException43 = new a1.IllegalMoveException("hi!", throwable42);
        a1.IllegalMoveException illegalMoveException44 = new a1.IllegalMoveException("\u265a", throwable42);
        java.lang.Throwable[] throwableArray45 = illegalMoveException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = illegalMoveException44.getSuppressed();
        illegalPositionException38.addSuppressed((java.lang.Throwable) illegalMoveException44);
        illegalMoveException26.addSuppressed((java.lang.Throwable) illegalPositionException38);
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException26);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException26);
        java.lang.Throwable[] throwableArray51 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable56 = null;
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("hi!", throwable56);
        a1.IllegalPositionException illegalPositionException58 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException57);
        a1.IllegalMoveException illegalMoveException59 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException57);
        java.lang.Throwable throwable61 = null;
        a1.IllegalMoveException illegalMoveException62 = new a1.IllegalMoveException("hi!", throwable61);
        java.lang.Throwable[] throwableArray63 = illegalMoveException62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = illegalMoveException62.getSuppressed();
        java.lang.Throwable[] throwableArray65 = illegalMoveException62.getSuppressed();
        java.lang.Throwable throwable69 = null;
        a1.IllegalMoveException illegalMoveException70 = new a1.IllegalMoveException("hi!", throwable69);
        a1.IllegalPositionException illegalPositionException71 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException70);
        a1.IllegalMoveException illegalMoveException72 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException70);
        illegalMoveException62.addSuppressed((java.lang.Throwable) illegalMoveException72);
        illegalMoveException59.addSuppressed((java.lang.Throwable) illegalMoveException72);
        java.lang.Throwable throwable77 = null;
        a1.IllegalMoveException illegalMoveException78 = new a1.IllegalMoveException("hi!", throwable77);
        a1.IllegalPositionException illegalPositionException79 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException78);
        illegalMoveException72.addSuppressed((java.lang.Throwable) illegalMoveException78);
        a1.IllegalPositionException illegalPositionException81 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException78);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalPositionException81);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        java.lang.String str39 = bishop38.toString();
        java.util.ArrayList<java.lang.String> strList40 = bishop38.legalMoves();
        boolean boolean42 = chessBoard0.placePiece((a1.ChessPiece) bishop38, "");
        java.util.ArrayList<java.lang.String> strList43 = bishop38.legalMoves();
        java.util.ArrayList<java.lang.String> strList44 = bishop38.legalMoves();
        java.lang.String str45 = bishop38.getPosition();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265d" + "'", str39, "\u265d");
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: ", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = null;
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        java.lang.String str22 = pawn21.toString();
        boolean boolean24 = chessBoard18.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        java.lang.String str29 = pawn27.toString();
        boolean boolean31 = chessBoard18.placePiece((a1.ChessPiece) pawn27, "\u265f");
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        boolean boolean37 = chessBoard32.placePiece((a1.ChessPiece) rook35, "\u265f");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard38, color44);
        boolean boolean48 = chessBoard32.placePiece((a1.ChessPiece) knight46, "");
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard56, color66);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard49, color66);
        a1.King king70 = new a1.King(chessBoard32, color66);
        a1.King king71 = new a1.King(chessBoard18, color66);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = null;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Knight knight79 = new a1.Knight(chessBoard75, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard75, color81);
        a1.King king84 = new a1.King(chessBoard72, color81);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard18, color81);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard0, color81);
        java.lang.String str87 = bishop86.getPosition();
        java.lang.String str88 = bishop86.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u265f" + "'", str29, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u265d" + "'", str88, "\u265d");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard11, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard11.placePiece((a1.ChessPiece) knight30, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard33, color39);
        boolean boolean43 = chessBoard11.placePiece((a1.ChessPiece) knight41, "\u265e");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.lang.String str48 = pawn47.toString();
        boolean boolean50 = chessBoard44.placePiece((a1.ChessPiece) pawn47, "");
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Knight knight60 = new a1.Knight(chessBoard44, color57);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = null;
        a1.ChessPiece.Color color63 = null;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard62, color63);
        java.lang.String str65 = pawn64.toString();
        boolean boolean67 = chessBoard61.placePiece((a1.ChessPiece) pawn64, "");
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Knight knight72 = new a1.Knight(chessBoard68, color70);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Bishop bishop76 = new a1.Bishop(chessBoard68, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Pawn pawn80 = new a1.Pawn(chessBoard68, color78);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard61, color78);
        a1.King king82 = new a1.King(chessBoard44, color78);
        a1.Rook rook83 = new a1.Rook(chessBoard11, color78);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Knight knight88 = new a1.Knight(chessBoard84, color86);
        a1.ChessBoard chessBoard89 = new a1.ChessBoard();
        a1.ChessPiece.Color color90 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook91 = new a1.Rook(chessBoard89, color90);
        a1.Knight knight92 = new a1.Knight(chessBoard84, color90);
        a1.Knight knight93 = new a1.Knight(chessBoard11, color90);
        a1.Rook rook94 = new a1.Rook(chessBoard0, color90);
        java.lang.String str95 = rook94.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265f" + "'", str48, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265f" + "'", str65, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "\u265c" + "'", str95, "\u265c");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.lang.String str7 = pawn2.toString();
        // The following exception was thrown during execution in test generation
        try {
            pawn2.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Bishop bishop21 = new a1.Bishop(chessBoard13, color19);
        a1.Knight knight22 = new a1.Knight(chessBoard6, color19);
        a1.Knight knight23 = new a1.Knight(chessBoard0, color19);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = rook27.legalMoves();
        java.lang.String str29 = rook27.toString();
        java.lang.String str30 = rook27.getPosition();
        java.util.ArrayList<java.lang.String> strList31 = rook27.legalMoves();
        java.lang.String str32 = rook27.toString();
        java.util.ArrayList<java.lang.String> strList33 = rook27.legalMoves();
        boolean boolean35 = chessBoard0.placePiece((a1.ChessPiece) rook27, "\u265f");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265e", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u265c" + "'", str29, "\u265c");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265c" + "'", str32, "\u265c");
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = illegalMoveException5.getSuppressed();
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        a1.IllegalPositionException illegalPositionException14 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException13);
        illegalMoveException5.addSuppressed((java.lang.Throwable) illegalMoveException15);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException15);
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException15);
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException15);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException7.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray17 = illegalMoveException12.getSuppressed();
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException22);
        java.lang.Throwable[] throwableArray24 = illegalPositionException23.getSuppressed();
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalPositionException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException12);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        boolean boolean29 = chessBoard23.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Knight knight39 = new a1.Knight(chessBoard23, color36);
        a1.Knight knight40 = new a1.Knight(chessBoard17, color36);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard0, color36);
        java.util.ArrayList<java.lang.String> strList42 = bishop41.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList42);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessPiece.Color color48 = null;
        a1.Bishop bishop49 = new a1.Bishop(chessBoard39, color48);
        java.lang.String str50 = bishop49.toString();
        java.lang.String str51 = bishop49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) bishop49, "\u265c");
        java.util.ArrayList<java.lang.String> strList54 = bishop49.legalMoves();
        java.lang.String str55 = bishop49.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265d" + "'", str50, "\u265d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265d" + "'", str51, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.lang.String str6 = knight4.toString();
        java.lang.String str7 = knight4.toString();
        java.lang.String str8 = knight4.toString();
        java.lang.String str9 = knight4.toString();
        java.lang.String str10 = knight4.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265e" + "'", str6, "\u265e");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265e" + "'", str7, "\u265e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265e" + "'", str9, "\u265e");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Knight knight9 = new a1.Knight(chessBoard1, color7);
        a1.Knight knight10 = new a1.Knight(chessBoard0, color7);
        java.lang.String str11 = knight10.toString();
        java.util.ArrayList<java.lang.String> strList12 = knight10.legalMoves();
        java.lang.String str13 = knight10.toString();
        // The following exception was thrown during execution in test generation
        try {
            knight10.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265e" + "'", str11, "\u265e");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265e" + "'", str13, "\u265e");
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.toString();
        java.lang.String str7 = rook2.toString();
        java.lang.String str8 = rook2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", throwable6);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Bishop bishop9 = new a1.Bishop(chessBoard1, color7);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard1, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Knight knight16 = new a1.Knight(chessBoard12, color14);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard12, color18);
        boolean boolean22 = chessBoard1.placePiece((a1.ChessPiece) knight20, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        boolean boolean29 = chessBoard23.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessBoard chessBoard30 = null;
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard30, color31);
        java.lang.String str33 = pawn32.toString();
        java.lang.String str34 = pawn32.toString();
        boolean boolean36 = chessBoard23.placePiece((a1.ChessPiece) pawn32, "\u265f");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        boolean boolean42 = chessBoard37.placePiece((a1.ChessPiece) rook40, "\u265f");
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard43, color49);
        boolean boolean53 = chessBoard37.placePiece((a1.ChessPiece) knight51, "");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Pawn pawn73 = new a1.Pawn(chessBoard61, color71);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard54, color71);
        a1.King king75 = new a1.King(chessBoard37, color71);
        a1.King king76 = new a1.King(chessBoard23, color71);
        a1.Knight knight77 = new a1.Knight(chessBoard1, color71);
        a1.Rook rook78 = new a1.Rook(chessBoard0, color71);
        java.util.ArrayList<java.lang.String> strList79 = rook78.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265f" + "'", str34, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList79);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = illegalMoveException2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException2.getSuppressed();
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException10);
        illegalMoveException2.addSuppressed((java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        a1.ChessPiece.Color color63 = king60.getColor();
        java.util.ArrayList<java.lang.String> strList64 = king60.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        java.util.ArrayList<java.lang.String> strList8 = rook7.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook7.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = rook7.legalMoves();
        java.lang.String str11 = rook7.getPosition();
        java.lang.String str12 = rook7.toString();
        boolean boolean14 = chessBoard0.placePiece((a1.ChessPiece) rook7, "");
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece17 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265c" + "'", str12, "\u265c");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException11);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException23);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException23);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException23);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException26);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException32);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalPositionException33);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable[] throwableArray9 = illegalPositionException8.getSuppressed();
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException10);
        java.lang.Throwable[] throwableArray12 = illegalPositionException10.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        java.lang.String str58 = knight57.toString();
        java.lang.String str59 = knight57.toString();
        java.lang.String str60 = knight57.toString();
        java.lang.String str61 = knight57.toString();
        boolean boolean63 = chessBoard0.placePiece((a1.ChessPiece) knight57, "\u265c");
        java.lang.String str64 = knight57.getPosition();
        java.lang.String str65 = knight57.toString();
        a1.ChessPiece.Color color66 = knight57.getColor();
        java.lang.String str67 = knight57.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265e" + "'", str58, "\u265e");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265e" + "'", str59, "\u265e");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265e" + "'", str60, "\u265e");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265e" + "'", str65, "\u265e");
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u265e" + "'", str67, "\u265e");
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        java.lang.Throwable[] throwableArray29 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = illegalMoveException28.getSuppressed();
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException36);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException38);
        java.lang.Throwable[] throwableArray40 = illegalMoveException28.getSuppressed();
        java.lang.Throwable throwable46 = null;
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("hi!", throwable46);
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException47);
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException48);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException48);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException51);
        illegalPositionException25.addSuppressed((java.lang.Throwable) illegalMoveException51);
        java.lang.Throwable throwable56 = null;
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("hi!", throwable56);
        a1.IllegalPositionException illegalPositionException58 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException57);
        java.lang.Throwable throwable62 = null;
        a1.IllegalMoveException illegalMoveException63 = new a1.IllegalMoveException("hi!", throwable62);
        a1.IllegalPositionException illegalPositionException64 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException63);
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException64);
        illegalMoveException57.addSuppressed((java.lang.Throwable) illegalPositionException64);
        java.lang.Throwable throwable69 = null;
        a1.IllegalMoveException illegalMoveException70 = new a1.IllegalMoveException("hi!", throwable69);
        java.lang.Throwable[] throwableArray71 = illegalMoveException70.getSuppressed();
        java.lang.Throwable throwable73 = null;
        a1.IllegalMoveException illegalMoveException74 = new a1.IllegalMoveException("hi!", throwable73);
        java.lang.Throwable[] throwableArray75 = illegalMoveException74.getSuppressed();
        illegalMoveException70.addSuppressed((java.lang.Throwable) illegalMoveException74);
        a1.IllegalMoveException illegalMoveException77 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException70);
        illegalPositionException64.addSuppressed((java.lang.Throwable) illegalMoveException70);
        illegalMoveException51.addSuppressed((java.lang.Throwable) illegalPositionException64);
        java.lang.Throwable throwable83 = null;
        a1.IllegalMoveException illegalMoveException84 = new a1.IllegalMoveException("hi!", throwable83);
        java.lang.Throwable[] throwableArray85 = illegalMoveException84.getSuppressed();
        java.lang.Throwable[] throwableArray86 = illegalMoveException84.getSuppressed();
        a1.IllegalPositionException illegalPositionException87 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException84);
        a1.IllegalMoveException illegalMoveException88 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException84);
        java.lang.Throwable[] throwableArray89 = illegalMoveException84.getSuppressed();
        illegalMoveException51.addSuppressed((java.lang.Throwable) illegalMoveException84);
        java.lang.Throwable[] throwableArray91 = illegalMoveException84.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException4);
        java.lang.String str10 = illegalMoveException4.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str10, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        java.lang.String str39 = king38.toString();
        java.lang.String str40 = king38.toString();
        java.util.ArrayList<java.lang.String> strList41 = king38.legalMoves();
        java.lang.String str42 = king38.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265a" + "'", str39, "\u265a");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u265a" + "'", str40, "\u265a");
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265a" + "'", str42, "\u265a");
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException9);
        java.lang.String str11 = illegalPositionException9.toString();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "a1.IllegalPositionException: " + "'", str11, "a1.IllegalPositionException: ");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        java.lang.String str63 = king60.toString();
        java.lang.String str64 = king60.toString();
        java.lang.String str65 = king60.toString();
        // The following exception was thrown during execution in test generation
        try {
            king60.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265a" + "'", str63, "\u265a");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265a" + "'", str64, "\u265a");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265a" + "'", str65, "\u265a");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException9);
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("\u265a", throwable31);
        java.lang.Throwable[] throwableArray34 = illegalMoveException33.getSuppressed();
        a1.IllegalPositionException illegalPositionException35 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException33);
        a1.IllegalPositionException illegalPositionException36 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalPositionException35);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalPositionException35);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalPositionException35);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        java.lang.String str54 = king53.toString();
        java.lang.String str55 = king53.toString();
        java.util.ArrayList<java.lang.String> strList56 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList57 = king53.legalMoves();
        a1.ChessPiece.Color color58 = king53.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265a" + "'", str55, "\u265a");
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = null;
        a1.ChessPiece.Color color74 = null;
        a1.Pawn pawn75 = new a1.Pawn(chessBoard73, color74);
        java.lang.String str76 = pawn75.toString();
        boolean boolean78 = chessBoard72.placePiece((a1.ChessPiece) pawn75, "");
        boolean boolean80 = chessBoard0.placePiece((a1.ChessPiece) pawn75, "\u265c");
        java.util.ArrayList<java.lang.String> strList81 = pawn75.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265f" + "'", str76, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strList81);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException14);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException14);
        java.lang.String str18 = illegalMoveException17.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265c" + "'", str18, "\u265c");
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard9, color28);
        a1.Knight knight32 = new a1.Knight(chessBoard0, color28);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard40, color50);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard33, color50);
        java.util.ArrayList<java.lang.String> strList54 = bishop53.legalMoves();
        java.lang.String str55 = bishop53.toString();
        boolean boolean57 = chessBoard0.placePiece((a1.ChessPiece) bishop53, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = null;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = null;
        a1.ChessPiece.Color color72 = null;
        a1.Pawn pawn73 = new a1.Pawn(chessBoard71, color72);
        java.lang.String str74 = pawn73.toString();
        boolean boolean76 = chessBoard70.placePiece((a1.ChessPiece) pawn73, "");
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Knight knight81 = new a1.Knight(chessBoard77, color79);
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard77, color83);
        a1.Knight knight86 = new a1.Knight(chessBoard70, color83);
        a1.ChessBoard chessBoard87 = new a1.ChessBoard();
        a1.ChessBoard chessBoard88 = new a1.ChessBoard();
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook90 = new a1.Rook(chessBoard88, color89);
        a1.Knight knight91 = new a1.Knight(chessBoard87, color89);
        a1.Bishop bishop92 = new a1.Bishop(chessBoard70, color89);
        a1.Knight knight93 = new a1.Knight(chessBoard61, color89);
        a1.Bishop bishop94 = new a1.Bishop(chessBoard58, color89);
        a1.Pawn pawn95 = new a1.Pawn(chessBoard0, color89);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265d" + "'", str55, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265f" + "'", str74, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        java.lang.String str7 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList8 = knight4.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265e" + "'", str7, "\u265e");
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = rook2.legalMoves();
        java.lang.String str8 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList9 = rook2.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        java.lang.String str17 = knight16.toString();
        java.util.ArrayList<java.lang.String> strList18 = knight16.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = knight16.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = knight16.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            knight16.setPosition("a1.IllegalMoveException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265e" + "'", str17, "\u265e");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Pawn pawn20 = new a1.Pawn(chessBoard8, color18);
        a1.Pawn pawn21 = new a1.Pawn(chessBoard5, color18);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        java.lang.String str29 = pawn25.getPosition();
        boolean boolean31 = chessBoard5.placePiece((a1.ChessPiece) pawn25, "a1.IllegalMoveException: hi!");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = null;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard36, color38);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Bishop bishop44 = new a1.Bishop(chessBoard36, color42);
        a1.King king45 = new a1.King(chessBoard33, color42);
        java.util.ArrayList<java.lang.String> strList46 = king45.legalMoves();
        java.util.ArrayList<java.lang.String> strList47 = king45.legalMoves();
        java.lang.String str48 = king45.toString();
        java.util.ArrayList<java.lang.String> strList49 = king45.legalMoves();
        java.lang.String str50 = king45.toString();
        java.lang.String str51 = king45.toString();
        java.util.ArrayList<java.lang.String> strList52 = king45.legalMoves();
        java.util.ArrayList<java.lang.String> strList53 = king45.legalMoves();
        a1.ChessPiece.Color color54 = king45.getColor();
        a1.King king55 = new a1.King(chessBoard5, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard0, color54);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265a" + "'", str48, "\u265a");
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265a" + "'", str50, "\u265a");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265a" + "'", str51, "\u265a");
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard0, color6);
        java.lang.String str9 = knight8.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265e" + "'", str9, "\u265e");
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable[] throwableArray10 = illegalMoveException8.getSuppressed();
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException8);
        java.lang.String str12 = illegalMoveException8.toString();
        org.junit.Assert.assertNotNull(throwableArray10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265e" + "'", str12, "\u265e");
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        java.util.ArrayList<java.lang.String> strList33 = rook32.legalMoves();
        java.lang.String str34 = rook32.toString();
        java.util.ArrayList<java.lang.String> strList35 = rook32.legalMoves();
        java.util.ArrayList<java.lang.String> strList36 = rook32.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            rook32.setPosition("a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265c" + "'", str34, "\u265c");
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        boolean boolean43 = chessBoard38.placePiece((a1.ChessPiece) rook41, "\u265f");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard44, color50);
        boolean boolean54 = chessBoard38.placePiece((a1.ChessPiece) knight52, "");
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = null;
        a1.ChessPiece.Color color57 = null;
        a1.Pawn pawn58 = new a1.Pawn(chessBoard56, color57);
        java.lang.String str59 = pawn58.toString();
        boolean boolean61 = chessBoard55.placePiece((a1.ChessPiece) pawn58, "");
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard62, color72);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard55, color72);
        a1.King king76 = new a1.King(chessBoard38, color72);
        a1.Knight knight77 = new a1.Knight(chessBoard0, color72);
        java.util.ArrayList<java.lang.String> strList78 = knight77.legalMoves();
        java.lang.String str79 = knight77.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265f" + "'", str59, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265e" + "'", str79, "\u265e");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        java.lang.Throwable[] throwableArray29 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = illegalMoveException28.getSuppressed();
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException36);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException38);
        java.lang.Throwable[] throwableArray40 = illegalMoveException28.getSuppressed();
        java.lang.Throwable throwable46 = null;
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("hi!", throwable46);
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException47);
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException48);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException48);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException51);
        illegalPositionException25.addSuppressed((java.lang.Throwable) illegalMoveException51);
        java.lang.Throwable throwable56 = null;
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("hi!", throwable56);
        a1.IllegalPositionException illegalPositionException58 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException57);
        java.lang.Throwable throwable62 = null;
        a1.IllegalMoveException illegalMoveException63 = new a1.IllegalMoveException("hi!", throwable62);
        a1.IllegalPositionException illegalPositionException64 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException63);
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException64);
        illegalMoveException57.addSuppressed((java.lang.Throwable) illegalPositionException64);
        java.lang.Throwable throwable69 = null;
        a1.IllegalMoveException illegalMoveException70 = new a1.IllegalMoveException("hi!", throwable69);
        java.lang.Throwable[] throwableArray71 = illegalMoveException70.getSuppressed();
        java.lang.Throwable throwable73 = null;
        a1.IllegalMoveException illegalMoveException74 = new a1.IllegalMoveException("hi!", throwable73);
        java.lang.Throwable[] throwableArray75 = illegalMoveException74.getSuppressed();
        illegalMoveException70.addSuppressed((java.lang.Throwable) illegalMoveException74);
        a1.IllegalMoveException illegalMoveException77 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException70);
        illegalPositionException64.addSuppressed((java.lang.Throwable) illegalMoveException70);
        illegalMoveException51.addSuppressed((java.lang.Throwable) illegalPositionException64);
        java.lang.Throwable throwable83 = null;
        a1.IllegalMoveException illegalMoveException84 = new a1.IllegalMoveException("hi!", throwable83);
        a1.IllegalPositionException illegalPositionException85 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException84);
        a1.IllegalPositionException illegalPositionException86 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException85);
        illegalPositionException64.addSuppressed((java.lang.Throwable) illegalPositionException85);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray75);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        java.lang.String str58 = knight57.toString();
        java.lang.String str59 = knight57.toString();
        java.lang.String str60 = knight57.toString();
        java.lang.String str61 = knight57.toString();
        boolean boolean63 = chessBoard0.placePiece((a1.ChessPiece) knight57, "\u265c");
        chessBoard0.initialize();
        a1.ChessPiece.Color color65 = null;
        a1.Knight knight66 = new a1.Knight(chessBoard0, color65);
        java.util.ArrayList<java.lang.String> strList67 = knight66.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265e" + "'", str58, "\u265e");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265e" + "'", str59, "\u265e");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265e" + "'", str60, "\u265e");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strList67);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard41, color47);
        java.util.ArrayList<java.lang.String> strList50 = knight49.legalMoves();
        java.lang.String str51 = knight49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) knight49, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Pawn pawn73 = new a1.Pawn(chessBoard61, color71);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard54, color71);
        java.util.ArrayList<java.lang.String> strList75 = bishop74.legalMoves();
        java.util.ArrayList<java.lang.String> strList76 = bishop74.legalMoves();
        java.lang.String str77 = bishop74.toString();
        boolean boolean79 = chessBoard0.placePiece((a1.ChessPiece) bishop74, "\u265c");
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265e" + "'", str51, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265d" + "'", str77, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.lang.String str14 = king12.toString();
        java.lang.String str15 = king12.getPosition();
        java.lang.String str16 = king12.getPosition();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265a" + "'", str14, "\u265a");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        java.lang.String str38 = bishop37.toString();
        java.lang.String str39 = bishop37.toString();
        java.lang.String str40 = bishop37.toString();
        java.lang.String str41 = bishop37.toString();
        java.lang.String str42 = bishop37.toString();
        boolean boolean44 = chessBoard0.placePiece((a1.ChessPiece) bishop37, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265d" + "'", str38, "\u265d");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265d" + "'", str39, "\u265d");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u265d" + "'", str40, "\u265d");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265d" + "'", str41, "\u265d");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265d" + "'", str42, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.lang.String str16 = pawn15.toString();
        java.lang.String str17 = pawn15.toString();
        boolean boolean19 = chessBoard6.placePiece((a1.ChessPiece) pawn15, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        boolean boolean25 = chessBoard20.placePiece((a1.ChessPiece) rook23, "\u265f");
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard26, color32);
        boolean boolean36 = chessBoard20.placePiece((a1.ChessPiece) knight34, "");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = null;
        a1.ChessPiece.Color color39 = null;
        a1.Pawn pawn40 = new a1.Pawn(chessBoard38, color39);
        java.lang.String str41 = pawn40.toString();
        boolean boolean43 = chessBoard37.placePiece((a1.ChessPiece) pawn40, "");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Pawn pawn56 = new a1.Pawn(chessBoard44, color54);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard37, color54);
        a1.King king58 = new a1.King(chessBoard20, color54);
        a1.King king59 = new a1.King(chessBoard6, color54);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = null;
        a1.ChessPiece.Color color62 = null;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard61, color62);
        java.lang.String str64 = pawn63.toString();
        boolean boolean66 = chessBoard60.placePiece((a1.ChessPiece) pawn63, "");
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard67, color69);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard67, color73);
        a1.Knight knight76 = new a1.Knight(chessBoard60, color73);
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight78 = new a1.Knight(chessBoard60, color77);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard6, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Knight knight84 = new a1.Knight(chessBoard80, color82);
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard80, color86);
        a1.ChessBoard chessBoard89 = new a1.ChessBoard();
        a1.ChessPiece.Color color90 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook91 = new a1.Rook(chessBoard89, color90);
        a1.Pawn pawn92 = new a1.Pawn(chessBoard80, color90);
        a1.Bishop bishop93 = new a1.Bishop(chessBoard6, color90);
        a1.Knight knight94 = new a1.Knight(chessBoard0, color90);
        java.util.ArrayList<java.lang.String> strList95 = knight94.legalMoves();
        java.lang.String str96 = knight94.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265f" + "'", str16, "\u265f");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265f" + "'", str41, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265f" + "'", str64, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "\u265e" + "'", str96, "\u265e");
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = null;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard66, color72);
        a1.King king75 = new a1.King(chessBoard63, color72);
        java.util.ArrayList<java.lang.String> strList76 = king75.legalMoves();
        java.util.ArrayList<java.lang.String> strList77 = king75.legalMoves();
        java.lang.String str78 = king75.toString();
        java.util.ArrayList<java.lang.String> strList79 = king75.legalMoves();
        java.lang.String str80 = king75.toString();
        java.lang.String str81 = king75.toString();
        a1.ChessPiece.Color color82 = king75.getColor();
        boolean boolean84 = chessBoard0.placePiece((a1.ChessPiece) king75, "\u265c");
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265a" + "'", str78, "\u265a");
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u265a" + "'", str80, "\u265a");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265a" + "'", str81, "\u265a");
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList35 = pawn34.legalMoves();
        java.util.ArrayList<java.lang.String> strList36 = pawn34.legalMoves();
        java.util.ArrayList<java.lang.String> strList37 = pawn34.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            pawn34.setPosition("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Rook rook38 = new a1.Rook(chessBoard26, color35);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.Rook rook51 = new a1.Rook(chessBoard39, color48);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard26, color48);
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard26, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard21, color53);
        java.util.ArrayList<java.lang.String> strList56 = bishop55.legalMoves();
        java.lang.String str57 = bishop55.toString();
        a1.ChessPiece.Color color58 = bishop55.getColor();
        a1.Pawn pawn59 = new a1.Pawn(chessBoard0, color58);
        java.lang.String str60 = pawn59.toString();
        java.util.ArrayList<java.lang.String> strList61 = pawn59.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265d" + "'", str57, "\u265d");
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265f" + "'", str60, "\u265f");
        org.junit.Assert.assertNotNull(strList61);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard4, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Bishop bishop12 = new a1.Bishop(chessBoard4, color10);
        a1.King king13 = new a1.King(chessBoard1, color10);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Bishop bishop25 = new a1.Bishop(chessBoard17, color23);
        a1.King king26 = new a1.King(chessBoard14, color23);
        a1.ChessBoard chessBoard27 = null;
        a1.ChessPiece.Color color28 = null;
        a1.Pawn pawn29 = new a1.Pawn(chessBoard27, color28);
        java.util.ArrayList<java.lang.String> strList30 = pawn29.legalMoves();
        boolean boolean32 = chessBoard14.placePiece((a1.ChessPiece) pawn29, "\u265e");
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard14, color33);
        a1.Rook rook35 = new a1.Rook(chessBoard1, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = null;
        a1.ChessPiece.Color color38 = null;
        a1.Pawn pawn39 = new a1.Pawn(chessBoard37, color38);
        java.lang.String str40 = pawn39.toString();
        boolean boolean42 = chessBoard36.placePiece((a1.ChessPiece) pawn39, "");
        java.lang.String str43 = pawn39.getPosition();
        java.util.ArrayList<java.lang.String> strList44 = pawn39.legalMoves();
        java.lang.String str45 = pawn39.toString();
        java.lang.String str46 = pawn39.toString();
        boolean boolean48 = chessBoard1.placePiece((a1.ChessPiece) pawn39, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard49 = null;
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.Knight knight66 = new a1.Knight(chessBoard50, color63);
        a1.Knight knight67 = new a1.Knight(chessBoard49, color63);
        a1.King king68 = new a1.King(chessBoard1, color63);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        boolean boolean74 = chessBoard69.placePiece((a1.ChessPiece) rook72, "\u265f");
        java.util.ArrayList<java.lang.String> strList75 = rook72.legalMoves();
        java.lang.String str76 = rook72.toString();
        java.lang.String str77 = rook72.toString();
        a1.ChessPiece.Color color78 = rook72.getColor();
        a1.Pawn pawn79 = new a1.Pawn(chessBoard1, color78);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Knight knight84 = new a1.Knight(chessBoard80, color82);
        a1.Knight knight85 = new a1.Knight(chessBoard1, color82);
        a1.Knight knight86 = new a1.Knight(chessBoard0, color82);
        a1.ChessPiece.Color color87 = knight86.getColor();
        java.util.ArrayList<java.lang.String> strList88 = knight86.legalMoves();
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u265f" + "'", str40, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u265f" + "'", str46, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265c" + "'", str76, "\u265c");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265c" + "'", str77, "\u265c");
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList88);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece38 = chessBoard0.getPiece("a1.IllegalMoveException: a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        java.lang.String str24 = pawn20.getPosition();
        boolean boolean26 = chessBoard0.placePiece((a1.ChessPiece) pawn20, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard27 = null;
        a1.ChessPiece.Color color28 = null;
        a1.Pawn pawn29 = new a1.Pawn(chessBoard27, color28);
        java.lang.String str30 = pawn29.toString();
        java.util.ArrayList<java.lang.String> strList31 = pawn29.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = pawn29.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = pawn29.legalMoves();
        java.lang.String str34 = pawn29.toString();
        java.util.ArrayList<java.lang.String> strList35 = pawn29.legalMoves();
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn29, "\u265d");
        java.lang.String str38 = pawn29.toString();
        java.lang.String str39 = pawn29.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u265f" + "'", str30, "\u265f");
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265f" + "'", str34, "\u265f");
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard18, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Pawn pawn30 = new a1.Pawn(chessBoard18, color28);
        a1.Pawn pawn31 = new a1.Pawn(chessBoard15, color28);
        a1.ChessPiece.Color color32 = pawn31.getColor();
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        boolean boolean40 = chessBoard35.placePiece((a1.ChessPiece) rook38, "\u265f");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard48, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Bishop bishop56 = new a1.Bishop(chessBoard48, color54);
        a1.Knight knight57 = new a1.Knight(chessBoard41, color54);
        a1.Knight knight58 = new a1.Knight(chessBoard35, color54);
        a1.King king59 = new a1.King(chessBoard34, color54);
        java.lang.String str60 = king59.toString();
        java.util.ArrayList<java.lang.String> strList61 = king59.legalMoves();
        java.lang.String str62 = king59.toString();
        a1.ChessPiece.Color color63 = king59.getColor();
        a1.Bishop bishop64 = new a1.Bishop(chessBoard0, color63);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265a" + "'", str60, "\u265a");
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265a" + "'", str62, "\u265a");
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Knight knight38 = new a1.Knight(chessBoard22, color35);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = null;
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard40, color41);
        java.lang.String str43 = pawn42.toString();
        boolean boolean45 = chessBoard39.placePiece((a1.ChessPiece) pawn42, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Pawn pawn58 = new a1.Pawn(chessBoard46, color56);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard39, color56);
        a1.King king60 = new a1.King(chessBoard22, color56);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard0, color56);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.King king74 = new a1.King(chessBoard62, color71);
        a1.Rook rook75 = new a1.Rook(chessBoard0, color71);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessBoard chessBoard77 = null;
        a1.ChessPiece.Color color78 = null;
        a1.Pawn pawn79 = new a1.Pawn(chessBoard77, color78);
        java.lang.String str80 = pawn79.toString();
        boolean boolean82 = chessBoard76.placePiece((a1.ChessPiece) pawn79, "");
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Knight knight87 = new a1.Knight(chessBoard83, color85);
        a1.ChessBoard chessBoard88 = new a1.ChessBoard();
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook90 = new a1.Rook(chessBoard88, color89);
        a1.Bishop bishop91 = new a1.Bishop(chessBoard83, color89);
        a1.ChessBoard chessBoard92 = new a1.ChessBoard();
        a1.ChessPiece.Color color93 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook94 = new a1.Rook(chessBoard92, color93);
        a1.Pawn pawn95 = new a1.Pawn(chessBoard83, color93);
        a1.Bishop bishop96 = new a1.Bishop(chessBoard76, color93);
        java.util.ArrayList<java.lang.String> strList97 = bishop96.legalMoves();
        a1.ChessPiece.Color color98 = bishop96.getColor();
        a1.King king99 = new a1.King(chessBoard0, color98);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265f" + "'", str43, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u265f" + "'", str80, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color93 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color93.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList97);
        org.junit.Assert.assertTrue("'" + color98 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color98.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.util.ArrayList<java.lang.String> strList18 = king12.legalMoves();
        java.lang.String str19 = king12.toString();
        java.util.ArrayList<java.lang.String> strList20 = king12.legalMoves();
        java.lang.Class<?> wildcardClass21 = strList20.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265a" + "'", str19, "\u265a");
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException13);
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalPositionException15);
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable[] throwableArray24 = illegalMoveException23.getSuppressed();
        illegalPositionException15.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("a1.IllegalMoveException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException15);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalPositionException15);
        java.lang.String str28 = illegalPositionException27.toString();
        org.junit.Assert.assertNotNull(throwableArray24);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265e" + "'", str28, "\u265e");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265a", throwable10);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        java.lang.Throwable[] throwableArray19 = illegalMoveException18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = illegalMoveException18.getSuppressed();
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException18);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = null;
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = null;
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        java.lang.String str8 = pawn7.toString();
        boolean boolean10 = chessBoard4.placePiece((a1.ChessPiece) pawn7, "");
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Knight knight20 = new a1.Knight(chessBoard4, color17);
        a1.Knight knight21 = new a1.Knight(chessBoard3, color17);
        a1.Pawn pawn22 = new a1.Pawn(chessBoard0, color17);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece26 = chessBoard0.getPiece("a1.IllegalMoveException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = illegalMoveException2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException2.getSuppressed();
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException10);
        illegalMoveException2.addSuppressed((java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException2.getSuppressed();
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException22);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException22);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException22);
        illegalMoveException2.addSuppressed((java.lang.Throwable) illegalMoveException25);
        java.lang.String str27 = illegalMoveException25.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray14);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265a" + "'", str27, "\u265a");
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.util.ArrayList<java.lang.String> strList15 = pawn9.legalMoves();
        java.lang.String str16 = pawn9.toString();
        java.lang.String str17 = pawn9.toString();
        java.lang.String str18 = pawn9.toString();
        java.lang.String str19 = pawn9.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265f" + "'", str16, "\u265f");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException13.getSuppressed();
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        illegalMoveException13.addSuppressed((java.lang.Throwable) illegalMoveException23);
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException26);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException27);
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException27);
        java.lang.Throwable[] throwableArray30 = illegalMoveException29.getSuppressed();
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException37);
        java.lang.Throwable throwable41 = null;
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("hi!", throwable41);
        a1.IllegalPositionException illegalPositionException43 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException42);
        illegalMoveException38.addSuppressed((java.lang.Throwable) illegalPositionException43);
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException43);
        illegalMoveException29.addSuppressed((java.lang.Throwable) illegalMoveException45);
        java.lang.Throwable throwable53 = null;
        a1.IllegalMoveException illegalMoveException54 = new a1.IllegalMoveException("hi!", throwable53);
        a1.IllegalPositionException illegalPositionException55 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException54);
        a1.IllegalMoveException illegalMoveException56 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException54);
        a1.IllegalPositionException illegalPositionException57 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException54);
        a1.IllegalMoveException illegalMoveException58 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException57);
        a1.IllegalMoveException illegalMoveException59 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException58);
        illegalMoveException45.addSuppressed((java.lang.Throwable) illegalMoveException58);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.lang.String str9 = pawn3.toString();
        java.lang.String str10 = pawn3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.lang.String str38 = pawn37.toString();
        boolean boolean40 = chessBoard34.placePiece((a1.ChessPiece) pawn37, "");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard41, color51);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard34, color51);
        java.util.ArrayList<java.lang.String> strList55 = bishop54.legalMoves();
        a1.ChessPiece.Color color56 = bishop54.getColor();
        a1.Knight knight57 = new a1.Knight(chessBoard17, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard0, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard62, color72);
        a1.Pawn pawn75 = new a1.Pawn(chessBoard59, color72);
        a1.King king76 = new a1.King(chessBoard0, color72);
        java.lang.String str77 = king76.toString();
        java.lang.String str78 = king76.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265a" + "'", str77, "\u265a");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265a" + "'", str78, "\u265a");
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException11);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException3.getSuppressed();
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        java.util.ArrayList<java.lang.String> strList6 = rook5.legalMoves();
        java.lang.String str7 = rook5.toString();
        java.util.ArrayList<java.lang.String> strList8 = rook5.legalMoves();
        java.lang.String str9 = rook5.toString();
        boolean boolean11 = chessBoard0.placePiece((a1.ChessPiece) rook5, "\u265c");
        java.lang.String str12 = rook5.getPosition();
        java.util.ArrayList<java.lang.String> strList13 = rook5.legalMoves();
        org.junit.Assert.assertTrue("'" + color4 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color4.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = null;
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard40, color41);
        java.lang.String str43 = pawn42.toString();
        boolean boolean45 = chessBoard39.placePiece((a1.ChessPiece) pawn42, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.Knight knight55 = new a1.Knight(chessBoard39, color52);
        a1.Rook rook56 = new a1.Rook(chessBoard30, color52);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard0, color52);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece59 = chessBoard0.getPiece("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265f" + "'", str43, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.Rook rook24 = new a1.Rook(chessBoard12, color21);
        a1.Pawn pawn25 = new a1.Pawn(chessBoard9, color21);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = null;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Knight knight54 = new a1.Knight(chessBoard50, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard50, color56);
        a1.Rook rook59 = new a1.Rook(chessBoard47, color56);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard34, color56);
        a1.Rook rook61 = new a1.Rook(chessBoard29, color56);
        a1.Rook rook62 = new a1.Rook(chessBoard26, color56);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = null;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard66, color72);
        a1.Rook rook75 = new a1.Rook(chessBoard63, color72);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = null;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard79, color85);
        a1.Rook rook88 = new a1.Rook(chessBoard76, color85);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard63, color85);
        a1.Knight knight90 = new a1.Knight(chessBoard26, color85);
        a1.Rook rook91 = new a1.Rook(chessBoard9, color85);
        a1.Rook rook92 = new a1.Rook(chessBoard0, color85);
        java.util.ArrayList<java.lang.String> strList93 = rook92.legalMoves();
        java.lang.String str94 = rook92.toString();
        java.util.ArrayList<java.lang.String> strList95 = rook92.legalMoves();
        java.lang.String str96 = rook92.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\u265c" + "'", str94, "\u265c");
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "\u265c" + "'", str96, "\u265c");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        chessBoard0.initialize();
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard19, color21);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Pawn pawn31 = new a1.Pawn(chessBoard19, color29);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard16, color29);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        java.lang.String str40 = pawn36.getPosition();
        boolean boolean42 = chessBoard16.placePiece((a1.ChessPiece) pawn36, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Pawn pawn55 = new a1.Pawn(chessBoard43, color53);
        java.lang.String str56 = pawn55.getPosition();
        a1.ChessPiece.Color color57 = pawn55.getColor();
        a1.Rook rook58 = new a1.Rook(chessBoard16, color57);
        a1.ChessBoard chessBoard59 = null;
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = null;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard63, color69);
        a1.Rook rook72 = new a1.Rook(chessBoard60, color69);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = null;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Knight knight80 = new a1.Knight(chessBoard76, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard76, color82);
        a1.Rook rook85 = new a1.Rook(chessBoard73, color82);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard60, color82);
        a1.King king87 = new a1.King(chessBoard59, color82);
        a1.King king88 = new a1.King(chessBoard16, color82);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard0, color82);
        java.lang.String str90 = bishop89.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u265d" + "'", str90, "\u265d");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException7.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList35 = pawn34.legalMoves();
        java.util.ArrayList<java.lang.String> strList36 = pawn34.legalMoves();
        java.util.ArrayList<java.lang.String> strList37 = pawn34.legalMoves();
        java.lang.String str38 = pawn34.toString();
        java.lang.String str39 = pawn34.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        a1.ChessPiece.Color color63 = king60.getColor();
        java.lang.String str64 = king60.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265a" + "'", str64, "\u265a");
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        java.lang.String str73 = rook72.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265c" + "'", str73, "\u265c");
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable throwable26 = null;
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("hi!", throwable26);
        a1.IllegalPositionException illegalPositionException28 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException27);
        illegalMoveException21.addSuppressed((java.lang.Throwable) illegalMoveException27);
        a1.IllegalPositionException illegalPositionException30 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException27);
        java.lang.Throwable[] throwableArray31 = illegalMoveException27.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException27.getSuppressed();
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException27);
        java.lang.Throwable throwable42 = null;
        a1.IllegalMoveException illegalMoveException43 = new a1.IllegalMoveException("hi!", throwable42);
        a1.IllegalPositionException illegalPositionException44 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException43);
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException43);
        a1.IllegalPositionException illegalPositionException46 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException43);
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException46);
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException47);
        a1.IllegalPositionException illegalPositionException49 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalPositionException48);
        java.lang.Throwable throwable53 = null;
        a1.IllegalMoveException illegalMoveException54 = new a1.IllegalMoveException("hi!", throwable53);
        a1.IllegalPositionException illegalPositionException55 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException54);
        a1.IllegalMoveException illegalMoveException56 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException54);
        java.lang.Throwable[] throwableArray57 = illegalMoveException56.getSuppressed();
        illegalPositionException48.addSuppressed((java.lang.Throwable) illegalMoveException56);
        a1.IllegalPositionException illegalPositionException59 = new a1.IllegalPositionException("a1.IllegalMoveException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException48);
        illegalPositionException33.addSuppressed((java.lang.Throwable) illegalPositionException59);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray57);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Bishop bishop14 = new a1.Bishop(chessBoard6, color12);
        a1.Rook rook15 = new a1.Rook(chessBoard3, color12);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color12);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        java.lang.String str14 = pawn9.getPosition();
        java.util.ArrayList<java.lang.String> strList15 = pawn9.legalMoves();
        java.util.ArrayList<java.lang.String> strList16 = pawn9.legalMoves();
        java.lang.String str17 = pawn9.toString();
        java.lang.String str18 = pawn9.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        java.lang.String str33 = pawn31.toString();
        boolean boolean35 = chessBoard22.placePiece((a1.ChessPiece) pawn31, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        boolean boolean41 = chessBoard36.placePiece((a1.ChessPiece) rook39, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard36.placePiece((a1.ChessPiece) knight50, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        a1.King king74 = new a1.King(chessBoard36, color70);
        a1.King king75 = new a1.King(chessBoard22, color70);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color70);
        java.lang.String str77 = knight76.toString();
        java.util.ArrayList<java.lang.String> strList78 = knight76.legalMoves();
        java.util.ArrayList<java.lang.String> strList79 = knight76.legalMoves();
        java.util.ArrayList<java.lang.String> strList80 = knight76.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265e" + "'", str77, "\u265e");
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(strList80);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = null;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        java.lang.String str74 = rook73.toString();
        java.lang.String str75 = rook73.getPosition();
        java.util.ArrayList<java.lang.String> strList76 = rook73.legalMoves();
        java.util.ArrayList<java.lang.String> strList77 = rook73.legalMoves();
        java.util.ArrayList<java.lang.String> strList78 = rook73.legalMoves();
        java.lang.String str79 = rook73.toString();
        boolean boolean81 = chessBoard0.placePiece((a1.ChessPiece) rook73, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece83 = chessBoard0.getPiece("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265c" + "'", str74, "\u265c");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265c" + "'", str79, "\u265c");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.Rook rook68 = new a1.Rook(chessBoard0, color65);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = null;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        java.util.ArrayList<java.lang.String> strList72 = rook71.legalMoves();
        java.util.ArrayList<java.lang.String> strList73 = rook71.legalMoves();
        boolean boolean75 = chessBoard0.placePiece((a1.ChessPiece) rook71, "\u265e");
        java.lang.String str76 = rook71.toString();
        java.util.ArrayList<java.lang.String> strList77 = rook71.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            rook71.setPosition("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265c" + "'", str76, "\u265c");
        org.junit.Assert.assertNotNull(strList77);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard35, color57);
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard35, color62);
        a1.Rook rook64 = new a1.Rook(chessBoard0, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = null;
        a1.ChessPiece.Color color67 = null;
        a1.Pawn pawn68 = new a1.Pawn(chessBoard66, color67);
        java.lang.String str69 = pawn68.toString();
        boolean boolean71 = chessBoard65.placePiece((a1.ChessPiece) pawn68, "");
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard72, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Pawn pawn84 = new a1.Pawn(chessBoard72, color82);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard65, color82);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard0, color82);
        java.lang.String str87 = pawn86.toString();
        java.lang.String str88 = pawn86.toString();
        java.lang.String str89 = pawn86.toString();
        java.util.ArrayList<java.lang.String> strList90 = pawn86.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265f" + "'", str69, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u265f" + "'", str87, "\u265f");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u265f" + "'", str88, "\u265f");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u265f" + "'", str89, "\u265f");
        org.junit.Assert.assertNotNull(strList90);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException13);
        illegalMoveException6.addSuppressed((java.lang.Throwable) illegalPositionException13);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException16);
        a1.IllegalPositionException illegalPositionException18 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException17);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException9);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        java.lang.String str7 = rook3.toString();
        java.util.ArrayList<java.lang.String> strList8 = rook3.legalMoves();
        java.lang.String str9 = rook3.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = null;
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard2, color3);
        java.lang.String str5 = pawn4.toString();
        boolean boolean7 = chessBoard1.placePiece((a1.ChessPiece) pawn4, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Knight knight17 = new a1.Knight(chessBoard1, color14);
        a1.Knight knight18 = new a1.Knight(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList19 = knight18.legalMoves();
        java.lang.String str20 = knight18.toString();
        java.util.ArrayList<java.lang.String> strList21 = knight18.legalMoves();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265e" + "'", str20, "\u265e");
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Pawn pawn66 = new a1.Pawn(chessBoard54, color64);
        a1.Knight knight67 = new a1.Knight(chessBoard0, color64);
        java.util.ArrayList<java.lang.String> strList68 = knight67.legalMoves();
        java.util.ArrayList<java.lang.String> strList69 = knight67.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(strList69);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.util.ArrayList<java.lang.String> strList18 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList21 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = king12.legalMoves();
        java.lang.String str23 = king12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265a" + "'", str23, "\u265a");
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        java.util.ArrayList<java.lang.String> strList14 = pawn9.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = pawn9.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException10);
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265a", throwable14);
        java.lang.Throwable[] throwableArray17 = illegalMoveException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = illegalMoveException16.getSuppressed();
        illegalPositionException10.addSuppressed((java.lang.Throwable) illegalMoveException16);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException10);
        java.lang.Throwable[] throwableArray21 = illegalPositionException10.getSuppressed();
        java.lang.Throwable throwable28 = null;
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("hi!", throwable28);
        a1.IllegalPositionException illegalPositionException30 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException29);
        a1.IllegalMoveException illegalMoveException31 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException30);
        a1.IllegalPositionException illegalPositionException32 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException30);
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException30);
        java.lang.Throwable[] throwableArray34 = illegalMoveException33.getSuppressed();
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException33);
        illegalPositionException10.addSuppressed((java.lang.Throwable) illegalMoveException33);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        java.lang.String str6 = rook5.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        java.lang.String str8 = rook5.toString();
        java.lang.String str9 = rook5.toString();
        a1.ChessPiece.Color color10 = rook5.getColor();
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = null;
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard13, color19);
        a1.Knight knight22 = new a1.Knight(chessBoard12, color19);
        java.util.ArrayList<java.lang.String> strList23 = knight22.legalMoves();
        a1.ChessPiece.Color color24 = knight22.getColor();
        a1.Rook rook25 = new a1.Rook(chessBoard0, color24);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.King king38 = new a1.King(chessBoard26, color35);
        a1.Knight knight39 = new a1.Knight(chessBoard0, color35);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = null;
        a1.ChessPiece.Color color42 = null;
        a1.Pawn pawn43 = new a1.Pawn(chessBoard41, color42);
        java.lang.String str44 = pawn43.toString();
        boolean boolean46 = chessBoard40.placePiece((a1.ChessPiece) pawn43, "");
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.Knight knight56 = new a1.Knight(chessBoard40, color53);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = null;
        a1.ChessPiece.Color color59 = null;
        a1.Pawn pawn60 = new a1.Pawn(chessBoard58, color59);
        java.lang.String str61 = pawn60.toString();
        boolean boolean63 = chessBoard57.placePiece((a1.ChessPiece) pawn60, "");
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Knight knight68 = new a1.Knight(chessBoard64, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard64, color70);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Pawn pawn76 = new a1.Pawn(chessBoard64, color74);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard57, color74);
        a1.King king78 = new a1.King(chessBoard40, color74);
        a1.Knight knight79 = new a1.Knight(chessBoard0, color74);
        org.junit.Assert.assertTrue("'" + color4 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color4.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265f" + "'", str61, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        chessBoard13.initialize();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard36, color38);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Bishop bishop44 = new a1.Bishop(chessBoard36, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard36, color46);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard33, color46);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard13, color46);
        a1.Knight knight51 = new a1.Knight(chessBoard8, color46);
        a1.King king52 = new a1.King(chessBoard0, color46);
        java.lang.String str53 = king52.toString();
        java.util.ArrayList<java.lang.String> strList54 = king52.legalMoves();
        java.lang.String str55 = king52.toString();
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265a" + "'", str53, "\u265a");
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265a" + "'", str55, "\u265a");
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Knight knight54 = new a1.Knight(chessBoard50, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = null;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.Rook rook67 = new a1.Rook(chessBoard55, color64);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = null;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Knight knight75 = new a1.Knight(chessBoard71, color73);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard71, color77);
        a1.Rook rook80 = new a1.Rook(chessBoard68, color77);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard55, color77);
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn83 = new a1.Pawn(chessBoard55, color82);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard50, color82);
        java.util.ArrayList<java.lang.String> strList85 = bishop84.legalMoves();
        java.lang.String str86 = bishop84.toString();
        a1.ChessPiece.Color color87 = bishop84.getColor();
        a1.King king88 = new a1.King(chessBoard0, color87);
        java.lang.String str89 = king88.toString();
        java.util.ArrayList<java.lang.String> strList90 = king88.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u265d" + "'", str86, "\u265d");
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u265a" + "'", str89, "\u265a");
        org.junit.Assert.assertNotNull(strList90);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard11, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard11.placePiece((a1.ChessPiece) knight30, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard33, color39);
        boolean boolean43 = chessBoard11.placePiece((a1.ChessPiece) knight41, "\u265e");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.lang.String str48 = pawn47.toString();
        boolean boolean50 = chessBoard44.placePiece((a1.ChessPiece) pawn47, "");
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Knight knight60 = new a1.Knight(chessBoard44, color57);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = null;
        a1.ChessPiece.Color color63 = null;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard62, color63);
        java.lang.String str65 = pawn64.toString();
        boolean boolean67 = chessBoard61.placePiece((a1.ChessPiece) pawn64, "");
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Knight knight72 = new a1.Knight(chessBoard68, color70);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Bishop bishop76 = new a1.Bishop(chessBoard68, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Pawn pawn80 = new a1.Pawn(chessBoard68, color78);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard61, color78);
        a1.King king82 = new a1.King(chessBoard44, color78);
        a1.Rook rook83 = new a1.Rook(chessBoard11, color78);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Knight knight88 = new a1.Knight(chessBoard84, color86);
        a1.ChessBoard chessBoard89 = new a1.ChessBoard();
        a1.ChessPiece.Color color90 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook91 = new a1.Rook(chessBoard89, color90);
        a1.Knight knight92 = new a1.Knight(chessBoard84, color90);
        a1.Knight knight93 = new a1.Knight(chessBoard11, color90);
        a1.Rook rook94 = new a1.Rook(chessBoard0, color90);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalMoveException: ", "\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265f" + "'", str48, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265f" + "'", str65, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        java.util.ArrayList<java.lang.String> strList35 = bishop34.legalMoves();
        java.lang.String str36 = bishop34.toString();
        java.lang.String str37 = bishop34.toString();
        java.util.ArrayList<java.lang.String> strList38 = bishop34.legalMoves();
        java.util.ArrayList<java.lang.String> strList39 = bishop34.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265d" + "'", str37, "\u265d");
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strList39);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.Knight knight29 = new a1.Knight(chessBoard13, color26);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.Bishop bishop35 = new a1.Bishop(chessBoard13, color32);
        java.lang.String str36 = bishop35.toString();
        a1.ChessPiece.Color color37 = bishop35.getColor();
        boolean boolean39 = chessBoard0.placePiece((a1.ChessPiece) bishop35, "\u265c");
        a1.ChessPiece.Color color40 = bishop35.getColor();
        java.util.ArrayList<java.lang.String> strList41 = bishop35.legalMoves();
        java.util.ArrayList<java.lang.String> strList42 = bishop35.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece chessPiece19 = null;
        boolean boolean21 = chessBoard0.placePiece(chessPiece19, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.King king34 = new a1.King(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.util.ArrayList<java.lang.String> strList38 = pawn37.legalMoves();
        boolean boolean40 = chessBoard22.placePiece((a1.ChessPiece) pawn37, "\u265e");
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard22, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = null;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Knight knight68 = new a1.Knight(chessBoard64, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard64, color70);
        a1.Rook rook73 = new a1.Rook(chessBoard61, color70);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard48, color70);
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn76 = new a1.Pawn(chessBoard48, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard43, color75);
        java.util.ArrayList<java.lang.String> strList78 = bishop77.legalMoves();
        java.lang.String str79 = bishop77.toString();
        a1.ChessPiece.Color color80 = bishop77.getColor();
        a1.Pawn pawn81 = new a1.Pawn(chessBoard22, color80);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        java.util.ArrayList<java.lang.String> strList86 = rook85.legalMoves();
        java.lang.String str87 = rook85.toString();
        java.util.ArrayList<java.lang.String> strList88 = rook85.legalMoves();
        boolean boolean90 = chessBoard0.placePiece((a1.ChessPiece) rook85, "\u265d");
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265d" + "'", str79, "\u265d");
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u265c" + "'", str87, "\u265c");
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.lang.Throwable throwable1 = null;
        a1.IllegalPositionException illegalPositionException2 = new a1.IllegalPositionException("\u265c", throwable1);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.Rook rook29 = new a1.Rook(chessBoard17, color26);
        a1.King king30 = new a1.King(chessBoard0, color26);
        java.lang.String str31 = king30.toString();
        java.lang.String str32 = king30.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u265a" + "'", str31, "\u265a");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265a" + "'", str32, "\u265a");
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265a", throwable11);
        java.lang.Throwable[] throwableArray14 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException13.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        java.lang.Throwable[] throwableArray21 = illegalMoveException20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = illegalMoveException20.getSuppressed();
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException20);
        java.lang.Throwable[] throwableArray24 = illegalPositionException23.getSuppressed();
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException23);
        illegalMoveException13.addSuppressed((java.lang.Throwable) illegalPositionException23);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalPositionException23);
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException39);
        a1.IllegalPositionException illegalPositionException41 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException40);
        a1.IllegalPositionException illegalPositionException42 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalPositionException41);
        java.lang.Throwable throwable46 = null;
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("hi!", throwable46);
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException47);
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException47);
        java.lang.Throwable[] throwableArray50 = illegalMoveException49.getSuppressed();
        illegalPositionException41.addSuppressed((java.lang.Throwable) illegalMoveException49);
        illegalPositionException23.addSuppressed((java.lang.Throwable) illegalPositionException41);
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException23);
        java.lang.Throwable[] throwableArray54 = illegalPositionException23.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        java.lang.String str39 = king38.toString();
        java.lang.String str40 = king38.toString();
        java.util.ArrayList<java.lang.String> strList41 = king38.legalMoves();
        java.lang.String str42 = king38.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265a" + "'", str39, "\u265a");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u265a" + "'", str40, "\u265a");
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265a" + "'", str42, "\u265a");
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard23, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Pawn pawn35 = new a1.Pawn(chessBoard23, color33);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard20, color33);
        a1.Pawn pawn37 = new a1.Pawn(chessBoard0, color33);
        java.lang.String str38 = pawn37.getPosition();
        java.lang.String str39 = pawn37.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException12);
        a1.IllegalPositionException illegalPositionException14 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException13);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = null;
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        java.lang.String str22 = pawn21.toString();
        boolean boolean24 = chessBoard18.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        java.lang.String str29 = pawn27.toString();
        boolean boolean31 = chessBoard18.placePiece((a1.ChessPiece) pawn27, "\u265f");
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        boolean boolean37 = chessBoard32.placePiece((a1.ChessPiece) rook35, "\u265f");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard38, color44);
        boolean boolean48 = chessBoard32.placePiece((a1.ChessPiece) knight46, "");
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard56, color66);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard49, color66);
        a1.King king70 = new a1.King(chessBoard32, color66);
        a1.King king71 = new a1.King(chessBoard18, color66);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = null;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Knight knight79 = new a1.Knight(chessBoard75, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard75, color81);
        a1.King king84 = new a1.King(chessBoard72, color81);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard18, color81);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard0, color81);
        java.util.ArrayList<java.lang.String> strList87 = bishop86.legalMoves();
        java.lang.String str88 = bishop86.toString();
        java.util.ArrayList<java.lang.String> strList89 = bishop86.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u265f" + "'", str29, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u265d" + "'", str88, "\u265d");
        org.junit.Assert.assertNotNull(strList89);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException5);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.King king44 = new a1.King(chessBoard32, color41);
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.util.ArrayList<java.lang.String> strList48 = pawn47.legalMoves();
        boolean boolean50 = chessBoard32.placePiece((a1.ChessPiece) pawn47, "\u265e");
        chessBoard32.initialize();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard52, color65);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard32, color65);
        a1.Knight knight70 = new a1.Knight(chessBoard27, color65);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color65);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = null;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        java.util.ArrayList<java.lang.String> strList75 = rook74.legalMoves();
        java.lang.String str76 = rook74.toString();
        java.lang.String str77 = rook74.toString();
        java.util.ArrayList<java.lang.String> strList78 = rook74.legalMoves();
        boolean boolean80 = chessBoard0.placePiece((a1.ChessPiece) rook74, "\u265e");
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265c" + "'", str76, "\u265c");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265c" + "'", str77, "\u265c");
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str21 = bishop20.toString();
        java.lang.String str22 = bishop20.toString();
        java.lang.String str23 = bishop20.toString();
        java.util.ArrayList<java.lang.String> strList24 = bishop20.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265d" + "'", str21, "\u265d");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265d" + "'", str22, "\u265d");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265d" + "'", str23, "\u265d");
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException13.getSuppressed();
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        illegalMoveException13.addSuppressed((java.lang.Throwable) illegalMoveException23);
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException26);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalPositionException26);
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalPositionException26);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        boolean boolean10 = chessBoard0.placePiece((a1.ChessPiece) rook6, "\u265e");
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.Rook rook31 = new a1.Rook(chessBoard19, color28);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.Rook rook44 = new a1.Rook(chessBoard32, color41);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard19, color41);
        a1.Rook rook46 = new a1.Rook(chessBoard14, color41);
        a1.Rook rook47 = new a1.Rook(chessBoard11, color41);
        chessBoard11.initialize();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        boolean boolean54 = chessBoard49.placePiece((a1.ChessPiece) rook52, "\u265f");
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Knight knight63 = new a1.Knight(chessBoard55, color61);
        boolean boolean65 = chessBoard49.placePiece((a1.ChessPiece) knight63, "");
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = null;
        a1.ChessPiece.Color color68 = null;
        a1.Pawn pawn69 = new a1.Pawn(chessBoard67, color68);
        java.lang.String str70 = pawn69.toString();
        boolean boolean72 = chessBoard66.placePiece((a1.ChessPiece) pawn69, "");
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Pawn pawn85 = new a1.Pawn(chessBoard73, color83);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard66, color83);
        a1.King king87 = new a1.King(chessBoard49, color83);
        a1.Knight knight88 = new a1.Knight(chessBoard11, color83);
        a1.Knight knight89 = new a1.Knight(chessBoard0, color83);
        java.util.ArrayList<java.lang.String> strList90 = knight89.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265f" + "'", str70, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList90);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.lang.String str9 = pawn3.toString();
        java.lang.String str10 = pawn3.toString();
        java.util.ArrayList<java.lang.String> strList11 = pawn3.legalMoves();
        a1.ChessPiece.Color color12 = pawn3.getColor();
        java.lang.String str13 = pawn3.toString();
        java.lang.String str14 = pawn3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(color12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265f" + "'", str14, "\u265f");
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        java.util.ArrayList<java.lang.String> strList34 = pawn33.legalMoves();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) pawn33, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        a1.IllegalPositionException illegalPositionException14 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException14);
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalPositionException14);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray19 = illegalMoveException18.getSuppressed();
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("a1.IllegalMoveException: a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException18);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException13);
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalPositionException15);
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable[] throwableArray24 = illegalMoveException23.getSuppressed();
        illegalPositionException15.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("a1.IllegalMoveException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException15);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalPositionException15);
        java.lang.Throwable[] throwableArray28 = illegalPositionException15.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str21 = bishop20.toString();
        java.util.ArrayList<java.lang.String> strList22 = bishop20.legalMoves();
        java.lang.Class<?> wildcardClass23 = strList22.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265d" + "'", str21, "\u265d");
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard48 = null;
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard48, color62);
        a1.King king67 = new a1.King(chessBoard0, color62);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        boolean boolean73 = chessBoard68.placePiece((a1.ChessPiece) rook71, "\u265f");
        java.util.ArrayList<java.lang.String> strList74 = rook71.legalMoves();
        java.lang.String str75 = rook71.toString();
        java.lang.String str76 = rook71.toString();
        a1.ChessPiece.Color color77 = rook71.getColor();
        a1.Pawn pawn78 = new a1.Pawn(chessBoard0, color77);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        a1.Knight knight84 = new a1.Knight(chessBoard0, color81);
        // The following exception was thrown during execution in test generation
        try {
            knight84.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u265c" + "'", str75, "\u265c");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265c" + "'", str76, "\u265c");
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.lang.String str4 = rook2.getPosition();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.lang.String str7 = rook2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.King king34 = new a1.King(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.util.ArrayList<java.lang.String> strList38 = pawn37.legalMoves();
        boolean boolean40 = chessBoard22.placePiece((a1.ChessPiece) pawn37, "\u265e");
        chessBoard22.initialize();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Pawn pawn58 = new a1.Pawn(chessBoard42, color55);
        a1.Pawn pawn59 = new a1.Pawn(chessBoard22, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard17, color55);
        java.lang.String str61 = knight60.getPosition();
        java.lang.String str62 = knight60.toString();
        a1.ChessPiece.Color color63 = knight60.getColor();
        a1.Bishop bishop64 = new a1.Bishop(chessBoard0, color63);
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265e" + "'", str62, "\u265e");
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: hi!", "a1.IllegalMoveException: a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        a1.IllegalPositionException illegalPositionException4 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException10);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalPositionException10);
        java.lang.Throwable throwable14 = null;
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("\u265c", throwable14);
        illegalPositionException10.addSuppressed((java.lang.Throwable) illegalPositionException15);
        java.lang.String str17 = illegalPositionException10.toString();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "a1.IllegalPositionException: hi!" + "'", str17, "a1.IllegalPositionException: hi!");
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessPiece.Color color48 = null;
        a1.Bishop bishop49 = new a1.Bishop(chessBoard39, color48);
        java.lang.String str50 = bishop49.toString();
        java.lang.String str51 = bishop49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) bishop49, "\u265c");
        java.util.ArrayList<java.lang.String> strList54 = bishop49.legalMoves();
        java.lang.String str55 = bishop49.toString();
        java.util.ArrayList<java.lang.String> strList56 = bishop49.legalMoves();
        java.lang.String str57 = bishop49.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265d" + "'", str50, "\u265d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265d" + "'", str51, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265d" + "'", str55, "\u265d");
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265d" + "'", str57, "\u265d");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = null;
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Bishop bishop21 = new a1.Bishop(chessBoard13, color19);
        a1.Rook rook22 = new a1.Rook(chessBoard10, color19);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = null;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard26, color32);
        a1.Rook rook35 = new a1.Rook(chessBoard23, color32);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard10, color32);
        a1.King king37 = new a1.King(chessBoard9, color32);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = null;
        a1.ChessPiece.Color color53 = null;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard52, color53);
        java.lang.String str55 = pawn54.toString();
        boolean boolean57 = chessBoard51.placePiece((a1.ChessPiece) pawn54, "");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.Knight knight67 = new a1.Knight(chessBoard51, color64);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Knight knight72 = new a1.Knight(chessBoard68, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard51, color70);
        a1.Knight knight74 = new a1.Knight(chessBoard42, color70);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard39, color70);
        a1.King king76 = new a1.King(chessBoard0, color70);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265f" + "'", str55, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        java.lang.String str35 = rook34.toString();
        java.lang.String str36 = rook34.toString();
        java.util.ArrayList<java.lang.String> strList37 = rook34.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265c" + "'", str35, "\u265c");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265c" + "'", str36, "\u265c");
        org.junit.Assert.assertNotNull(strList37);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str21 = bishop20.toString();
        java.util.ArrayList<java.lang.String> strList22 = bishop20.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            bishop20.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265d" + "'", str21, "\u265d");
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Rook rook38 = new a1.Rook(chessBoard26, color35);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.Rook rook51 = new a1.Rook(chessBoard39, color48);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard26, color48);
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard26, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard21, color53);
        java.util.ArrayList<java.lang.String> strList56 = bishop55.legalMoves();
        java.lang.String str57 = bishop55.toString();
        a1.ChessPiece.Color color58 = bishop55.getColor();
        a1.Pawn pawn59 = new a1.Pawn(chessBoard0, color58);
        java.lang.String str60 = pawn59.getPosition();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265d" + "'", str57, "\u265d");
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.Rook rook29 = new a1.Rook(chessBoard17, color26);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = null;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard33, color39);
        a1.Rook rook42 = new a1.Rook(chessBoard30, color39);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard17, color39);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = null;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.King king61 = new a1.King(chessBoard49, color58);
        a1.ChessBoard chessBoard62 = null;
        a1.ChessPiece.Color color63 = null;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard62, color63);
        java.util.ArrayList<java.lang.String> strList65 = pawn64.legalMoves();
        boolean boolean67 = chessBoard49.placePiece((a1.ChessPiece) pawn64, "\u265e");
        chessBoard49.initialize();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard72, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Pawn pawn84 = new a1.Pawn(chessBoard72, color82);
        a1.Pawn pawn85 = new a1.Pawn(chessBoard69, color82);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard49, color82);
        a1.Knight knight87 = new a1.Knight(chessBoard44, color82);
        a1.Rook rook88 = new a1.Rook(chessBoard17, color82);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard0, color82);
        java.lang.String str90 = bishop89.toString();
        java.lang.Class<?> wildcardClass91 = bishop89.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u265d" + "'", str90, "\u265d");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard18, color24);
        a1.King king27 = new a1.King(chessBoard15, color24);
        a1.ChessBoard chessBoard28 = null;
        a1.ChessPiece.Color color29 = null;
        a1.Pawn pawn30 = new a1.Pawn(chessBoard28, color29);
        java.util.ArrayList<java.lang.String> strList31 = pawn30.legalMoves();
        boolean boolean33 = chessBoard15.placePiece((a1.ChessPiece) pawn30, "\u265e");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Bishop bishop42 = new a1.Bishop(chessBoard34, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Pawn pawn46 = new a1.Pawn(chessBoard34, color44);
        java.lang.String str47 = pawn46.getPosition();
        a1.ChessPiece.Color color48 = pawn46.getColor();
        a1.Pawn pawn49 = new a1.Pawn(chessBoard15, color48);
        a1.Rook rook50 = new a1.Rook(chessBoard0, color48);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = null;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard72, color78);
        a1.Rook rook81 = new a1.Rook(chessBoard69, color78);
        a1.King king82 = new a1.King(chessBoard52, color78);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard0, color78);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException12);
        illegalMoveException5.addSuppressed((java.lang.Throwable) illegalPositionException12);
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        java.lang.Throwable[] throwableArray19 = illegalMoveException18.getSuppressed();
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        java.lang.Throwable[] throwableArray23 = illegalMoveException22.getSuppressed();
        illegalMoveException18.addSuppressed((java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException18);
        illegalPositionException12.addSuppressed((java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException12);
        java.lang.Throwable[] throwableArray28 = illegalPositionException12.getSuppressed();
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException6);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalMoveException12);
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException12);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.util.ArrayList<java.lang.String> strList15 = pawn9.legalMoves();
        java.util.ArrayList<java.lang.String> strList16 = pawn9.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            pawn9.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        a1.ChessPiece.Color color35 = null;
        a1.Bishop bishop36 = new a1.Bishop(chessBoard0, color35);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard35, color57);
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard35, color62);
        a1.Rook rook64 = new a1.Rook(chessBoard0, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = null;
        a1.ChessPiece.Color color67 = null;
        a1.Pawn pawn68 = new a1.Pawn(chessBoard66, color67);
        java.lang.String str69 = pawn68.toString();
        boolean boolean71 = chessBoard65.placePiece((a1.ChessPiece) pawn68, "");
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard72, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Pawn pawn84 = new a1.Pawn(chessBoard72, color82);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard65, color82);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard0, color82);
        java.util.ArrayList<java.lang.String> strList87 = pawn86.legalMoves();
        java.lang.String str88 = pawn86.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265f" + "'", str69, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u265f" + "'", str88, "\u265f");
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        chessBoard13.initialize();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard36, color38);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Bishop bishop44 = new a1.Bishop(chessBoard36, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard36, color46);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard33, color46);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard13, color46);
        a1.Knight knight51 = new a1.Knight(chessBoard8, color46);
        a1.King king52 = new a1.King(chessBoard0, color46);
        java.lang.String str53 = king52.toString();
        java.lang.Class<?> wildcardClass54 = king52.getClass();
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265a" + "'", str53, "\u265a");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Knight knight9 = new a1.Knight(chessBoard1, color7);
        a1.Knight knight10 = new a1.Knight(chessBoard0, color7);
        java.lang.String str11 = knight10.toString();
        java.util.ArrayList<java.lang.String> strList12 = knight10.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = knight10.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265e" + "'", str11, "\u265e");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.lang.String str6 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList7 = knight4.legalMoves();
        java.lang.String str8 = knight4.toString();
        java.lang.String str9 = knight4.getPosition();
        java.lang.String str10 = knight4.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265e" + "'", str6, "\u265e");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265e" + "'", str10, "\u265e");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = null;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Rook rook70 = new a1.Rook(chessBoard58, color67);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = null;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.Rook rook83 = new a1.Rook(chessBoard71, color80);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard58, color80);
        a1.Rook rook85 = new a1.Rook(chessBoard53, color80);
        a1.Rook rook86 = new a1.Rook(chessBoard50, color80);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard0, color80);
        java.lang.String str88 = pawn87.toString();
        java.util.ArrayList<java.lang.String> strList89 = pawn87.legalMoves();
        java.util.ArrayList<java.lang.String> strList90 = pawn87.legalMoves();
        java.util.ArrayList<java.lang.String> strList91 = pawn87.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u265f" + "'", str88, "\u265f");
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strList91);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessPiece.Color color48 = null;
        a1.Bishop bishop49 = new a1.Bishop(chessBoard39, color48);
        java.lang.String str50 = bishop49.toString();
        java.lang.String str51 = bishop49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) bishop49, "\u265c");
        java.util.ArrayList<java.lang.String> strList54 = bishop49.legalMoves();
        java.lang.String str55 = bishop49.toString();
        java.util.ArrayList<java.lang.String> strList56 = bishop49.legalMoves();
        java.util.ArrayList<java.lang.String> strList57 = bishop49.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265d" + "'", str50, "\u265d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265d" + "'", str51, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265d" + "'", str55, "\u265d");
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList57);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("", "\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        a1.ChessPiece.Color color74 = null;
        a1.Pawn pawn75 = new a1.Pawn(chessBoard0, color74);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Knight knight80 = new a1.Knight(chessBoard76, color78);
        java.lang.String str81 = knight80.toString();
        java.lang.String str82 = knight80.toString();
        java.lang.String str83 = knight80.toString();
        java.lang.String str84 = knight80.toString();
        java.lang.String str85 = knight80.getPosition();
        java.util.ArrayList<java.lang.String> strList86 = knight80.legalMoves();
        boolean boolean88 = chessBoard0.placePiece((a1.ChessPiece) knight80, "\u265c");
        java.util.ArrayList<java.lang.String> strList89 = knight80.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265e" + "'", str81, "\u265e");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u265e" + "'", str82, "\u265e");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265e" + "'", str83, "\u265e");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265e" + "'", str84, "\u265e");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strList89);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        a1.IllegalPositionException illegalPositionException14 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException13);
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException20);
        illegalMoveException13.addSuppressed((java.lang.Throwable) illegalPositionException20);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException13);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException13);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = null;
        a1.ChessPiece.Color color29 = null;
        a1.Pawn pawn30 = new a1.Pawn(chessBoard28, color29);
        java.lang.String str31 = pawn30.toString();
        boolean boolean33 = chessBoard27.placePiece((a1.ChessPiece) pawn30, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Bishop bishop42 = new a1.Bishop(chessBoard34, color40);
        a1.Knight knight43 = new a1.Knight(chessBoard27, color40);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard27, color46);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard0, color46);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u265f" + "'", str31, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        java.util.ArrayList<java.lang.String> strList22 = pawn21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = pawn21.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable throwable15 = null;
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("hi!", throwable15);
        java.lang.Throwable[] throwableArray17 = illegalMoveException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = illegalMoveException16.getSuppressed();
        java.lang.Throwable[] throwableArray19 = illegalMoveException16.getSuppressed();
        java.lang.Throwable throwable23 = null;
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("hi!", throwable23);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException24);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException24);
        illegalMoveException16.addSuppressed((java.lang.Throwable) illegalMoveException26);
        illegalMoveException13.addSuppressed((java.lang.Throwable) illegalMoveException16);
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable[] throwableArray7 = illegalPositionException6.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException12);
        illegalPositionException6.addSuppressed((java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray16 = illegalMoveException12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        a1.ChessPiece.Color color7 = pawn2.getColor();
        java.lang.String str8 = pawn2.toString();
        java.lang.String str9 = pawn2.getPosition();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(color7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Bishop bishop39 = new a1.Bishop(chessBoard31, color37);
        a1.King king40 = new a1.King(chessBoard28, color37);
        a1.ChessBoard chessBoard41 = null;
        a1.ChessPiece.Color color42 = null;
        a1.Pawn pawn43 = new a1.Pawn(chessBoard41, color42);
        java.util.ArrayList<java.lang.String> strList44 = pawn43.legalMoves();
        boolean boolean46 = chessBoard28.placePiece((a1.ChessPiece) pawn43, "\u265e");
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Pawn pawn59 = new a1.Pawn(chessBoard47, color57);
        java.lang.String str60 = pawn59.getPosition();
        a1.ChessPiece.Color color61 = pawn59.getColor();
        a1.Pawn pawn62 = new a1.Pawn(chessBoard28, color61);
        a1.King king63 = new a1.King(chessBoard0, color61);
        a1.ChessPiece.Color color64 = king63.getColor();
        java.lang.String str65 = king63.getPosition();
        java.util.ArrayList<java.lang.String> strList66 = king63.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(strList66);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        java.util.ArrayList<java.lang.String> strList35 = bishop34.legalMoves();
        java.lang.String str36 = bishop34.toString();
        a1.ChessPiece.Color color37 = bishop34.getColor();
        java.lang.String str38 = bishop34.toString();
        java.lang.String str39 = bishop34.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265d" + "'", str38, "\u265d");
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        java.lang.String str17 = knight14.toString();
        java.util.ArrayList<java.lang.String> strList18 = knight14.legalMoves();
        java.lang.String str19 = knight14.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265e" + "'", str17, "\u265e");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265e" + "'", str19, "\u265e");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException9);
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException14.getSuppressed();
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException22);
        illegalMoveException14.addSuppressed((java.lang.Throwable) illegalMoveException24);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException24);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException24);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException27);
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException28);
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("\u265a", throwable32);
        java.lang.Throwable[] throwableArray35 = illegalMoveException34.getSuppressed();
        java.lang.Throwable[] throwableArray36 = illegalMoveException34.getSuppressed();
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = illegalMoveException41.getSuppressed();
        a1.IllegalPositionException illegalPositionException44 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException41);
        java.lang.Throwable[] throwableArray45 = illegalPositionException44.getSuppressed();
        a1.IllegalMoveException illegalMoveException46 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException44);
        illegalMoveException34.addSuppressed((java.lang.Throwable) illegalPositionException44);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException34);
        a1.IllegalPositionException illegalPositionException49 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException34);
        java.lang.Throwable[] throwableArray50 = illegalMoveException34.getSuppressed();
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException34);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        a1.IllegalPositionException illegalPositionException29 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException28);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalMoveException28);
        a1.IllegalPositionException illegalPositionException31 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException28);
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException28);
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException28);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException13.getSuppressed();
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        illegalMoveException13.addSuppressed((java.lang.Throwable) illegalMoveException23);
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException10);
        java.lang.Throwable throwable29 = null;
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("hi!", throwable29);
        java.lang.Throwable[] throwableArray31 = illegalMoveException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = illegalMoveException30.getSuppressed();
        java.lang.Throwable throwable37 = null;
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("hi!", throwable37);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException38);
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException38);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException30.getSuppressed();
        java.lang.Throwable throwable48 = null;
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("hi!", throwable48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException49);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException50);
        a1.IllegalPositionException illegalPositionException52 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException50);
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException50);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException53);
        illegalPositionException27.addSuppressed((java.lang.Throwable) illegalMoveException53);
        java.lang.Throwable throwable58 = null;
        a1.IllegalMoveException illegalMoveException59 = new a1.IllegalMoveException("hi!", throwable58);
        a1.IllegalPositionException illegalPositionException60 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException59);
        java.lang.Throwable throwable64 = null;
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("hi!", throwable64);
        a1.IllegalPositionException illegalPositionException66 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException65);
        a1.IllegalMoveException illegalMoveException67 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException66);
        illegalMoveException59.addSuppressed((java.lang.Throwable) illegalPositionException66);
        java.lang.Throwable throwable71 = null;
        a1.IllegalMoveException illegalMoveException72 = new a1.IllegalMoveException("hi!", throwable71);
        java.lang.Throwable[] throwableArray73 = illegalMoveException72.getSuppressed();
        java.lang.Throwable throwable75 = null;
        a1.IllegalMoveException illegalMoveException76 = new a1.IllegalMoveException("hi!", throwable75);
        java.lang.Throwable[] throwableArray77 = illegalMoveException76.getSuppressed();
        illegalMoveException72.addSuppressed((java.lang.Throwable) illegalMoveException76);
        a1.IllegalMoveException illegalMoveException79 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException72);
        illegalPositionException66.addSuppressed((java.lang.Throwable) illegalMoveException72);
        illegalMoveException53.addSuppressed((java.lang.Throwable) illegalPositionException66);
        a1.IllegalMoveException illegalMoveException82 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException66);
        a1.IllegalMoveException illegalMoveException83 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException82);
        java.lang.Class<?> wildcardClass84 = illegalMoveException82.getClass();
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        java.util.ArrayList<java.lang.String> strList8 = rook7.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook7.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = rook7.legalMoves();
        java.lang.String str11 = rook7.getPosition();
        java.lang.String str12 = rook7.toString();
        boolean boolean14 = chessBoard0.placePiece((a1.ChessPiece) rook7, "");
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        boolean boolean20 = chessBoard15.placePiece((a1.ChessPiece) rook18, "\u265f");
        java.util.ArrayList<java.lang.String> strList21 = rook18.legalMoves();
        java.lang.String str22 = rook18.toString();
        java.lang.String str23 = rook18.toString();
        a1.ChessPiece.Color color24 = rook18.getColor();
        a1.King king25 = new a1.King(chessBoard0, color24);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Rook rook38 = new a1.Rook(chessBoard26, color35);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.Rook rook51 = new a1.Rook(chessBoard39, color48);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard26, color48);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = null;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.King king70 = new a1.King(chessBoard58, color67);
        a1.ChessBoard chessBoard71 = null;
        a1.ChessPiece.Color color72 = null;
        a1.Pawn pawn73 = new a1.Pawn(chessBoard71, color72);
        java.util.ArrayList<java.lang.String> strList74 = pawn73.legalMoves();
        boolean boolean76 = chessBoard58.placePiece((a1.ChessPiece) pawn73, "\u265e");
        chessBoard58.initialize();
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Knight knight85 = new a1.Knight(chessBoard81, color83);
        a1.ChessBoard chessBoard86 = new a1.ChessBoard();
        a1.ChessPiece.Color color87 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook88 = new a1.Rook(chessBoard86, color87);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard81, color87);
        a1.ChessBoard chessBoard90 = new a1.ChessBoard();
        a1.ChessPiece.Color color91 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook92 = new a1.Rook(chessBoard90, color91);
        a1.Pawn pawn93 = new a1.Pawn(chessBoard81, color91);
        a1.Pawn pawn94 = new a1.Pawn(chessBoard78, color91);
        a1.Pawn pawn95 = new a1.Pawn(chessBoard58, color91);
        a1.Knight knight96 = new a1.Knight(chessBoard53, color91);
        a1.Rook rook97 = new a1.Rook(chessBoard26, color91);
        a1.Pawn pawn98 = new a1.Pawn(chessBoard0, color91);
        java.lang.String str99 = pawn98.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265c" + "'", str12, "\u265c");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265c" + "'", str22, "\u265c");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265c" + "'", str23, "\u265c");
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color91 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color91.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "\u265f" + "'", str99, "\u265f");
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException15);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException15);
        a1.IllegalPositionException illegalPositionException18 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException17);
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        java.lang.Throwable[] throwableArray22 = illegalMoveException21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = illegalMoveException21.getSuppressed();
        java.lang.Throwable[] throwableArray24 = illegalMoveException21.getSuppressed();
        illegalPositionException18.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalPositionException18);
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalPositionException18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessPiece.Color color82 = null;
        a1.Bishop bishop83 = new a1.Bishop(chessBoard73, color82);
        java.lang.String str84 = bishop83.toString();
        java.lang.String str85 = bishop83.toString();
        java.util.ArrayList<java.lang.String> strList86 = bishop83.legalMoves();
        boolean boolean88 = chessBoard0.placePiece((a1.ChessPiece) bishop83, "a1.IllegalPositionException: ");
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.WHITE;
        a1.Knight knight90 = new a1.Knight(chessBoard0, color89);
        a1.ChessBoard chessBoard91 = new a1.ChessBoard();
        a1.ChessBoard chessBoard92 = new a1.ChessBoard();
        a1.ChessPiece.Color color93 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook94 = new a1.Rook(chessBoard92, color93);
        a1.Knight knight95 = new a1.Knight(chessBoard91, color93);
        a1.King king96 = new a1.King(chessBoard0, color93);
        java.util.ArrayList<java.lang.String> strList97 = king96.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265d" + "'", str84, "\u265d");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265d" + "'", str85, "\u265d");
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.WHITE + "'", color89.equals(a1.ChessPiece.Color.WHITE));
        org.junit.Assert.assertTrue("'" + color93 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color93.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList97);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.util.ArrayList<java.lang.String> strList15 = pawn9.legalMoves();
        java.lang.String str16 = pawn9.toString();
        java.lang.String str17 = pawn9.toString();
        java.lang.String str18 = pawn9.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265f" + "'", str16, "\u265f");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        java.util.ArrayList<java.lang.String> strList7 = rook4.legalMoves();
        java.lang.String str8 = rook4.toString();
        java.lang.String str9 = rook4.toString();
        a1.ChessPiece.Color color10 = rook4.getColor();
        a1.Rook rook11 = new a1.Rook(chessBoard0, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.lang.String str6 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessPiece.Color color33 = knight30.getColor();
        java.lang.String str34 = knight30.toString();
        java.lang.String str35 = knight30.toString();
        java.lang.String str36 = knight30.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265e" + "'", str34, "\u265e");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265e" + "'", str35, "\u265e");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265e" + "'", str36, "\u265e");
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        java.lang.String str26 = king25.toString();
        java.util.ArrayList<java.lang.String> strList27 = king25.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265a" + "'", str26, "\u265a");
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        java.lang.String str54 = king53.toString();
        java.lang.String str55 = king53.toString();
        java.util.ArrayList<java.lang.String> strList56 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList57 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList58 = king53.legalMoves();
        java.lang.String str59 = king53.toString();
        java.util.ArrayList<java.lang.String> strList60 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList61 = king53.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265a" + "'", str55, "\u265a");
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265a" + "'", str59, "\u265a");
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(strList61);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        boolean boolean30 = chessBoard24.placePiece((a1.ChessPiece) pawn27, "");
        java.lang.String str31 = pawn27.getPosition();
        boolean boolean33 = chessBoard0.placePiece((a1.ChessPiece) pawn27, "\u265c");
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece36 = chessBoard0.getPiece("a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.lang.String str18 = king12.toString();
        java.lang.String str19 = king12.toString();
        a1.ChessPiece.Color color20 = king12.getColor();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265a" + "'", str18, "\u265a");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265a" + "'", str19, "\u265a");
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        chessBoard6.initialize();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        java.util.ArrayList<java.lang.String> strList13 = rook12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook12.legalMoves();
        boolean boolean16 = chessBoard6.placePiece((a1.ChessPiece) rook12, "\u265e");
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard6, color17);
        a1.ChessBoard chessBoard19 = null;
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        a1.Knight knight29 = new a1.Knight(chessBoard19, color26);
        java.util.ArrayList<java.lang.String> strList30 = knight29.legalMoves();
        a1.ChessPiece.Color color31 = knight29.getColor();
        a1.Knight knight32 = new a1.Knight(chessBoard6, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color31);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        java.lang.String str46 = pawn44.toString();
        boolean boolean48 = chessBoard35.placePiece((a1.ChessPiece) pawn44, "\u265f");
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        boolean boolean54 = chessBoard49.placePiece((a1.ChessPiece) rook52, "\u265f");
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Knight knight63 = new a1.Knight(chessBoard55, color61);
        boolean boolean65 = chessBoard49.placePiece((a1.ChessPiece) knight63, "");
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = null;
        a1.ChessPiece.Color color68 = null;
        a1.Pawn pawn69 = new a1.Pawn(chessBoard67, color68);
        java.lang.String str70 = pawn69.toString();
        boolean boolean72 = chessBoard66.placePiece((a1.ChessPiece) pawn69, "");
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Pawn pawn85 = new a1.Pawn(chessBoard73, color83);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard66, color83);
        a1.King king87 = new a1.King(chessBoard49, color83);
        a1.King king88 = new a1.King(chessBoard35, color83);
        java.lang.String str89 = king88.toString();
        java.util.ArrayList<java.lang.String> strList90 = king88.legalMoves();
        java.util.ArrayList<java.lang.String> strList91 = king88.legalMoves();
        a1.ChessPiece.Color color92 = king88.getColor();
        a1.ChessPiece.Color color93 = king88.getColor();
        a1.Pawn pawn94 = new a1.Pawn(chessBoard0, color93);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u265f" + "'", str46, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265f" + "'", str70, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u265a" + "'", str89, "\u265a");
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertTrue("'" + color92 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color92.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color93 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color93.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessPiece.Color color82 = null;
        a1.Bishop bishop83 = new a1.Bishop(chessBoard73, color82);
        java.lang.String str84 = bishop83.toString();
        java.lang.String str85 = bishop83.toString();
        java.util.ArrayList<java.lang.String> strList86 = bishop83.legalMoves();
        boolean boolean88 = chessBoard0.placePiece((a1.ChessPiece) bishop83, "a1.IllegalPositionException: ");
        java.util.ArrayList<java.lang.String> strList89 = bishop83.legalMoves();
        java.lang.Class<?> wildcardClass90 = bishop83.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265d" + "'", str84, "\u265d");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265d" + "'", str85, "\u265d");
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.Knight knight29 = new a1.Knight(chessBoard13, color26);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.Bishop bishop35 = new a1.Bishop(chessBoard13, color32);
        java.lang.String str36 = bishop35.toString();
        a1.ChessPiece.Color color37 = bishop35.getColor();
        boolean boolean39 = chessBoard0.placePiece((a1.ChessPiece) bishop35, "\u265c");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = null;
        a1.ChessPiece.Color color42 = null;
        a1.Pawn pawn43 = new a1.Pawn(chessBoard41, color42);
        java.lang.String str44 = pawn43.toString();
        boolean boolean46 = chessBoard40.placePiece((a1.ChessPiece) pawn43, "");
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Pawn pawn59 = new a1.Pawn(chessBoard47, color57);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard40, color57);
        java.util.ArrayList<java.lang.String> strList61 = bishop60.legalMoves();
        java.util.ArrayList<java.lang.String> strList62 = bishop60.legalMoves();
        java.lang.String str63 = bishop60.getPosition();
        java.lang.String str64 = bishop60.toString();
        java.lang.String str65 = bishop60.getPosition();
        java.lang.String str66 = bishop60.toString();
        boolean boolean68 = chessBoard0.placePiece((a1.ChessPiece) bishop60, "a1.IllegalMoveException: a1.IllegalMoveException: hi!");
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265d" + "'", str64, "\u265d");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u265d" + "'", str66, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException8);
        java.lang.Throwable[] throwableArray12 = illegalPositionException8.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException22);
        java.lang.Throwable throwable26 = null;
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("hi!", throwable26);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("\u265a", throwable26);
        java.lang.Throwable[] throwableArray29 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = illegalMoveException28.getSuppressed();
        illegalPositionException22.addSuppressed((java.lang.Throwable) illegalMoveException28);
        illegalPositionException8.addSuppressed((java.lang.Throwable) illegalPositionException22);
        java.lang.Throwable throwable36 = null;
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("hi!", throwable36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265a", throwable36);
        java.lang.Throwable[] throwableArray39 = illegalMoveException38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = illegalMoveException38.getSuppressed();
        java.lang.Throwable throwable44 = null;
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("hi!", throwable44);
        java.lang.Throwable[] throwableArray46 = illegalMoveException45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = illegalMoveException45.getSuppressed();
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException45);
        java.lang.Throwable[] throwableArray49 = illegalPositionException48.getSuppressed();
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException48);
        illegalMoveException38.addSuppressed((java.lang.Throwable) illegalPositionException48);
        a1.IllegalPositionException illegalPositionException52 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException38);
        illegalPositionException8.addSuppressed((java.lang.Throwable) illegalMoveException38);
        a1.IllegalPositionException illegalPositionException54 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException38);
        java.lang.String str55 = illegalMoveException38.toString();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265a" + "'", str55, "\u265a");
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        java.lang.Throwable[] throwableArray11 = illegalMoveException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = illegalMoveException10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException10.getSuppressed();
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException18);
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException20);
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        java.lang.String str61 = knight60.toString();
        java.util.ArrayList<java.lang.String> strList62 = knight60.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
        org.junit.Assert.assertNotNull(strList62);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight27 = new a1.Knight(chessBoard9, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        boolean boolean34 = chessBoard28.placePiece((a1.ChessPiece) pawn31, "");
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.lang.String str38 = pawn37.toString();
        java.lang.String str39 = pawn37.toString();
        boolean boolean41 = chessBoard28.placePiece((a1.ChessPiece) pawn37, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        boolean boolean47 = chessBoard42.placePiece((a1.ChessPiece) rook45, "\u265f");
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard48, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard48, color54);
        boolean boolean58 = chessBoard42.placePiece((a1.ChessPiece) knight56, "");
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessBoard chessBoard60 = null;
        a1.ChessPiece.Color color61 = null;
        a1.Pawn pawn62 = new a1.Pawn(chessBoard60, color61);
        java.lang.String str63 = pawn62.toString();
        boolean boolean65 = chessBoard59.placePiece((a1.ChessPiece) pawn62, "");
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard66, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Pawn pawn78 = new a1.Pawn(chessBoard66, color76);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard59, color76);
        a1.King king80 = new a1.King(chessBoard42, color76);
        a1.King king81 = new a1.King(chessBoard28, color76);
        java.lang.String str82 = king81.toString();
        java.util.ArrayList<java.lang.String> strList83 = king81.legalMoves();
        java.util.ArrayList<java.lang.String> strList84 = king81.legalMoves();
        a1.ChessPiece.Color color85 = king81.getColor();
        a1.Knight knight86 = new a1.Knight(chessBoard9, color85);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard0, color85);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265f" + "'", str63, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u265a" + "'", str82, "\u265a");
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        java.lang.String str71 = king70.toString();
        java.util.ArrayList<java.lang.String> strList72 = king70.legalMoves();
        java.lang.String str73 = king70.toString();
        java.lang.String str74 = king70.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u265a" + "'", str71, "\u265a");
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265a" + "'", str73, "\u265a");
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessBoard chessBoard20 = null;
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        java.lang.String str23 = pawn22.toString();
        java.lang.String str24 = pawn22.toString();
        boolean boolean26 = chessBoard13.placePiece((a1.ChessPiece) pawn22, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        boolean boolean32 = chessBoard27.placePiece((a1.ChessPiece) rook30, "\u265f");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard33, color39);
        boolean boolean43 = chessBoard27.placePiece((a1.ChessPiece) knight41, "");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.lang.String str48 = pawn47.toString();
        boolean boolean50 = chessBoard44.placePiece((a1.ChessPiece) pawn47, "");
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Pawn pawn63 = new a1.Pawn(chessBoard51, color61);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard44, color61);
        a1.King king65 = new a1.King(chessBoard27, color61);
        a1.King king66 = new a1.King(chessBoard13, color61);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.King king79 = new a1.King(chessBoard67, color76);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard13, color76);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard0, color76);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece83 = chessBoard0.getPiece("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265f" + "'", str23, "\u265f");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265f" + "'", str24, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265f" + "'", str48, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard18, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Pawn pawn30 = new a1.Pawn(chessBoard18, color28);
        a1.Pawn pawn31 = new a1.Pawn(chessBoard15, color28);
        a1.ChessPiece.Color color32 = pawn31.getColor();
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.King king51 = new a1.King(chessBoard39, color48);
        a1.ChessBoard chessBoard52 = null;
        a1.ChessPiece.Color color53 = null;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard52, color53);
        java.util.ArrayList<java.lang.String> strList55 = pawn54.legalMoves();
        boolean boolean57 = chessBoard39.placePiece((a1.ChessPiece) pawn54, "\u265e");
        chessBoard39.initialize();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard62, color72);
        a1.Pawn pawn75 = new a1.Pawn(chessBoard59, color72);
        a1.Pawn pawn76 = new a1.Pawn(chessBoard39, color72);
        a1.Knight knight77 = new a1.Knight(chessBoard34, color72);
        java.lang.String str78 = knight77.getPosition();
        java.lang.String str79 = knight77.toString();
        a1.ChessPiece.Color color80 = knight77.getColor();
        a1.ChessPiece.Color color81 = knight77.getColor();
        a1.Pawn pawn82 = new a1.Pawn(chessBoard0, color81);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265e" + "'", str79, "\u265e");
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Rook rook69 = new a1.Rook(chessBoard57, color66);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard54, color66);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color66);
        java.lang.String str72 = rook71.toString();
        java.lang.String str73 = rook71.toString();
        java.util.ArrayList<java.lang.String> strList74 = rook71.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265c" + "'", str72, "\u265c");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265c" + "'", str73, "\u265c");
        org.junit.Assert.assertNotNull(strList74);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Pawn pawn28 = new a1.Pawn(chessBoard16, color26);
        a1.Pawn pawn29 = new a1.Pawn(chessBoard13, color26);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = null;
        a1.ChessPiece.Color color32 = null;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard31, color32);
        java.lang.String str34 = pawn33.toString();
        boolean boolean36 = chessBoard30.placePiece((a1.ChessPiece) pawn33, "");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard30, color47);
        java.util.ArrayList<java.lang.String> strList51 = bishop50.legalMoves();
        a1.ChessPiece.Color color52 = bishop50.getColor();
        a1.Knight knight53 = new a1.Knight(chessBoard13, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard0, color52);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265f" + "'", str34, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = rook2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: hi!", "\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard9, color28);
        a1.Knight knight32 = new a1.Knight(chessBoard0, color28);
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color33);
        java.lang.String str35 = pawn34.toString();
        java.lang.String str36 = pawn34.toString();
        java.lang.String str37 = pawn34.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265f" + "'", str36, "\u265f");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        java.util.ArrayList<java.lang.String> strList20 = pawn16.legalMoves();
        a1.ChessPiece.Color color21 = pawn16.getColor();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) pawn16, "\u265e");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Bishop bishop35 = new a1.Bishop(chessBoard27, color33);
        a1.King king36 = new a1.King(chessBoard24, color33);
        a1.ChessBoard chessBoard37 = null;
        a1.ChessPiece.Color color38 = null;
        a1.Pawn pawn39 = new a1.Pawn(chessBoard37, color38);
        java.util.ArrayList<java.lang.String> strList40 = pawn39.legalMoves();
        boolean boolean42 = chessBoard24.placePiece((a1.ChessPiece) pawn39, "\u265e");
        chessBoard24.initialize();
        a1.ChessPiece.Color color44 = null;
        a1.Pawn pawn45 = new a1.Pawn(chessBoard24, color44);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = null;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.Rook rook71 = new a1.Rook(chessBoard59, color68);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard46, color68);
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn74 = new a1.Pawn(chessBoard46, color73);
        a1.Pawn pawn75 = new a1.Pawn(chessBoard24, color73);
        java.util.ArrayList<java.lang.String> strList76 = pawn75.legalMoves();
        java.lang.String str77 = pawn75.toString();
        boolean boolean79 = chessBoard0.placePiece((a1.ChessPiece) pawn75, "a1.IllegalMoveException: ");
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessBoard chessBoard81 = null;
        a1.ChessPiece.Color color82 = null;
        a1.Pawn pawn83 = new a1.Pawn(chessBoard81, color82);
        java.util.ArrayList<java.lang.String> strList84 = pawn83.legalMoves();
        java.util.ArrayList<java.lang.String> strList85 = pawn83.legalMoves();
        boolean boolean87 = chessBoard80.placePiece((a1.ChessPiece) pawn83, "\u265d");
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.WHITE;
        a1.Knight knight89 = new a1.Knight(chessBoard80, color88);
        a1.Bishop bishop90 = new a1.Bishop(chessBoard0, color88);
        java.util.ArrayList<java.lang.String> strList91 = bishop90.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(color21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265f" + "'", str77, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.WHITE + "'", color88.equals(a1.ChessPiece.Color.WHITE));
        org.junit.Assert.assertNotNull(strList91);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException14);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable[] throwableArray18 = illegalPositionException17.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        a1.ChessPiece.Color color74 = null;
        a1.Pawn pawn75 = new a1.Pawn(chessBoard0, color74);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Knight knight80 = new a1.Knight(chessBoard76, color78);
        java.lang.String str81 = knight80.toString();
        java.lang.String str82 = knight80.toString();
        java.lang.String str83 = knight80.toString();
        java.lang.String str84 = knight80.toString();
        java.lang.String str85 = knight80.getPosition();
        java.util.ArrayList<java.lang.String> strList86 = knight80.legalMoves();
        boolean boolean88 = chessBoard0.placePiece((a1.ChessPiece) knight80, "\u265c");
        chessBoard0.initialize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265e" + "'", str81, "\u265e");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u265e" + "'", str82, "\u265e");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265e" + "'", str83, "\u265e");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265e" + "'", str84, "\u265e");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList35 = pawn34.legalMoves();
        java.util.ArrayList<java.lang.String> strList36 = pawn34.legalMoves();
        java.util.ArrayList<java.lang.String> strList37 = pawn34.legalMoves();
        java.lang.String str38 = pawn34.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.Rook rook31 = new a1.Rook(chessBoard19, color28);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.Rook rook44 = new a1.Rook(chessBoard32, color41);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard19, color41);
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard19, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard14, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard0, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = null;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Rook rook70 = new a1.Rook(chessBoard58, color67);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = null;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.Rook rook83 = new a1.Rook(chessBoard71, color80);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard58, color80);
        a1.Rook rook85 = new a1.Rook(chessBoard53, color80);
        a1.Rook rook86 = new a1.Rook(chessBoard50, color80);
        a1.ChessPiece.Color color87 = rook86.getColor();
        a1.King king88 = new a1.King(chessBoard0, color87);
        java.lang.String str89 = king88.getPosition();
        java.lang.String str90 = king88.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u265a" + "'", str90, "\u265a");
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.util.ArrayList<java.lang.String> strList15 = pawn9.legalMoves();
        java.lang.String str16 = pawn9.toString();
        java.lang.String str17 = pawn9.toString();
        java.lang.String str18 = pawn9.toString();
        java.lang.String str19 = pawn9.toString();
        java.lang.String str20 = pawn9.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265f" + "'", str16, "\u265f");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265f" + "'", str19, "\u265f");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265f" + "'", str20, "\u265f");
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = null;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.King king56 = new a1.King(chessBoard44, color53);
        a1.ChessBoard chessBoard57 = null;
        a1.ChessPiece.Color color58 = null;
        a1.Pawn pawn59 = new a1.Pawn(chessBoard57, color58);
        java.util.ArrayList<java.lang.String> strList60 = pawn59.legalMoves();
        boolean boolean62 = chessBoard44.placePiece((a1.ChessPiece) pawn59, "\u265e");
        chessBoard44.initialize();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard67, color69);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard67, color73);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Pawn pawn79 = new a1.Pawn(chessBoard67, color77);
        a1.Pawn pawn80 = new a1.Pawn(chessBoard64, color77);
        a1.Pawn pawn81 = new a1.Pawn(chessBoard44, color77);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color77);
        java.lang.String str83 = rook82.toString();
        a1.ChessPiece.Color color84 = rook82.getColor();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        chessBoard13.initialize();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard36, color38);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Bishop bishop44 = new a1.Bishop(chessBoard36, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard36, color46);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard33, color46);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard13, color46);
        a1.Knight knight51 = new a1.Knight(chessBoard8, color46);
        a1.King king52 = new a1.King(chessBoard0, color46);
        java.lang.String str53 = king52.toString();
        a1.ChessPiece.Color color54 = king52.getColor();
        java.lang.String str55 = king52.toString();
        java.lang.String str56 = king52.toString();
        java.lang.String str57 = king52.getPosition();
        java.lang.String str58 = king52.toString();
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265a" + "'", str53, "\u265a");
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265a" + "'", str55, "\u265a");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265a" + "'", str56, "\u265a");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265a" + "'", str58, "\u265a");
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable[] throwableArray10 = illegalMoveException8.getSuppressed();
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Class<?> wildcardClass13 = throwableArray12.getClass();
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        java.util.ArrayList<java.lang.String> strList26 = king25.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessPiece.Color color82 = null;
        a1.Bishop bishop83 = new a1.Bishop(chessBoard73, color82);
        java.lang.String str84 = bishop83.toString();
        java.lang.String str85 = bishop83.toString();
        java.util.ArrayList<java.lang.String> strList86 = bishop83.legalMoves();
        boolean boolean88 = chessBoard0.placePiece((a1.ChessPiece) bishop83, "a1.IllegalPositionException: ");
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.WHITE;
        a1.Knight knight90 = new a1.Knight(chessBoard0, color89);
        java.lang.String str91 = knight90.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265d" + "'", str84, "\u265d");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265d" + "'", str85, "\u265d");
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.WHITE + "'", color89.equals(a1.ChessPiece.Color.WHITE));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u2658" + "'", str91, "\u2658");
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.Knight knight29 = new a1.Knight(chessBoard13, color26);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.Bishop bishop35 = new a1.Bishop(chessBoard13, color32);
        java.lang.String str36 = bishop35.toString();
        a1.ChessPiece.Color color37 = bishop35.getColor();
        boolean boolean39 = chessBoard0.placePiece((a1.ChessPiece) bishop35, "\u265c");
        java.util.ArrayList<java.lang.String> strList40 = bishop35.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strList40);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        chessBoard6.initialize();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        java.util.ArrayList<java.lang.String> strList13 = rook12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook12.legalMoves();
        boolean boolean16 = chessBoard6.placePiece((a1.ChessPiece) rook12, "\u265e");
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard6, color17);
        a1.ChessBoard chessBoard19 = null;
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        a1.Knight knight29 = new a1.Knight(chessBoard19, color26);
        java.util.ArrayList<java.lang.String> strList30 = knight29.legalMoves();
        a1.ChessPiece.Color color31 = knight29.getColor();
        a1.Knight knight32 = new a1.Knight(chessBoard6, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color31);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265a", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList37 = rook36.legalMoves();
        a1.ChessPiece.Color color38 = rook36.getColor();
        java.util.ArrayList<java.lang.String> strList39 = rook36.legalMoves();
        java.lang.String str40 = rook36.toString();
        java.lang.String str41 = rook36.toString();
        java.lang.String str42 = rook36.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u265c" + "'", str40, "\u265c");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265c" + "'", str41, "\u265c");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265c" + "'", str42, "\u265c");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.lang.String str16 = king12.getPosition();
        java.lang.String str17 = king12.toString();
        java.lang.String str18 = king12.getPosition();
        java.lang.String str19 = king12.toString();
        java.lang.String str20 = king12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265a" + "'", str19, "\u265a");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265a" + "'", str20, "\u265a");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = null;
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard2, color3);
        java.lang.String str5 = pawn4.toString();
        boolean boolean7 = chessBoard1.placePiece((a1.ChessPiece) pawn4, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Pawn pawn20 = new a1.Pawn(chessBoard8, color18);
        a1.Bishop bishop21 = new a1.Bishop(chessBoard1, color18);
        java.util.ArrayList<java.lang.String> strList22 = bishop21.legalMoves();
        a1.ChessPiece.Color color23 = bishop21.getColor();
        a1.Knight knight24 = new a1.Knight(chessBoard0, color23);
        a1.ChessPiece.Color color25 = knight24.getColor();
        // The following exception was thrown during execution in test generation
        try {
            knight24.setPosition("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.King king66 = new a1.King(chessBoard54, color63);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard0, color63);
        a1.ChessPiece.Color color68 = bishop67.getColor();
        java.lang.String str69 = bishop67.getPosition();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.util.ArrayList<java.lang.String> strList18 = king12.legalMoves();
        java.lang.String str19 = king12.toString();
        java.lang.String str20 = king12.getPosition();
        java.lang.String str21 = king12.toString();
        java.util.ArrayList<java.lang.String> strList22 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265a" + "'", str19, "\u265a");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265a" + "'", str21, "\u265a");
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        java.lang.String str41 = rook40.toString();
        java.util.ArrayList<java.lang.String> strList42 = rook40.legalMoves();
        java.lang.String str43 = rook40.toString();
        java.lang.String str44 = rook40.toString();
        a1.ChessPiece.Color color45 = rook40.getColor();
        a1.Bishop bishop46 = new a1.Bishop(chessBoard35, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard0, color45);
        java.util.ArrayList<java.lang.String> strList48 = bishop47.legalMoves();
        java.util.ArrayList<java.lang.String> strList49 = bishop47.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265c" + "'", str41, "\u265c");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265c" + "'", str43, "\u265c");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265c" + "'", str44, "\u265c");
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList49);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.King king47 = new a1.King(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = null;
        a1.ChessPiece.Color color49 = null;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard48, color49);
        java.util.ArrayList<java.lang.String> strList51 = pawn50.legalMoves();
        boolean boolean53 = chessBoard35.placePiece((a1.ChessPiece) pawn50, "\u265e");
        chessBoard35.initialize();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard58, color68);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard55, color68);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard35, color68);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = null;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard79, color85);
        a1.Rook rook88 = new a1.Rook(chessBoard76, color85);
        a1.Pawn pawn89 = new a1.Pawn(chessBoard73, color85);
        a1.Rook rook90 = new a1.Rook(chessBoard35, color85);
        a1.Rook rook91 = new a1.Rook(chessBoard0, color85);
        java.lang.String str92 = rook91.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "\u265c" + "'", str92, "\u265c");
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException13);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = null;
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard22, color23);
        java.lang.String str25 = pawn24.toString();
        boolean boolean27 = chessBoard21.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessBoard chessBoard28 = null;
        a1.ChessPiece.Color color29 = null;
        a1.Pawn pawn30 = new a1.Pawn(chessBoard28, color29);
        java.lang.String str31 = pawn30.toString();
        java.lang.String str32 = pawn30.toString();
        boolean boolean34 = chessBoard21.placePiece((a1.ChessPiece) pawn30, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        boolean boolean40 = chessBoard35.placePiece((a1.ChessPiece) rook38, "\u265f");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard41, color47);
        boolean boolean51 = chessBoard35.placePiece((a1.ChessPiece) knight49, "");
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = null;
        a1.ChessPiece.Color color54 = null;
        a1.Pawn pawn55 = new a1.Pawn(chessBoard53, color54);
        java.lang.String str56 = pawn55.toString();
        boolean boolean58 = chessBoard52.placePiece((a1.ChessPiece) pawn55, "");
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Knight knight63 = new a1.Knight(chessBoard59, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard59, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard59, color69);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard52, color69);
        a1.King king73 = new a1.King(chessBoard35, color69);
        a1.King king74 = new a1.King(chessBoard21, color69);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = null;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Knight knight82 = new a1.Knight(chessBoard78, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard78, color84);
        a1.King king87 = new a1.King(chessBoard75, color84);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard21, color84);
        a1.ChessPiece.Color color89 = bishop88.getColor();
        a1.Knight knight90 = new a1.Knight(chessBoard0, color89);
        java.lang.String str91 = knight90.toString();
        java.lang.String str92 = knight90.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u265f" + "'", str25, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u265f" + "'", str31, "\u265f");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265f" + "'", str56, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u265e" + "'", str91, "\u265e");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "\u265e" + "'", str92, "\u265e");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.toString();
        java.lang.String str7 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList8 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessPiece.Color color48 = null;
        a1.Bishop bishop49 = new a1.Bishop(chessBoard39, color48);
        java.lang.String str50 = bishop49.toString();
        java.lang.String str51 = bishop49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) bishop49, "\u265c");
        java.util.ArrayList<java.lang.String> strList54 = bishop49.legalMoves();
        java.util.ArrayList<java.lang.String> strList55 = bishop49.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265d" + "'", str50, "\u265d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265d" + "'", str51, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList55);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        java.lang.String str65 = rook64.toString();
        java.lang.String str66 = rook64.getPosition();
        java.util.ArrayList<java.lang.String> strList67 = rook64.legalMoves();
        boolean boolean69 = chessBoard0.placePiece((a1.ChessPiece) rook64, "\u265a");
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = null;
        a1.ChessPiece.Color color72 = null;
        a1.Pawn pawn73 = new a1.Pawn(chessBoard71, color72);
        java.lang.String str74 = pawn73.toString();
        boolean boolean76 = chessBoard70.placePiece((a1.ChessPiece) pawn73, "");
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Knight knight81 = new a1.Knight(chessBoard77, color79);
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard77, color83);
        a1.ChessBoard chessBoard86 = new a1.ChessBoard();
        a1.ChessPiece.Color color87 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook88 = new a1.Rook(chessBoard86, color87);
        a1.Pawn pawn89 = new a1.Pawn(chessBoard77, color87);
        a1.Bishop bishop90 = new a1.Bishop(chessBoard70, color87);
        java.lang.String str91 = bishop90.toString();
        java.lang.String str92 = bishop90.getPosition();
        a1.ChessPiece.Color color93 = bishop90.getColor();
        a1.Rook rook94 = new a1.Rook(chessBoard0, color93);
        a1.ChessPiece.Color color95 = rook94.getColor();
        java.lang.String str96 = rook94.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265c" + "'", str65, "\u265c");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265f" + "'", str74, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u265d" + "'", str91, "\u265d");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + color93 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color93.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color95 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color95.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "\u265c" + "'", str96, "\u265c");
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        java.lang.String str58 = knight57.toString();
        java.lang.String str59 = knight57.toString();
        java.lang.String str60 = knight57.toString();
        java.lang.String str61 = knight57.toString();
        boolean boolean63 = chessBoard0.placePiece((a1.ChessPiece) knight57, "\u265c");
        java.lang.String str64 = knight57.getPosition();
        java.lang.String str65 = knight57.toString();
        java.util.ArrayList<java.lang.String> strList66 = knight57.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265e" + "'", str58, "\u265e");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265e" + "'", str59, "\u265e");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265e" + "'", str60, "\u265e");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265e" + "'", str65, "\u265e");
        org.junit.Assert.assertNotNull(strList66);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = null;
        a1.ChessPiece.Color color39 = null;
        a1.Pawn pawn40 = new a1.Pawn(chessBoard38, color39);
        java.lang.String str41 = pawn40.toString();
        boolean boolean43 = chessBoard37.placePiece((a1.ChessPiece) pawn40, "");
        a1.ChessBoard chessBoard44 = null;
        a1.ChessPiece.Color color45 = null;
        a1.Pawn pawn46 = new a1.Pawn(chessBoard44, color45);
        java.lang.String str47 = pawn46.toString();
        java.lang.String str48 = pawn46.toString();
        boolean boolean50 = chessBoard37.placePiece((a1.ChessPiece) pawn46, "\u265f");
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        boolean boolean56 = chessBoard51.placePiece((a1.ChessPiece) rook54, "\u265f");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard57, color63);
        boolean boolean67 = chessBoard51.placePiece((a1.ChessPiece) knight65, "");
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessBoard chessBoard69 = null;
        a1.ChessPiece.Color color70 = null;
        a1.Pawn pawn71 = new a1.Pawn(chessBoard69, color70);
        java.lang.String str72 = pawn71.toString();
        boolean boolean74 = chessBoard68.placePiece((a1.ChessPiece) pawn71, "");
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Knight knight79 = new a1.Knight(chessBoard75, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard75, color81);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard75, color85);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard68, color85);
        a1.King king89 = new a1.King(chessBoard51, color85);
        a1.King king90 = new a1.King(chessBoard37, color85);
        java.lang.String str91 = king90.toString();
        java.util.ArrayList<java.lang.String> strList92 = king90.legalMoves();
        java.util.ArrayList<java.lang.String> strList93 = king90.legalMoves();
        a1.ChessPiece.Color color94 = king90.getColor();
        a1.King king95 = new a1.King(chessBoard0, color94);
        java.lang.String str96 = king95.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265f" + "'", str41, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u265f" + "'", str47, "\u265f");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265f" + "'", str48, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265f" + "'", str72, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u265a" + "'", str91, "\u265a");
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertTrue("'" + color94 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color94.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "\u265a" + "'", str96, "\u265a");
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.Rook rook31 = new a1.Rook(chessBoard19, color28);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.Rook rook44 = new a1.Rook(chessBoard32, color41);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard19, color41);
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard19, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard14, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard0, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.Knight knight66 = new a1.Knight(chessBoard50, color63);
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight68 = new a1.Knight(chessBoard50, color67);
        boolean boolean70 = chessBoard0.placePiece((a1.ChessPiece) knight68, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        boolean boolean55 = chessBoard50.placePiece((a1.ChessPiece) rook53, "\u265f");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        chessBoard56.initialize();
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = null;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        java.util.ArrayList<java.lang.String> strList63 = rook62.legalMoves();
        java.util.ArrayList<java.lang.String> strList64 = rook62.legalMoves();
        boolean boolean66 = chessBoard56.placePiece((a1.ChessPiece) rook62, "\u265e");
        a1.ChessPiece.Color color67 = null;
        a1.Rook rook68 = new a1.Rook(chessBoard56, color67);
        a1.ChessBoard chessBoard69 = null;
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard70, color76);
        a1.Knight knight79 = new a1.Knight(chessBoard69, color76);
        java.util.ArrayList<java.lang.String> strList80 = knight79.legalMoves();
        a1.ChessPiece.Color color81 = knight79.getColor();
        a1.Knight knight82 = new a1.Knight(chessBoard56, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard50, color81);
        a1.Rook rook84 = new a1.Rook(chessBoard0, color81);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece86 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.lang.String str15 = pawn9.toString();
        a1.ChessPiece.Color color16 = pawn9.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265f" + "'", str15, "\u265f");
        org.junit.Assert.assertNull(color16);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException11);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException13);
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException13);
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265a", throwable18);
        java.lang.Throwable[] throwableArray21 = illegalMoveException20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = illegalMoveException20.getSuppressed();
        java.lang.Throwable throwable26 = null;
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("hi!", throwable26);
        java.lang.Throwable[] throwableArray28 = illegalMoveException27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = illegalMoveException27.getSuppressed();
        a1.IllegalPositionException illegalPositionException30 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException27);
        java.lang.Throwable[] throwableArray31 = illegalPositionException30.getSuppressed();
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException30);
        illegalMoveException20.addSuppressed((java.lang.Throwable) illegalPositionException30);
        illegalPositionException15.addSuppressed((java.lang.Throwable) illegalPositionException30);
        java.lang.Throwable throwable39 = null;
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("hi!", throwable39);
        a1.IllegalPositionException illegalPositionException41 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException40);
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException40);
        a1.IllegalPositionException illegalPositionException43 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException42);
        illegalPositionException30.addSuppressed((java.lang.Throwable) illegalMoveException42);
        java.lang.Throwable throwable51 = null;
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("hi!", throwable51);
        a1.IllegalPositionException illegalPositionException53 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException52);
        a1.IllegalMoveException illegalMoveException54 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException52);
        a1.IllegalPositionException illegalPositionException55 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException52);
        a1.IllegalMoveException illegalMoveException56 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException55);
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException56);
        illegalPositionException30.addSuppressed((java.lang.Throwable) illegalMoveException56);
        java.lang.String str59 = illegalMoveException56.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265d" + "'", str59, "\u265d");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn2.legalMoves();
        java.lang.String str6 = pawn2.getPosition();
        java.lang.String str7 = pawn2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.util.ArrayList<java.lang.String> strList18 = king12.legalMoves();
        java.lang.String str19 = king12.toString();
        java.lang.String str20 = king12.getPosition();
        java.util.ArrayList<java.lang.String> strList21 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = king12.legalMoves();
        java.lang.String str23 = king12.toString();
        java.lang.String str24 = king12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265a" + "'", str19, "\u265a");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265a" + "'", str23, "\u265a");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265a" + "'", str24, "\u265a");
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Knight knight9 = new a1.Knight(chessBoard1, color7);
        a1.Knight knight10 = new a1.Knight(chessBoard0, color7);
        java.lang.String str11 = knight10.toString();
        java.util.ArrayList<java.lang.String> strList12 = knight10.legalMoves();
        java.lang.String str13 = knight10.toString();
        java.util.ArrayList<java.lang.String> strList14 = knight10.legalMoves();
        java.lang.String str15 = knight10.toString();
        java.util.ArrayList<java.lang.String> strList16 = knight10.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265e" + "'", str11, "\u265e");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265e" + "'", str13, "\u265e");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265e" + "'", str15, "\u265e");
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = pawn2.legalMoves();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessPiece.Color color32 = null;
        a1.Knight knight33 = new a1.Knight(chessBoard0, color32);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            illegalPositionException9.addSuppressed(throwable10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException12);
        illegalMoveException5.addSuppressed((java.lang.Throwable) illegalPositionException12);
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException15);
        java.lang.String str17 = illegalPositionException15.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Knight knight69 = new a1.Knight(chessBoard53, color66);
        a1.Rook rook70 = new a1.Rook(chessBoard44, color66);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color66);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard73 = null;
        a1.ChessPiece.Color color74 = null;
        a1.Pawn pawn75 = new a1.Pawn(chessBoard73, color74);
        java.lang.String str76 = pawn75.toString();
        a1.ChessPiece.Color color77 = pawn75.getColor();
        java.lang.String str78 = pawn75.toString();
        java.util.ArrayList<java.lang.String> strList79 = pawn75.legalMoves();
        a1.ChessPiece.Color color80 = pawn75.getColor();
        boolean boolean82 = chessBoard0.placePiece((a1.ChessPiece) pawn75, "\u265d");
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265f" + "'", str76, "\u265f");
        org.junit.Assert.assertNull(color77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265f" + "'", str78, "\u265f");
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNull(color80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        boolean boolean10 = chessBoard0.placePiece((a1.ChessPiece) rook6, "\u265e");
        java.util.ArrayList<java.lang.String> strList11 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = rook6.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("\u265a", throwable4);
        java.lang.Throwable[] throwableArray7 = illegalMoveException6.getSuppressed();
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable[] throwableArray10 = illegalMoveException6.getSuppressed();
        java.lang.Throwable throwable16 = null;
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("hi!", throwable16);
        a1.IllegalPositionException illegalPositionException18 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException17);
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException17);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException19);
        java.lang.Throwable throwable22 = null;
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("hi!", throwable22);
        java.lang.Throwable[] throwableArray24 = illegalMoveException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = illegalMoveException23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = illegalMoveException23.getSuppressed();
        illegalPositionException20.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException28 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalPositionException20);
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        java.lang.Throwable[] throwableArray34 = illegalMoveException33.getSuppressed();
        java.lang.Throwable[] throwableArray35 = illegalMoveException33.getSuppressed();
        java.lang.Throwable[] throwableArray36 = illegalMoveException33.getSuppressed();
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException33);
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("\u265a", throwable40);
        java.lang.Throwable[] throwableArray43 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException42.getSuppressed();
        illegalMoveException37.addSuppressed((java.lang.Throwable) illegalMoveException42);
        a1.IllegalPositionException illegalPositionException46 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException42);
        java.lang.Throwable[] throwableArray47 = illegalMoveException42.getSuppressed();
        illegalPositionException28.addSuppressed((java.lang.Throwable) illegalMoveException42);
        illegalMoveException6.addSuppressed((java.lang.Throwable) illegalMoveException42);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        java.lang.Throwable[] throwableArray10 = illegalMoveException9.getSuppressed();
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException13.getSuppressed();
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException13);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException13);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException13);
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException13);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        java.lang.String str58 = knight57.toString();
        java.lang.String str59 = knight57.toString();
        java.lang.String str60 = knight57.toString();
        java.lang.String str61 = knight57.toString();
        boolean boolean63 = chessBoard0.placePiece((a1.ChessPiece) knight57, "\u265c");
        a1.ChessPiece.Color color64 = null;
        a1.King king65 = new a1.King(chessBoard0, color64);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265e" + "'", str58, "\u265e");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265e" + "'", str59, "\u265e");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265e" + "'", str60, "\u265e");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = pawn3.legalMoves();
        java.lang.String str10 = pawn3.getPosition();
        java.lang.String str11 = pawn3.toString();
        java.util.ArrayList<java.lang.String> strList12 = pawn3.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList9 = knight8.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = knight8.legalMoves();
        java.util.ArrayList<java.lang.String> strList11 = knight8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece23 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        chessBoard0.initialize();
        a1.ChessPiece.Color color60 = null;
        a1.Bishop bishop61 = new a1.Bishop(chessBoard0, color60);
        a1.ChessPiece.Color color62 = bishop61.getColor();
        java.lang.String str63 = bishop61.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(color62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265d" + "'", str63, "\u265d");
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = null;
        a1.ChessPiece.Color color74 = null;
        a1.Pawn pawn75 = new a1.Pawn(chessBoard73, color74);
        java.lang.String str76 = pawn75.toString();
        boolean boolean78 = chessBoard72.placePiece((a1.ChessPiece) pawn75, "");
        boolean boolean80 = chessBoard0.placePiece((a1.ChessPiece) pawn75, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265f" + "'", str76, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece18 = chessBoard0.getPiece("a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard49, color68);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard0, color68);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        java.util.ArrayList<java.lang.String> strList76 = rook75.legalMoves();
        java.lang.String str77 = rook75.toString();
        boolean boolean79 = chessBoard0.placePiece((a1.ChessPiece) rook75, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece81 = chessBoard0.getPiece("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265c" + "'", str77, "\u265c");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        java.lang.String str54 = king53.toString();
        java.lang.String str55 = king53.toString();
        java.util.ArrayList<java.lang.String> strList56 = king53.legalMoves();
        java.lang.String str57 = king53.toString();
        java.lang.String str58 = king53.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265a" + "'", str55, "\u265a");
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265a" + "'", str57, "\u265a");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265a" + "'", str58, "\u265a");
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.lang.String str18 = king12.toString();
        a1.ChessPiece.Color color19 = king12.getColor();
        java.lang.String str20 = king12.toString();
        java.lang.String str21 = king12.toString();
        java.util.ArrayList<java.lang.String> strList22 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265a" + "'", str18, "\u265a");
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265a" + "'", str20, "\u265a");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265a" + "'", str21, "\u265a");
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessPiece.Color color48 = null;
        a1.Bishop bishop49 = new a1.Bishop(chessBoard39, color48);
        java.lang.String str50 = bishop49.toString();
        java.lang.String str51 = bishop49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) bishop49, "\u265c");
        java.util.ArrayList<java.lang.String> strList54 = bishop49.legalMoves();
        java.lang.String str55 = bishop49.toString();
        java.util.ArrayList<java.lang.String> strList56 = bishop49.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265d" + "'", str50, "\u265d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265d" + "'", str51, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265d" + "'", str55, "\u265d");
        org.junit.Assert.assertNotNull(strList56);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard19, color21);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color25);
        a1.Rook rook28 = new a1.Rook(chessBoard16, color25);
        a1.Pawn pawn29 = new a1.Pawn(chessBoard13, color25);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.Rook rook65 = new a1.Rook(chessBoard33, color60);
        a1.Rook rook66 = new a1.Rook(chessBoard30, color60);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.Rook rook79 = new a1.Rook(chessBoard67, color76);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = null;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Knight knight87 = new a1.Knight(chessBoard83, color85);
        a1.ChessBoard chessBoard88 = new a1.ChessBoard();
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook90 = new a1.Rook(chessBoard88, color89);
        a1.Bishop bishop91 = new a1.Bishop(chessBoard83, color89);
        a1.Rook rook92 = new a1.Rook(chessBoard80, color89);
        a1.Bishop bishop93 = new a1.Bishop(chessBoard67, color89);
        a1.Knight knight94 = new a1.Knight(chessBoard30, color89);
        a1.Rook rook95 = new a1.Rook(chessBoard13, color89);
        a1.Knight knight96 = new a1.Knight(chessBoard0, color89);
        java.lang.String str97 = knight96.toString();
        java.util.ArrayList<java.lang.String> strList98 = knight96.legalMoves();
        java.lang.String str99 = knight96.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "\u265e" + "'", str97, "\u265e");
        org.junit.Assert.assertNotNull(strList98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "\u265e" + "'", str99, "\u265e");
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn2.legalMoves();
        java.lang.String str6 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList7 = pawn2.legalMoves();
        java.lang.String str8 = pawn2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265f" + "'", str6, "\u265f");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.lang.String str7 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList8 = pawn2.legalMoves();
        java.lang.String str9 = pawn2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = null;
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        java.lang.String str22 = pawn21.toString();
        boolean boolean24 = chessBoard18.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        java.lang.String str29 = pawn27.toString();
        boolean boolean31 = chessBoard18.placePiece((a1.ChessPiece) pawn27, "\u265f");
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        boolean boolean37 = chessBoard32.placePiece((a1.ChessPiece) rook35, "\u265f");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard38, color44);
        boolean boolean48 = chessBoard32.placePiece((a1.ChessPiece) knight46, "");
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard56, color66);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard49, color66);
        a1.King king70 = new a1.King(chessBoard32, color66);
        a1.King king71 = new a1.King(chessBoard18, color66);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = null;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Knight knight79 = new a1.Knight(chessBoard75, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard75, color81);
        a1.King king84 = new a1.King(chessBoard72, color81);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard18, color81);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard0, color81);
        java.lang.String str87 = bishop86.getPosition();
        // The following exception was thrown during execution in test generation
        try {
            bishop86.setPosition("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u265f" + "'", str29, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.Rook rook24 = new a1.Rook(chessBoard12, color21);
        a1.Pawn pawn25 = new a1.Pawn(chessBoard9, color21);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = null;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Knight knight54 = new a1.Knight(chessBoard50, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard50, color56);
        a1.Rook rook59 = new a1.Rook(chessBoard47, color56);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard34, color56);
        a1.Rook rook61 = new a1.Rook(chessBoard29, color56);
        a1.Rook rook62 = new a1.Rook(chessBoard26, color56);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = null;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard66, color72);
        a1.Rook rook75 = new a1.Rook(chessBoard63, color72);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = null;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard79, color85);
        a1.Rook rook88 = new a1.Rook(chessBoard76, color85);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard63, color85);
        a1.Knight knight90 = new a1.Knight(chessBoard26, color85);
        a1.Rook rook91 = new a1.Rook(chessBoard9, color85);
        a1.Rook rook92 = new a1.Rook(chessBoard0, color85);
        java.util.ArrayList<java.lang.String> strList93 = rook92.legalMoves();
        java.lang.String str94 = rook92.toString();
        java.util.ArrayList<java.lang.String> strList95 = rook92.legalMoves();
        java.lang.Class<?> wildcardClass96 = strList95.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\u265c" + "'", str94, "\u265c");
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.King king44 = new a1.King(chessBoard32, color41);
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.util.ArrayList<java.lang.String> strList48 = pawn47.legalMoves();
        boolean boolean50 = chessBoard32.placePiece((a1.ChessPiece) pawn47, "\u265e");
        chessBoard32.initialize();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard52, color65);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard32, color65);
        a1.Knight knight70 = new a1.Knight(chessBoard27, color65);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color65);
        chessBoard0.initialize();
        a1.ChessPiece.Color color73 = null;
        a1.King king74 = new a1.King(chessBoard0, color73);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        java.lang.String str60 = rook59.toString();
        java.util.ArrayList<java.lang.String> strList61 = rook59.legalMoves();
        java.lang.String str62 = rook59.toString();
        java.lang.String str63 = rook59.toString();
        a1.ChessPiece.Color color64 = rook59.getColor();
        a1.Bishop bishop65 = new a1.Bishop(chessBoard54, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard0, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.King king79 = new a1.King(chessBoard67, color76);
        a1.ChessPiece.Color color80 = king79.getColor();
        a1.Bishop bishop81 = new a1.Bishop(chessBoard0, color80);
        java.lang.String str82 = bishop81.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265c" + "'", str60, "\u265c");
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265c" + "'", str62, "\u265c");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265c" + "'", str63, "\u265c");
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u265d" + "'", str82, "\u265d");
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        java.lang.String str31 = bishop30.toString();
        java.util.ArrayList<java.lang.String> strList32 = bishop30.legalMoves();
        boolean boolean34 = chessBoard0.placePiece((a1.ChessPiece) bishop30, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u265d" + "'", str31, "\u265d");
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.lang.String str16 = pawn15.toString();
        boolean boolean18 = chessBoard12.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard19, color21);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color25);
        a1.Knight knight28 = new a1.Knight(chessBoard12, color25);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard12, color31);
        a1.Knight knight35 = new a1.Knight(chessBoard3, color31);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard0, color31);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = null;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Rook rook49 = new a1.Rook(chessBoard37, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = null;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard53, color59);
        a1.Rook rook62 = new a1.Rook(chessBoard50, color59);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard37, color59);
        a1.Pawn pawn64 = new a1.Pawn(chessBoard0, color59);
        java.lang.Class<?> wildcardClass65 = color59.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265f" + "'", str16, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        java.util.ArrayList<java.lang.String> strList28 = bishop27.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = bishop27.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        java.lang.String str33 = pawn31.toString();
        boolean boolean35 = chessBoard22.placePiece((a1.ChessPiece) pawn31, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        boolean boolean41 = chessBoard36.placePiece((a1.ChessPiece) rook39, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard36.placePiece((a1.ChessPiece) knight50, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        a1.King king74 = new a1.King(chessBoard36, color70);
        a1.King king75 = new a1.King(chessBoard22, color70);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color70);
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        chessBoard79.initialize();
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = null;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        java.util.ArrayList<java.lang.String> strList86 = rook85.legalMoves();
        java.util.ArrayList<java.lang.String> strList87 = rook85.legalMoves();
        boolean boolean89 = chessBoard79.placePiece((a1.ChessPiece) rook85, "\u265e");
        boolean boolean91 = chessBoard0.placePiece((a1.ChessPiece) rook85, "\u265c");
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.lang.String str4 = rook2.getPosition();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = rook2.legalMoves();
        java.lang.String str8 = rook2.toString();
        a1.ChessPiece.Color color9 = rook2.getColor();
        java.lang.String str10 = rook2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertNull(color9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265c" + "'", str10, "\u265c");
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        boolean boolean43 = chessBoard38.placePiece((a1.ChessPiece) rook41, "\u265f");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard44, color50);
        boolean boolean54 = chessBoard38.placePiece((a1.ChessPiece) knight52, "");
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = null;
        a1.ChessPiece.Color color57 = null;
        a1.Pawn pawn58 = new a1.Pawn(chessBoard56, color57);
        java.lang.String str59 = pawn58.toString();
        boolean boolean61 = chessBoard55.placePiece((a1.ChessPiece) pawn58, "");
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard62, color72);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard55, color72);
        a1.King king76 = new a1.King(chessBoard38, color72);
        a1.Knight knight77 = new a1.Knight(chessBoard0, color72);
        java.lang.String str78 = knight77.toString();
        java.lang.String str79 = knight77.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265f" + "'", str59, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265e" + "'", str78, "\u265e");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265e" + "'", str79, "\u265e");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException12);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        java.lang.String str41 = rook40.toString();
        java.util.ArrayList<java.lang.String> strList42 = rook40.legalMoves();
        java.lang.String str43 = rook40.toString();
        java.lang.String str44 = rook40.toString();
        a1.ChessPiece.Color color45 = rook40.getColor();
        a1.Bishop bishop46 = new a1.Bishop(chessBoard35, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard0, color45);
        java.lang.String str48 = bishop47.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265c" + "'", str41, "\u265c");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265c" + "'", str43, "\u265c");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265c" + "'", str44, "\u265c");
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265d" + "'", str48, "\u265d");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Knight knight81 = new a1.Knight(chessBoard73, color79);
        a1.Knight knight82 = new a1.Knight(chessBoard0, color79);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece84 = chessBoard0.getPiece("a1.IllegalMoveException: a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        chessBoard35.initialize();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        java.util.ArrayList<java.lang.String> strList42 = rook41.legalMoves();
        java.util.ArrayList<java.lang.String> strList43 = rook41.legalMoves();
        boolean boolean45 = chessBoard35.placePiece((a1.ChessPiece) rook41, "\u265e");
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) rook41, "a1.IllegalMoveException: ");
        java.util.ArrayList<java.lang.String> strList48 = rook41.legalMoves();
        java.lang.Class<?> wildcardClass49 = strList48.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        java.lang.String str23 = bishop22.toString();
        a1.ChessPiece.Color color24 = bishop22.getColor();
        java.util.ArrayList<java.lang.String> strList25 = bishop22.legalMoves();
        java.util.ArrayList<java.lang.String> strList26 = bishop22.legalMoves();
        java.lang.String str27 = bishop22.toString();
        java.lang.String str28 = bishop22.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265d" + "'", str23, "\u265d");
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265d" + "'", str27, "\u265d");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265d" + "'", str28, "\u265d");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = null;
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard39, color46);
        a1.King king50 = new a1.King(chessBoard0, color46);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece52 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str21 = bishop20.toString();
        java.lang.String str22 = bishop20.getPosition();
        a1.ChessPiece.Color color23 = bishop20.getColor();
        java.lang.String str24 = bishop20.toString();
        java.lang.String str25 = bishop20.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265d" + "'", str21, "\u265d");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265d" + "'", str24, "\u265d");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u265d" + "'", str25, "\u265d");
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessPiece.Color color82 = null;
        a1.Bishop bishop83 = new a1.Bishop(chessBoard73, color82);
        java.util.ArrayList<java.lang.String> strList84 = bishop83.legalMoves();
        java.util.ArrayList<java.lang.String> strList85 = bishop83.legalMoves();
        boolean boolean87 = chessBoard0.placePiece((a1.ChessPiece) bishop83, "\u265c");
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.King king38 = new a1.King(chessBoard26, color35);
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.util.ArrayList<java.lang.String> strList42 = pawn41.legalMoves();
        boolean boolean44 = chessBoard26.placePiece((a1.ChessPiece) pawn41, "\u265e");
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn46 = new a1.Pawn(chessBoard26, color45);
        java.util.ArrayList<java.lang.String> strList47 = pawn46.legalMoves();
        a1.ChessPiece.Color color48 = pawn46.getColor();
        a1.Bishop bishop49 = new a1.Bishop(chessBoard0, color48);
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = bishop18.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = bishop18.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        java.lang.String str6 = rook5.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        java.lang.String str8 = rook5.toString();
        java.lang.String str9 = rook5.toString();
        a1.ChessPiece.Color color10 = rook5.getColor();
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = bishop11.toString();
        java.util.ArrayList<java.lang.String> strList13 = bishop11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = bishop11.legalMoves();
        org.junit.Assert.assertTrue("'" + color4 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color4.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        java.util.ArrayList<java.lang.String> strList35 = bishop34.legalMoves();
        java.lang.String str36 = bishop34.toString();
        java.lang.String str37 = bishop34.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException14);
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265a", throwable19);
        java.lang.Throwable[] throwableArray22 = illegalMoveException21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = illegalMoveException21.getSuppressed();
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        java.lang.Throwable[] throwableArray29 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = illegalMoveException28.getSuppressed();
        a1.IllegalPositionException illegalPositionException31 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException28);
        java.lang.Throwable[] throwableArray32 = illegalPositionException31.getSuppressed();
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException31);
        illegalMoveException21.addSuppressed((java.lang.Throwable) illegalPositionException31);
        illegalPositionException16.addSuppressed((java.lang.Throwable) illegalPositionException31);
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        a1.IllegalPositionException illegalPositionException42 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException41);
        a1.IllegalMoveException illegalMoveException43 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException41);
        a1.IllegalPositionException illegalPositionException44 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException43);
        illegalPositionException31.addSuppressed((java.lang.Throwable) illegalMoveException43);
        a1.IllegalMoveException illegalMoveException46 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException31);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        a1.ChessPiece.Color color5 = pawn2.getColor();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNull(color5);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        chessBoard0.initialize();
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalMoveException: ", "\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        java.lang.String str22 = pawn21.toString();
        a1.ChessPiece.Color color23 = pawn21.getColor();
        java.util.ArrayList<java.lang.String> strList24 = pawn21.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertNull(color23);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        chessBoard6.initialize();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        java.util.ArrayList<java.lang.String> strList13 = rook12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook12.legalMoves();
        boolean boolean16 = chessBoard6.placePiece((a1.ChessPiece) rook12, "\u265e");
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard6, color17);
        a1.ChessBoard chessBoard19 = null;
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        a1.Knight knight29 = new a1.Knight(chessBoard19, color26);
        java.util.ArrayList<java.lang.String> strList30 = knight29.legalMoves();
        a1.ChessPiece.Color color31 = knight29.getColor();
        a1.Knight knight32 = new a1.Knight(chessBoard6, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color31);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece35 = chessBoard0.getPiece("a1.IllegalPositionException: a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        boolean boolean14 = chessBoard9.placePiece((a1.ChessPiece) rook12, "\u265f");
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard15, color21);
        boolean boolean25 = chessBoard9.placePiece((a1.ChessPiece) knight23, "");
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        boolean boolean31 = chessBoard26.placePiece((a1.ChessPiece) rook29, "\u265f");
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Knight knight36 = new a1.Knight(chessBoard32, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard32, color38);
        boolean boolean42 = chessBoard26.placePiece((a1.ChessPiece) knight40, "");
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = null;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.Rook rook55 = new a1.Rook(chessBoard43, color52);
        a1.King king56 = new a1.King(chessBoard26, color52);
        boolean boolean58 = chessBoard9.placePiece((a1.ChessPiece) king56, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        boolean boolean64 = chessBoard59.placePiece((a1.ChessPiece) rook62, "\u265f");
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        chessBoard65.initialize();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = null;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        java.util.ArrayList<java.lang.String> strList72 = rook71.legalMoves();
        java.util.ArrayList<java.lang.String> strList73 = rook71.legalMoves();
        boolean boolean75 = chessBoard65.placePiece((a1.ChessPiece) rook71, "\u265e");
        a1.ChessPiece.Color color76 = null;
        a1.Rook rook77 = new a1.Rook(chessBoard65, color76);
        a1.ChessBoard chessBoard78 = null;
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Knight knight87 = new a1.Knight(chessBoard79, color85);
        a1.Knight knight88 = new a1.Knight(chessBoard78, color85);
        java.util.ArrayList<java.lang.String> strList89 = knight88.legalMoves();
        a1.ChessPiece.Color color90 = knight88.getColor();
        a1.Knight knight91 = new a1.Knight(chessBoard65, color90);
        a1.Bishop bishop92 = new a1.Bishop(chessBoard59, color90);
        a1.Rook rook93 = new a1.Rook(chessBoard9, color90);
        a1.Bishop bishop94 = new a1.Bishop(chessBoard0, color90);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color11 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color11.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.toString();
        java.util.ArrayList<java.lang.String> strList12 = bishop10.legalMoves();
        java.lang.String str13 = bishop10.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265d" + "'", str11, "\u265d");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265d" + "'", str13, "\u265d");
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.lang.String str15 = pawn9.toString();
        a1.ChessPiece.Color color16 = pawn9.getColor();
        java.lang.String str17 = pawn9.toString();
        java.lang.String str18 = pawn9.getPosition();
        java.lang.Class<?> wildcardClass19 = pawn9.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265f" + "'", str15, "\u265f");
        org.junit.Assert.assertNull(color16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        java.util.ArrayList<java.lang.String> strList39 = king38.legalMoves();
        java.lang.String str40 = king38.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        a1.ChessPiece.Color color50 = null;
        a1.Bishop bishop51 = new a1.Bishop(chessBoard0, color50);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException8);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        java.lang.String str17 = knight14.toString();
        java.lang.String str18 = knight14.getPosition();
        java.util.ArrayList<java.lang.String> strList19 = knight14.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265e" + "'", str17, "\u265e");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = null;
        a1.ChessPiece.Color color53 = null;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard52, color53);
        java.lang.String str55 = pawn54.toString();
        boolean boolean57 = chessBoard51.placePiece((a1.ChessPiece) pawn54, "");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard58, color68);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard51, color68);
        java.util.ArrayList<java.lang.String> strList72 = bishop71.legalMoves();
        a1.ChessPiece.Color color73 = bishop71.getColor();
        a1.Knight knight74 = new a1.Knight(chessBoard34, color73);
        a1.Knight knight75 = new a1.Knight(chessBoard17, color73);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard79, color85);
        a1.ChessBoard chessBoard88 = new a1.ChessBoard();
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook90 = new a1.Rook(chessBoard88, color89);
        a1.Pawn pawn91 = new a1.Pawn(chessBoard79, color89);
        a1.Pawn pawn92 = new a1.Pawn(chessBoard76, color89);
        a1.King king93 = new a1.King(chessBoard17, color89);
        a1.Knight knight94 = new a1.Knight(chessBoard0, color89);
        java.lang.String str95 = knight94.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265f" + "'", str55, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "\u265e" + "'", str95, "\u265e");
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("\u265e", throwable1);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        boolean boolean32 = chessBoard27.placePiece((a1.ChessPiece) rook30, "\u265f");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard33, color39);
        boolean boolean43 = chessBoard27.placePiece((a1.ChessPiece) knight41, "");
        a1.ChessBoard chessBoard44 = null;
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = null;
        a1.ChessPiece.Color color47 = null;
        a1.Pawn pawn48 = new a1.Pawn(chessBoard46, color47);
        java.lang.String str49 = pawn48.toString();
        boolean boolean51 = chessBoard45.placePiece((a1.ChessPiece) pawn48, "");
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.Knight knight61 = new a1.Knight(chessBoard45, color58);
        a1.Knight knight62 = new a1.Knight(chessBoard44, color58);
        java.util.ArrayList<java.lang.String> strList63 = knight62.legalMoves();
        java.lang.String str64 = knight62.toString();
        java.lang.String str65 = knight62.getPosition();
        boolean boolean67 = chessBoard27.placePiece((a1.ChessPiece) knight62, "a1.IllegalPositionException: a1.IllegalPositionException: ");
        a1.ChessPiece.Color color68 = knight62.getColor();
        a1.Pawn pawn69 = new a1.Pawn(chessBoard0, color68);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u265f" + "'", str49, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265e" + "'", str64, "\u265e");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.King king46 = new a1.King(chessBoard34, color43);
        a1.ChessBoard chessBoard47 = null;
        a1.ChessPiece.Color color48 = null;
        a1.Pawn pawn49 = new a1.Pawn(chessBoard47, color48);
        java.util.ArrayList<java.lang.String> strList50 = pawn49.legalMoves();
        boolean boolean52 = chessBoard34.placePiece((a1.ChessPiece) pawn49, "\u265e");
        chessBoard34.initialize();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard54, color67);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard34, color67);
        a1.Knight knight72 = new a1.Knight(chessBoard29, color67);
        a1.Rook rook73 = new a1.Rook(chessBoard22, color67);
        a1.Knight knight74 = new a1.Knight(chessBoard0, color67);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Knight knight79 = new a1.Knight(chessBoard75, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard75, color81);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard75, color85);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard0, color85);
        java.lang.String str89 = bishop88.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u265d" + "'", str89, "\u265d");
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        java.lang.String str59 = pawn58.toString();
        java.lang.String str60 = pawn58.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265f" + "'", str59, "\u265f");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265f" + "'", str60, "\u265f");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        java.lang.String str33 = pawn31.toString();
        boolean boolean35 = chessBoard22.placePiece((a1.ChessPiece) pawn31, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        boolean boolean41 = chessBoard36.placePiece((a1.ChessPiece) rook39, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard36.placePiece((a1.ChessPiece) knight50, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        a1.King king74 = new a1.King(chessBoard36, color70);
        a1.King king75 = new a1.King(chessBoard22, color70);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color70);
        java.lang.String str77 = knight76.toString();
        java.lang.String str78 = knight76.toString();
        java.util.ArrayList<java.lang.String> strList79 = knight76.legalMoves();
        java.util.ArrayList<java.lang.String> strList80 = knight76.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265e" + "'", str77, "\u265e");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265e" + "'", str78, "\u265e");
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(strList80);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        java.util.ArrayList<java.lang.String> strList33 = rook32.legalMoves();
        java.util.ArrayList<java.lang.String> strList34 = rook32.legalMoves();
        java.lang.String str35 = rook32.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265c" + "'", str35, "\u265c");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.King king51 = new a1.King(chessBoard39, color48);
        java.util.ArrayList<java.lang.String> strList52 = king51.legalMoves();
        java.util.ArrayList<java.lang.String> strList53 = king51.legalMoves();
        java.lang.String str54 = king51.toString();
        java.util.ArrayList<java.lang.String> strList55 = king51.legalMoves();
        java.lang.String str56 = king51.toString();
        java.util.ArrayList<java.lang.String> strList57 = king51.legalMoves();
        java.lang.String str58 = king51.toString();
        java.lang.String str59 = king51.getPosition();
        java.lang.String str60 = king51.toString();
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king51, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            king51.setPosition("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265a" + "'", str56, "\u265a");
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265a" + "'", str58, "\u265a");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265a" + "'", str60, "\u265a");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = null;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Knight knight68 = new a1.Knight(chessBoard64, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard64, color70);
        a1.Rook rook73 = new a1.Rook(chessBoard61, color70);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard48, color70);
        a1.Rook rook75 = new a1.Rook(chessBoard43, color70);
        a1.Rook rook76 = new a1.Rook(chessBoard40, color70);
        java.util.ArrayList<java.lang.String> strList77 = rook76.legalMoves();
        a1.ChessPiece.Color color78 = rook76.getColor();
        a1.King king79 = new a1.King(chessBoard0, color78);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.King king44 = new a1.King(chessBoard32, color41);
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.util.ArrayList<java.lang.String> strList48 = pawn47.legalMoves();
        boolean boolean50 = chessBoard32.placePiece((a1.ChessPiece) pawn47, "\u265e");
        chessBoard32.initialize();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard52, color65);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard32, color65);
        a1.Knight knight70 = new a1.Knight(chessBoard27, color65);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color65);
        chessBoard0.initialize();
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList9 = knight8.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = knight8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        java.lang.String str13 = pawn12.getPosition();
        a1.ChessPiece.Color color14 = pawn12.getColor();
        java.lang.String str15 = pawn12.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265f" + "'", str15, "\u265f");
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        java.lang.String str54 = king53.toString();
        java.util.ArrayList<java.lang.String> strList55 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList56 = king53.legalMoves();
        a1.ChessPiece.Color color57 = king53.getColor();
        // The following exception was thrown during execution in test generation
        try {
            king53.setPosition("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("hi!", "\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard4, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Bishop bishop12 = new a1.Bishop(chessBoard4, color10);
        a1.King king13 = new a1.King(chessBoard1, color10);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Bishop bishop25 = new a1.Bishop(chessBoard17, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Pawn pawn29 = new a1.Pawn(chessBoard17, color27);
        a1.Pawn pawn30 = new a1.Pawn(chessBoard14, color27);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        java.util.ArrayList<java.lang.String> strList52 = bishop51.legalMoves();
        a1.ChessPiece.Color color53 = bishop51.getColor();
        a1.Knight knight54 = new a1.Knight(chessBoard14, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard1, color53);
        a1.King king56 = new a1.King(chessBoard0, color53);
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException9);
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException14.getSuppressed();
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException22);
        illegalMoveException14.addSuppressed((java.lang.Throwable) illegalMoveException24);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException24);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException27);
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalPositionException27);
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("a1.IllegalMoveException: ", (java.lang.Throwable) illegalMoveException29);
        a1.IllegalPositionException illegalPositionException31 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException30);
        java.lang.Throwable throwable34 = null;
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("hi!", throwable34);
        java.lang.Throwable[] throwableArray36 = illegalMoveException35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = illegalMoveException35.getSuppressed();
        java.lang.Throwable[] throwableArray38 = illegalMoveException35.getSuppressed();
        java.lang.Throwable throwable42 = null;
        a1.IllegalMoveException illegalMoveException43 = new a1.IllegalMoveException("hi!", throwable42);
        a1.IllegalPositionException illegalPositionException44 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException43);
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException43);
        illegalMoveException35.addSuppressed((java.lang.Throwable) illegalMoveException45);
        java.lang.Throwable[] throwableArray47 = illegalMoveException35.getSuppressed();
        java.lang.Throwable throwable53 = null;
        a1.IllegalMoveException illegalMoveException54 = new a1.IllegalMoveException("hi!", throwable53);
        a1.IllegalPositionException illegalPositionException55 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException54);
        a1.IllegalMoveException illegalMoveException56 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException55);
        a1.IllegalPositionException illegalPositionException57 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException55);
        a1.IllegalMoveException illegalMoveException58 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException55);
        illegalMoveException35.addSuppressed((java.lang.Throwable) illegalMoveException58);
        a1.IllegalMoveException illegalMoveException60 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException35);
        illegalPositionException31.addSuppressed((java.lang.Throwable) illegalMoveException60);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray47);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.Rook rook29 = new a1.Rook(chessBoard17, color26);
        a1.King king30 = new a1.King(chessBoard0, color26);
        java.lang.String str31 = king30.toString();
        java.util.ArrayList<java.lang.String> strList32 = king30.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u265a" + "'", str31, "\u265a");
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessPiece.Color color7 = pawn3.getColor();
        java.lang.String str8 = pawn3.toString();
        // The following exception was thrown during execution in test generation
        try {
            pawn3.setPosition("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(color7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: a1.IllegalPositionException: a1.IllegalMoveException: hi!", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        java.lang.String str74 = bishop73.toString();
        java.lang.String str75 = bishop73.toString();
        java.util.ArrayList<java.lang.String> strList76 = bishop73.legalMoves();
        java.lang.String str77 = bishop73.toString();
        java.lang.String str78 = bishop73.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265d" + "'", str74, "\u265d");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u265d" + "'", str75, "\u265d");
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265d" + "'", str77, "\u265d");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265d" + "'", str78, "\u265d");
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        java.lang.Throwable throwable24 = null;
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("hi!", throwable24);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException25);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException26);
        illegalMoveException19.addSuppressed((java.lang.Throwable) illegalPositionException26);
        java.lang.Throwable throwable34 = null;
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("hi!", throwable34);
        a1.IllegalPositionException illegalPositionException36 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException35);
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException35);
        java.lang.Throwable throwable39 = null;
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("hi!", throwable39);
        java.lang.Throwable[] throwableArray41 = illegalMoveException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = illegalMoveException40.getSuppressed();
        java.lang.Throwable[] throwableArray43 = illegalMoveException40.getSuppressed();
        java.lang.Throwable throwable47 = null;
        a1.IllegalMoveException illegalMoveException48 = new a1.IllegalMoveException("hi!", throwable47);
        a1.IllegalPositionException illegalPositionException49 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException48);
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException48);
        illegalMoveException40.addSuppressed((java.lang.Throwable) illegalMoveException50);
        illegalMoveException37.addSuppressed((java.lang.Throwable) illegalMoveException50);
        a1.IllegalPositionException illegalPositionException53 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException37);
        a1.IllegalPositionException illegalPositionException54 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException37);
        java.lang.Throwable throwable56 = null;
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("hi!", throwable56);
        java.lang.Throwable[] throwableArray58 = illegalMoveException57.getSuppressed();
        java.lang.Throwable[] throwableArray59 = illegalMoveException57.getSuppressed();
        java.lang.Throwable[] throwableArray60 = illegalMoveException57.getSuppressed();
        java.lang.Throwable throwable64 = null;
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("hi!", throwable64);
        a1.IllegalPositionException illegalPositionException66 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException65);
        a1.IllegalMoveException illegalMoveException67 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException65);
        illegalMoveException57.addSuppressed((java.lang.Throwable) illegalMoveException67);
        java.lang.Throwable[] throwableArray69 = illegalMoveException57.getSuppressed();
        java.lang.Throwable throwable75 = null;
        a1.IllegalMoveException illegalMoveException76 = new a1.IllegalMoveException("hi!", throwable75);
        a1.IllegalPositionException illegalPositionException77 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException76);
        a1.IllegalMoveException illegalMoveException78 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException77);
        a1.IllegalPositionException illegalPositionException79 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException77);
        a1.IllegalMoveException illegalMoveException80 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException77);
        illegalMoveException57.addSuppressed((java.lang.Throwable) illegalMoveException80);
        illegalPositionException54.addSuppressed((java.lang.Throwable) illegalMoveException80);
        illegalPositionException26.addSuppressed((java.lang.Throwable) illegalMoveException80);
        a1.IllegalMoveException illegalMoveException84 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException80);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException84);
        a1.IllegalMoveException illegalMoveException86 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException84);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        java.lang.String str61 = knight60.toString();
        java.util.ArrayList<java.lang.String> strList62 = knight60.legalMoves();
        java.lang.Class<?> wildcardClass63 = strList62.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.Rook rook68 = new a1.Rook(chessBoard0, color65);
        java.lang.String str69 = rook68.toString();
        java.util.ArrayList<java.lang.String> strList70 = rook68.legalMoves();
        java.util.ArrayList<java.lang.String> strList71 = rook68.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265c" + "'", str69, "\u265c");
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strList71);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException14);
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265a", throwable19);
        java.lang.Throwable[] throwableArray22 = illegalMoveException21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = illegalMoveException21.getSuppressed();
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        java.lang.Throwable[] throwableArray29 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = illegalMoveException28.getSuppressed();
        a1.IllegalPositionException illegalPositionException31 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException28);
        java.lang.Throwable[] throwableArray32 = illegalPositionException31.getSuppressed();
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException31);
        illegalMoveException21.addSuppressed((java.lang.Throwable) illegalPositionException31);
        illegalPositionException16.addSuppressed((java.lang.Throwable) illegalPositionException31);
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        a1.IllegalPositionException illegalPositionException42 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException41);
        a1.IllegalMoveException illegalMoveException43 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException41);
        a1.IllegalPositionException illegalPositionException44 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException43);
        illegalPositionException31.addSuppressed((java.lang.Throwable) illegalMoveException43);
        a1.IllegalPositionException illegalPositionException46 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException43);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        boolean boolean33 = chessBoard28.placePiece((a1.ChessPiece) rook31, "\u265f");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard34, color40);
        boolean boolean44 = chessBoard28.placePiece((a1.ChessPiece) knight42, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = null;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard48, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Bishop bishop56 = new a1.Bishop(chessBoard48, color54);
        a1.Rook rook57 = new a1.Rook(chessBoard45, color54);
        a1.King king58 = new a1.King(chessBoard28, color54);
        a1.King king59 = new a1.King(chessBoard0, color54);
        chessBoard0.initialize();
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        a1.ChessPiece.Color color9 = pawn3.getColor();
        java.util.ArrayList<java.lang.String> strList10 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList11 = pawn3.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(color9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        chessBoard0.initialize();
        a1.ChessPiece.Color color60 = null;
        a1.Bishop bishop61 = new a1.Bishop(chessBoard0, color60);
        java.lang.String str62 = bishop61.toString();
        java.lang.String str63 = bishop61.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265d" + "'", str62, "\u265d");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265d" + "'", str63, "\u265d");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = null;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Knight knight36 = new a1.Knight(chessBoard32, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Bishop bishop40 = new a1.Bishop(chessBoard32, color38);
        a1.King king41 = new a1.King(chessBoard29, color38);
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.util.ArrayList<java.lang.String> strList45 = pawn44.legalMoves();
        boolean boolean47 = chessBoard29.placePiece((a1.ChessPiece) pawn44, "\u265e");
        chessBoard29.initialize();
        a1.ChessPiece.Color color49 = null;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard29, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = null;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard67, color69);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard67, color73);
        a1.Rook rook76 = new a1.Rook(chessBoard64, color73);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard51, color73);
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn79 = new a1.Pawn(chessBoard51, color78);
        a1.Pawn pawn80 = new a1.Pawn(chessBoard29, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Knight knight85 = new a1.Knight(chessBoard81, color83);
        a1.ChessBoard chessBoard86 = new a1.ChessBoard();
        a1.ChessPiece.Color color87 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook88 = new a1.Rook(chessBoard86, color87);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard81, color87);
        a1.ChessPiece.Color color90 = bishop89.getColor();
        a1.King king91 = new a1.King(chessBoard29, color90);
        a1.Knight knight92 = new a1.Knight(chessBoard0, color90);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", throwable6);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable[] throwableArray12 = illegalMoveException8.getSuppressed();
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard48 = null;
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard48, color62);
        a1.King king67 = new a1.King(chessBoard0, color62);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece69 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.Knight knight66 = new a1.Knight(chessBoard50, color63);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard67, color69);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard50, color69);
        java.lang.String str73 = bishop72.toString();
        a1.ChessPiece.Color color74 = bishop72.getColor();
        java.util.ArrayList<java.lang.String> strList75 = bishop72.legalMoves();
        java.util.ArrayList<java.lang.String> strList76 = bishop72.legalMoves();
        boolean boolean78 = chessBoard0.placePiece((a1.ChessPiece) bishop72, "hi!");
        a1.ChessPiece.Color color79 = bishop72.getColor();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265d" + "'", str73, "\u265d");
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.lang.String str7 = rook2.toString();
        java.lang.String str8 = rook2.toString();
        java.lang.String str9 = rook2.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard35, color48);
        a1.ChessPiece.Color color52 = pawn51.getColor();
        a1.Rook rook53 = new a1.Rook(chessBoard0, color52);
        java.util.ArrayList<java.lang.String> strList54 = rook53.legalMoves();
        java.util.ArrayList<java.lang.String> strList55 = rook53.legalMoves();
        java.util.ArrayList<java.lang.String> strList56 = rook53.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        java.lang.String str26 = king25.toString();
        java.util.ArrayList<java.lang.String> strList27 = king25.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            king25.setPosition("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265a" + "'", str26, "\u265a");
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.King king66 = new a1.King(chessBoard54, color63);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard0, color63);
        a1.ChessPiece.Color color68 = bishop67.getColor();
        java.lang.String str69 = bishop67.toString();
        java.util.ArrayList<java.lang.String> strList70 = bishop67.legalMoves();
        java.lang.String str71 = bishop67.getPosition();
        java.lang.String str72 = bishop67.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265d" + "'", str72, "\u265d");
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        java.lang.String str63 = king60.toString();
        java.lang.String str64 = king60.toString();
        java.lang.String str65 = king60.toString();
        java.lang.String str66 = king60.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265a" + "'", str63, "\u265a");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265a" + "'", str64, "\u265a");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265a" + "'", str65, "\u265a");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u265a" + "'", str66, "\u265a");
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = null;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        java.lang.String str74 = rook73.toString();
        java.lang.String str75 = rook73.getPosition();
        java.util.ArrayList<java.lang.String> strList76 = rook73.legalMoves();
        java.util.ArrayList<java.lang.String> strList77 = rook73.legalMoves();
        java.util.ArrayList<java.lang.String> strList78 = rook73.legalMoves();
        java.lang.String str79 = rook73.toString();
        boolean boolean81 = chessBoard0.placePiece((a1.ChessPiece) rook73, "\u265c");
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        java.util.ArrayList<java.lang.String> strList85 = rook84.legalMoves();
        java.util.ArrayList<java.lang.String> strList86 = rook84.legalMoves();
        boolean boolean88 = chessBoard0.placePiece((a1.ChessPiece) rook84, "\u265c");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265c" + "'", str74, "\u265c");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265c" + "'", str79, "\u265c");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard35, color57);
        a1.Rook rook62 = new a1.Rook(chessBoard30, color57);
        a1.Rook rook63 = new a1.Rook(chessBoard27, color57);
        a1.ChessPiece.Color color64 = rook63.getColor();
        a1.Knight knight65 = new a1.Knight(chessBoard0, color64);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.King king79 = new a1.King(chessBoard67, color76);
        java.util.ArrayList<java.lang.String> strList80 = king79.legalMoves();
        java.util.ArrayList<java.lang.String> strList81 = king79.legalMoves();
        java.lang.String str82 = king79.toString();
        java.lang.String str83 = king79.toString();
        boolean boolean85 = chessBoard0.placePiece((a1.ChessPiece) king79, "\u265c");
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u265a" + "'", str82, "\u265a");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265a" + "'", str83, "\u265a");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.King king51 = new a1.King(chessBoard39, color48);
        java.util.ArrayList<java.lang.String> strList52 = king51.legalMoves();
        java.util.ArrayList<java.lang.String> strList53 = king51.legalMoves();
        java.lang.String str54 = king51.toString();
        java.util.ArrayList<java.lang.String> strList55 = king51.legalMoves();
        java.lang.String str56 = king51.toString();
        java.util.ArrayList<java.lang.String> strList57 = king51.legalMoves();
        java.lang.String str58 = king51.toString();
        java.lang.String str59 = king51.getPosition();
        java.lang.String str60 = king51.toString();
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king51, "\u265c");
        chessBoard0.initialize();
        chessBoard0.initialize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265a" + "'", str56, "\u265a");
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265a" + "'", str58, "\u265a");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265a" + "'", str60, "\u265a");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList11 = bishop10.legalMoves();
        java.lang.String str12 = bishop10.getPosition();
        java.util.ArrayList<java.lang.String> strList13 = bishop10.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = bishop10.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            bishop10.setPosition("a1.IllegalMoveException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        java.lang.String str71 = king70.toString();
        java.lang.String str72 = king70.toString();
        java.util.ArrayList<java.lang.String> strList73 = king70.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u265a" + "'", str71, "\u265a");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265a" + "'", str72, "\u265a");
        org.junit.Assert.assertNotNull(strList73);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265a", throwable21);
        java.lang.Throwable[] throwableArray24 = illegalMoveException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = illegalMoveException23.getSuppressed();
        java.lang.Throwable throwable29 = null;
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("hi!", throwable29);
        java.lang.Throwable[] throwableArray31 = illegalMoveException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException30.getSuppressed();
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException30);
        java.lang.Throwable[] throwableArray34 = illegalPositionException33.getSuppressed();
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException33);
        illegalMoveException23.addSuppressed((java.lang.Throwable) illegalPositionException33);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException37);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalPositionException37);
        java.lang.Throwable[] throwableArray40 = illegalPositionException37.getSuppressed();
        a1.IllegalPositionException illegalPositionException41 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException37);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalPositionException37);
        java.lang.Throwable throwable50 = null;
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("hi!", throwable50);
        a1.IllegalPositionException illegalPositionException52 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException51);
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException51);
        a1.IllegalPositionException illegalPositionException54 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException51);
        a1.IllegalMoveException illegalMoveException55 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException54);
        a1.IllegalMoveException illegalMoveException56 = new a1.IllegalMoveException("a1.IllegalPositionException: hi!", (java.lang.Throwable) illegalMoveException55);
        a1.IllegalPositionException illegalPositionException57 = new a1.IllegalPositionException("\u2657", (java.lang.Throwable) illegalMoveException56);
        illegalPositionException37.addSuppressed((java.lang.Throwable) illegalPositionException57);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray40);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException10);
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265a", throwable14);
        java.lang.Throwable[] throwableArray17 = illegalMoveException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = illegalMoveException16.getSuppressed();
        illegalPositionException10.addSuppressed((java.lang.Throwable) illegalMoveException16);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException10);
        java.lang.Throwable[] throwableArray21 = illegalMoveException20.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        boolean boolean55 = chessBoard50.placePiece((a1.ChessPiece) rook53, "\u265f");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        chessBoard56.initialize();
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = null;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        java.util.ArrayList<java.lang.String> strList63 = rook62.legalMoves();
        java.util.ArrayList<java.lang.String> strList64 = rook62.legalMoves();
        boolean boolean66 = chessBoard56.placePiece((a1.ChessPiece) rook62, "\u265e");
        a1.ChessPiece.Color color67 = null;
        a1.Rook rook68 = new a1.Rook(chessBoard56, color67);
        a1.ChessBoard chessBoard69 = null;
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard70, color76);
        a1.Knight knight79 = new a1.Knight(chessBoard69, color76);
        java.util.ArrayList<java.lang.String> strList80 = knight79.legalMoves();
        a1.ChessPiece.Color color81 = knight79.getColor();
        a1.Knight knight82 = new a1.Knight(chessBoard56, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard50, color81);
        a1.Rook rook84 = new a1.Rook(chessBoard0, color81);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece63 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = null;
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        java.lang.String str19 = pawn18.toString();
        java.lang.String str20 = pawn18.toString();
        boolean boolean22 = chessBoard9.placePiece((a1.ChessPiece) pawn18, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        boolean boolean28 = chessBoard23.placePiece((a1.ChessPiece) rook26, "\u265f");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard29, color35);
        boolean boolean39 = chessBoard23.placePiece((a1.ChessPiece) knight37, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = null;
        a1.ChessPiece.Color color42 = null;
        a1.Pawn pawn43 = new a1.Pawn(chessBoard41, color42);
        java.lang.String str44 = pawn43.toString();
        boolean boolean46 = chessBoard40.placePiece((a1.ChessPiece) pawn43, "");
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Pawn pawn59 = new a1.Pawn(chessBoard47, color57);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard40, color57);
        a1.King king61 = new a1.King(chessBoard23, color57);
        a1.King king62 = new a1.King(chessBoard9, color57);
        a1.King king63 = new a1.King(chessBoard0, color57);
        java.lang.String str64 = king63.toString();
        java.lang.String str65 = king63.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265f" + "'", str19, "\u265f");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265f" + "'", str20, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265a" + "'", str64, "\u265a");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265a" + "'", str65, "\u265a");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        boolean boolean33 = chessBoard28.placePiece((a1.ChessPiece) rook31, "\u265f");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard34, color40);
        boolean boolean44 = chessBoard28.placePiece((a1.ChessPiece) knight42, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = null;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard48, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Bishop bishop56 = new a1.Bishop(chessBoard48, color54);
        a1.Rook rook57 = new a1.Rook(chessBoard45, color54);
        a1.King king58 = new a1.King(chessBoard28, color54);
        a1.King king59 = new a1.King(chessBoard0, color54);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        boolean boolean66 = chessBoard61.placePiece((a1.ChessPiece) rook64, "\u265f");
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = null;
        a1.ChessPiece.Color color69 = null;
        a1.Pawn pawn70 = new a1.Pawn(chessBoard68, color69);
        java.lang.String str71 = pawn70.toString();
        boolean boolean73 = chessBoard67.placePiece((a1.ChessPiece) pawn70, "");
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.Knight knight83 = new a1.Knight(chessBoard67, color80);
        a1.Knight knight84 = new a1.Knight(chessBoard61, color80);
        a1.ChessPiece.Color color85 = null;
        a1.Pawn pawn86 = new a1.Pawn(chessBoard61, color85);
        java.util.ArrayList<java.lang.String> strList87 = pawn86.legalMoves();
        boolean boolean89 = chessBoard0.placePiece((a1.ChessPiece) pawn86, "\u265e");
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u265f" + "'", str71, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        boolean boolean30 = chessBoard24.placePiece((a1.ChessPiece) pawn27, "");
        java.lang.String str31 = pawn27.getPosition();
        boolean boolean33 = chessBoard0.placePiece((a1.ChessPiece) pawn27, "\u265c");
        java.lang.String str34 = pawn27.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265f" + "'", str34, "\u265f");
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        java.lang.String str52 = rook51.toString();
        java.util.ArrayList<java.lang.String> strList53 = rook51.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u265c" + "'", str52, "\u265c");
        org.junit.Assert.assertNotNull(strList53);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException10);
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        java.lang.Throwable[] throwableArray16 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = illegalMoveException15.getSuppressed();
        java.lang.Throwable throwable22 = null;
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("hi!", throwable22);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException23);
        illegalMoveException15.addSuppressed((java.lang.Throwable) illegalMoveException25);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException25);
        a1.IllegalPositionException illegalPositionException28 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException25);
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException28);
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException29);
        a1.IllegalMoveException illegalMoveException31 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException29);
        java.lang.Throwable throwable36 = null;
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("hi!", throwable36);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException37);
        a1.IllegalMoveException illegalMoveException39 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException37);
        java.lang.Throwable throwable41 = null;
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("hi!", throwable41);
        java.lang.Throwable[] throwableArray43 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray45 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable49 = null;
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("hi!", throwable49);
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException50);
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException50);
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalMoveException52);
        illegalMoveException39.addSuppressed((java.lang.Throwable) illegalMoveException52);
        a1.IllegalPositionException illegalPositionException55 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException52);
        java.lang.Throwable[] throwableArray56 = illegalMoveException52.getSuppressed();
        illegalMoveException31.addSuppressed((java.lang.Throwable) illegalMoveException52);
        a1.IllegalMoveException illegalMoveException58 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException31);
        a1.IllegalMoveException illegalMoveException59 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException31);
        java.lang.String str60 = illegalMoveException59.toString();
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray56);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265e" + "'", str60, "\u265e");
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        java.lang.String str58 = knight57.toString();
        java.lang.String str59 = knight57.toString();
        java.lang.String str60 = knight57.toString();
        java.lang.String str61 = knight57.toString();
        boolean boolean63 = chessBoard0.placePiece((a1.ChessPiece) knight57, "\u265c");
        java.lang.String str64 = knight57.getPosition();
        // The following exception was thrown during execution in test generation
        try {
            knight57.setPosition("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265e" + "'", str58, "\u265e");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265e" + "'", str59, "\u265e");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265e" + "'", str60, "\u265e");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException13);
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalPositionException15);
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable[] throwableArray24 = illegalMoveException23.getSuppressed();
        illegalPositionException15.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("a1.IllegalMoveException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException15);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalPositionException15);
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException33);
        a1.IllegalPositionException illegalPositionException35 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException34);
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException35);
        illegalPositionException27.addSuppressed((java.lang.Throwable) illegalPositionException35);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.Rook rook34 = new a1.Rook(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard22, color44);
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard22, color49);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard0, color49);
        java.util.ArrayList<java.lang.String> strList52 = pawn51.legalMoves();
        java.lang.Class<?> wildcardClass53 = pawn51.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        chessBoard13.initialize();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard36, color38);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Bishop bishop44 = new a1.Bishop(chessBoard36, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard36, color46);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard33, color46);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard13, color46);
        a1.Knight knight51 = new a1.Knight(chessBoard8, color46);
        a1.King king52 = new a1.King(chessBoard0, color46);
        java.lang.String str53 = king52.toString();
        a1.ChessPiece.Color color54 = king52.getColor();
        java.lang.String str55 = king52.getPosition();
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265a" + "'", str53, "\u265a");
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = bishop8.getColor();
        java.util.ArrayList<java.lang.String> strList10 = bishop8.legalMoves();
        java.util.ArrayList<java.lang.String> strList11 = bishop8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.toString();
        a1.ChessPiece.Color color7 = rook2.getColor();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNull(color7);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        java.lang.String str23 = bishop22.toString();
        a1.ChessPiece.Color color24 = bishop22.getColor();
        java.util.ArrayList<java.lang.String> strList25 = bishop22.legalMoves();
        java.util.ArrayList<java.lang.String> strList26 = bishop22.legalMoves();
        java.lang.String str27 = bishop22.getPosition();
        java.lang.String str28 = bishop22.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265d" + "'", str23, "\u265d");
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265d" + "'", str28, "\u265d");
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.lang.String str9 = pawn3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList11 = bishop10.legalMoves();
        java.lang.String str12 = bishop10.getPosition();
        java.util.ArrayList<java.lang.String> strList13 = bishop10.legalMoves();
        java.lang.String str14 = bishop10.toString();
        java.lang.String str15 = bishop10.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265d" + "'", str14, "\u265d");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265d" + "'", str15, "\u265d");
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException11);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException22);
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        a1.IllegalPositionException illegalPositionException29 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException28);
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException28);
        java.lang.Throwable[] throwableArray31 = illegalMoveException28.getSuppressed();
        illegalMoveException23.addSuppressed((java.lang.Throwable) illegalMoveException28);
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalPositionException33);
        illegalMoveException14.addSuppressed((java.lang.Throwable) illegalPositionException33);
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable15 = null;
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("hi!", throwable15);
        java.lang.Throwable[] throwableArray17 = illegalMoveException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = illegalMoveException16.getSuppressed();
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException16);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException16);
        java.lang.Throwable[] throwableArray21 = illegalMoveException16.getSuppressed();
        java.lang.Throwable throwable24 = null;
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("hi!", throwable24);
        java.lang.Throwable[] throwableArray26 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = illegalMoveException25.getSuppressed();
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException33);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException33);
        illegalMoveException25.addSuppressed((java.lang.Throwable) illegalMoveException35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException35);
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("\u265a", throwable40);
        java.lang.Throwable[] throwableArray43 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable48 = null;
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("hi!", throwable48);
        java.lang.Throwable[] throwableArray50 = illegalMoveException49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = illegalMoveException49.getSuppressed();
        a1.IllegalPositionException illegalPositionException52 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException49);
        java.lang.Throwable[] throwableArray53 = illegalPositionException52.getSuppressed();
        a1.IllegalMoveException illegalMoveException54 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException52);
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalPositionException52);
        illegalPositionException37.addSuppressed((java.lang.Throwable) illegalPositionException52);
        illegalMoveException16.addSuppressed((java.lang.Throwable) illegalPositionException52);
        a1.IllegalMoveException illegalMoveException58 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException16);
        a1.IllegalPositionException illegalPositionException59 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException58);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalPositionException59);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.lang.String str7 = rook2.toString();
        java.lang.String str8 = rook2.toString();
        java.lang.String str9 = rook2.toString();
        java.lang.String str10 = rook2.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265c" + "'", str10, "\u265c");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        java.lang.Throwable throwable1 = null;
        a1.IllegalPositionException illegalPositionException2 = new a1.IllegalPositionException("\u265e", throwable1);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Bishop bishop25 = new a1.Bishop(chessBoard17, color23);
        a1.King king26 = new a1.King(chessBoard14, color23);
        a1.ChessBoard chessBoard27 = null;
        a1.ChessPiece.Color color28 = null;
        a1.Pawn pawn29 = new a1.Pawn(chessBoard27, color28);
        java.util.ArrayList<java.lang.String> strList30 = pawn29.legalMoves();
        boolean boolean32 = chessBoard14.placePiece((a1.ChessPiece) pawn29, "\u265e");
        chessBoard14.initialize();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard14, color47);
        java.util.ArrayList<java.lang.String> strList52 = pawn51.legalMoves();
        java.lang.String str53 = pawn51.toString();
        boolean boolean55 = chessBoard0.placePiece((a1.ChessPiece) pawn51, "\u265f");
        java.lang.String str56 = pawn51.toString();
        java.lang.String str57 = pawn51.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265f" + "'", str56, "\u265f");
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        boolean boolean33 = chessBoard28.placePiece((a1.ChessPiece) rook31, "\u265f");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard34, color40);
        boolean boolean44 = chessBoard28.placePiece((a1.ChessPiece) knight42, "");
        chessBoard28.initialize();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = null;
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.Knight knight66 = new a1.Knight(chessBoard50, color63);
        a1.Knight knight67 = new a1.Knight(chessBoard49, color63);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard46, color63);
        a1.King king69 = new a1.King(chessBoard28, color63);
        a1.Knight knight70 = new a1.Knight(chessBoard0, color63);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u2658", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        boolean boolean12 = chessBoard7.placePiece((a1.ChessPiece) rook10, "\u265f");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard13, color19);
        boolean boolean23 = chessBoard7.placePiece((a1.ChessPiece) knight21, "");
        a1.ChessPiece.Color color24 = knight21.getColor();
        a1.King king25 = new a1.King(chessBoard0, color24);
        // The following exception was thrown during execution in test generation
        try {
            king25.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        java.util.ArrayList<java.lang.String> strList8 = rook7.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook7.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = rook7.legalMoves();
        java.lang.String str11 = rook7.getPosition();
        java.lang.String str12 = rook7.toString();
        boolean boolean14 = chessBoard0.placePiece((a1.ChessPiece) rook7, "");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece16 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265c" + "'", str12, "\u265c");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        java.lang.String str63 = king60.toString();
        java.util.ArrayList<java.lang.String> strList64 = king60.legalMoves();
        java.util.ArrayList<java.lang.String> strList65 = king60.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265a" + "'", str63, "\u265a");
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strList65);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        a1.ChessPiece.Color color59 = null;
        a1.Knight knight60 = new a1.Knight(chessBoard0, color59);
        chessBoard0.initialize();
        chessBoard0.initialize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard35, color57);
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard35, color62);
        a1.Rook rook64 = new a1.Rook(chessBoard0, color62);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard66 = null;
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = null;
        a1.ChessPiece.Color color69 = null;
        a1.Pawn pawn70 = new a1.Pawn(chessBoard68, color69);
        java.lang.String str71 = pawn70.toString();
        boolean boolean73 = chessBoard67.placePiece((a1.ChessPiece) pawn70, "");
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.Knight knight83 = new a1.Knight(chessBoard67, color80);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Knight knight88 = new a1.Knight(chessBoard84, color86);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard67, color86);
        a1.Rook rook90 = new a1.Rook(chessBoard66, color86);
        a1.Bishop bishop91 = new a1.Bishop(chessBoard0, color86);
        chessBoard0.initialize();
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u265f" + "'", str71, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Bishop bishop21 = new a1.Bishop(chessBoard13, color19);
        a1.Knight knight22 = new a1.Knight(chessBoard6, color19);
        a1.Knight knight23 = new a1.Knight(chessBoard0, color19);
        chessBoard0.initialize();
        a1.ChessPiece.Color color25 = null;
        a1.Rook rook26 = new a1.Rook(chessBoard0, color25);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard18, color24);
        a1.King king27 = new a1.King(chessBoard15, color24);
        a1.ChessBoard chessBoard28 = null;
        a1.ChessPiece.Color color29 = null;
        a1.Pawn pawn30 = new a1.Pawn(chessBoard28, color29);
        java.util.ArrayList<java.lang.String> strList31 = pawn30.legalMoves();
        boolean boolean33 = chessBoard15.placePiece((a1.ChessPiece) pawn30, "\u265e");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Bishop bishop42 = new a1.Bishop(chessBoard34, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Pawn pawn46 = new a1.Pawn(chessBoard34, color44);
        java.lang.String str47 = pawn46.getPosition();
        a1.ChessPiece.Color color48 = pawn46.getColor();
        a1.Pawn pawn49 = new a1.Pawn(chessBoard15, color48);
        a1.Rook rook50 = new a1.Rook(chessBoard0, color48);
        chessBoard0.initialize();
        chessBoard0.initialize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard35, color48);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = null;
        a1.ChessPiece.Color color54 = null;
        a1.Pawn pawn55 = new a1.Pawn(chessBoard53, color54);
        java.lang.String str56 = pawn55.toString();
        boolean boolean58 = chessBoard52.placePiece((a1.ChessPiece) pawn55, "");
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Knight knight63 = new a1.Knight(chessBoard59, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard59, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard59, color69);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard52, color69);
        java.util.ArrayList<java.lang.String> strList73 = bishop72.legalMoves();
        a1.ChessPiece.Color color74 = bishop72.getColor();
        a1.Knight knight75 = new a1.Knight(chessBoard35, color74);
        a1.Pawn pawn76 = new a1.Pawn(chessBoard0, color74);
        java.util.ArrayList<java.lang.String> strList77 = pawn76.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265f" + "'", str56, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList77);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException11);
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable throwable25 = null;
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", throwable25);
        java.lang.Throwable[] throwableArray27 = illegalMoveException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = illegalMoveException26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = illegalMoveException26.getSuppressed();
        java.lang.Throwable throwable33 = null;
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("hi!", throwable33);
        a1.IllegalPositionException illegalPositionException35 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException34);
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException34);
        illegalMoveException26.addSuppressed((java.lang.Throwable) illegalMoveException36);
        illegalMoveException23.addSuppressed((java.lang.Throwable) illegalMoveException36);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException39);
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalPositionException39);
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("a1.IllegalMoveException: ", (java.lang.Throwable) illegalMoveException41);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException42);
        java.lang.Throwable[] throwableArray44 = illegalMoveException42.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList37 = rook36.legalMoves();
        a1.ChessPiece.Color color38 = rook36.getColor();
        java.util.ArrayList<java.lang.String> strList39 = rook36.legalMoves();
        java.util.ArrayList<java.lang.String> strList40 = rook36.legalMoves();
        java.util.ArrayList<java.lang.String> strList41 = rook36.legalMoves();
        java.util.ArrayList<java.lang.String> strList42 = rook36.legalMoves();
        java.lang.String str43 = rook36.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265c" + "'", str43, "\u265c");
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.lang.String str9 = bishop8.toString();
        java.lang.String str10 = bishop8.toString();
        java.util.ArrayList<java.lang.String> strList11 = bishop8.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = bishop8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265d" + "'", str9, "\u265d");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265d" + "'", str10, "\u265d");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.ChessPiece.Color color30 = null;
        a1.Bishop bishop31 = new a1.Bishop(chessBoard21, color30);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Knight knight36 = new a1.Knight(chessBoard32, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard32, color38);
        boolean boolean42 = chessBoard21.placePiece((a1.ChessPiece) knight40, "a1.IllegalMoveException: hi!");
        java.util.ArrayList<java.lang.String> strList43 = knight40.legalMoves();
        java.util.ArrayList<java.lang.String> strList44 = knight40.legalMoves();
        java.util.ArrayList<java.lang.String> strList45 = knight40.legalMoves();
        a1.ChessPiece.Color color46 = knight40.getColor();
        a1.Pawn pawn47 = new a1.Pawn(chessBoard0, color46);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessBoard chessBoard46 = null;
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = null;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Knight knight54 = new a1.Knight(chessBoard50, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard50, color56);
        a1.Rook rook59 = new a1.Rook(chessBoard47, color56);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = null;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard63, color69);
        a1.Rook rook72 = new a1.Rook(chessBoard60, color69);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard47, color69);
        a1.King king74 = new a1.King(chessBoard46, color69);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard45, color69);
        a1.Rook rook76 = new a1.Rook(chessBoard0, color69);
        java.util.ArrayList<java.lang.String> strList77 = rook76.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList77);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = bishop20.legalMoves();
        java.lang.String str23 = bishop20.getPosition();
        java.lang.String str24 = bishop20.toString();
        java.util.ArrayList<java.lang.String> strList25 = bishop20.legalMoves();
        java.lang.String str26 = bishop20.toString();
        java.util.ArrayList<java.lang.String> strList27 = bishop20.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265d" + "'", str24, "\u265d");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265d" + "'", str26, "\u265d");
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Bishop bishop14 = new a1.Bishop(chessBoard6, color12);
        a1.Rook rook15 = new a1.Rook(chessBoard3, color12);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str17 = pawn16.toString();
        java.util.ArrayList<java.lang.String> strList18 = pawn16.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.Knight knight29 = new a1.Knight(chessBoard13, color26);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.Bishop bishop35 = new a1.Bishop(chessBoard13, color32);
        java.lang.String str36 = bishop35.toString();
        a1.ChessPiece.Color color37 = bishop35.getColor();
        boolean boolean39 = chessBoard0.placePiece((a1.ChessPiece) bishop35, "\u265c");
        a1.ChessPiece.Color color40 = bishop35.getColor();
        java.lang.String str41 = bishop35.toString();
        java.lang.String str42 = bishop35.toString();
        java.util.ArrayList<java.lang.String> strList43 = bishop35.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265d" + "'", str41, "\u265d");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265d" + "'", str42, "\u265d");
        org.junit.Assert.assertNotNull(strList43);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard41, color47);
        java.util.ArrayList<java.lang.String> strList50 = knight49.legalMoves();
        java.lang.String str51 = knight49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) knight49, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        boolean boolean60 = chessBoard55.placePiece((a1.ChessPiece) rook58, "\u265f");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = null;
        a1.ChessPiece.Color color63 = null;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard62, color63);
        java.lang.String str65 = pawn64.toString();
        boolean boolean67 = chessBoard61.placePiece((a1.ChessPiece) pawn64, "");
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Knight knight72 = new a1.Knight(chessBoard68, color70);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Bishop bishop76 = new a1.Bishop(chessBoard68, color74);
        a1.Knight knight77 = new a1.Knight(chessBoard61, color74);
        a1.Knight knight78 = new a1.Knight(chessBoard55, color74);
        a1.King king79 = new a1.King(chessBoard54, color74);
        java.lang.String str80 = king79.toString();
        java.util.ArrayList<java.lang.String> strList81 = king79.legalMoves();
        java.util.ArrayList<java.lang.String> strList82 = king79.legalMoves();
        java.util.ArrayList<java.lang.String> strList83 = king79.legalMoves();
        a1.ChessPiece.Color color84 = king79.getColor();
        a1.Pawn pawn85 = new a1.Pawn(chessBoard0, color84);
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265e" + "'", str51, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265f" + "'", str65, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u265a" + "'", str80, "\u265a");
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.lang.String str4 = pawn2.toString();
        a1.ChessPiece.Color color5 = pawn2.getColor();
        java.lang.String str6 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList7 = pawn2.legalMoves();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertNull(color5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265f" + "'", str6, "\u265f");
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("\u265a", throwable3);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray16 = illegalPositionException15.getSuppressed();
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException15);
        illegalMoveException5.addSuppressed((java.lang.Throwable) illegalPositionException15);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable28 = null;
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("hi!", throwable28);
        a1.IllegalPositionException illegalPositionException30 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException29);
        a1.IllegalMoveException illegalMoveException31 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException29);
        java.lang.Throwable throwable33 = null;
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("hi!", throwable33);
        java.lang.Throwable[] throwableArray35 = illegalMoveException34.getSuppressed();
        java.lang.Throwable[] throwableArray36 = illegalMoveException34.getSuppressed();
        java.lang.Throwable[] throwableArray37 = illegalMoveException34.getSuppressed();
        java.lang.Throwable throwable41 = null;
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("hi!", throwable41);
        a1.IllegalPositionException illegalPositionException43 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException42);
        a1.IllegalMoveException illegalMoveException44 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException42);
        illegalMoveException34.addSuppressed((java.lang.Throwable) illegalMoveException44);
        illegalMoveException31.addSuppressed((java.lang.Throwable) illegalMoveException44);
        a1.IllegalPositionException illegalPositionException47 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException31);
        a1.IllegalMoveException illegalMoveException48 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException47);
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalPositionException47);
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("a1.IllegalMoveException: ", (java.lang.Throwable) illegalMoveException49);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException49);
        illegalPositionException19.addSuppressed((java.lang.Throwable) illegalMoveException51);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        java.lang.String str24 = pawn20.getPosition();
        boolean boolean26 = chessBoard0.placePiece((a1.ChessPiece) pawn20, "a1.IllegalMoveException: hi!");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = null;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Bishop bishop42 = new a1.Bishop(chessBoard34, color40);
        a1.Rook rook43 = new a1.Rook(chessBoard31, color40);
        a1.Pawn pawn44 = new a1.Pawn(chessBoard28, color40);
        a1.Knight knight45 = new a1.Knight(chessBoard0, color40);
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard20, color29);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard31, color37);
        boolean boolean41 = chessBoard20.placePiece((a1.ChessPiece) knight39, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard20.placePiece((a1.ChessPiece) knight50, "\u265e");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Knight knight69 = new a1.Knight(chessBoard53, color66);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = null;
        a1.ChessPiece.Color color72 = null;
        a1.Pawn pawn73 = new a1.Pawn(chessBoard71, color72);
        java.lang.String str74 = pawn73.toString();
        boolean boolean76 = chessBoard70.placePiece((a1.ChessPiece) pawn73, "");
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Knight knight81 = new a1.Knight(chessBoard77, color79);
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard77, color83);
        a1.ChessBoard chessBoard86 = new a1.ChessBoard();
        a1.ChessPiece.Color color87 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook88 = new a1.Rook(chessBoard86, color87);
        a1.Pawn pawn89 = new a1.Pawn(chessBoard77, color87);
        a1.Bishop bishop90 = new a1.Bishop(chessBoard70, color87);
        a1.King king91 = new a1.King(chessBoard53, color87);
        a1.Rook rook92 = new a1.Rook(chessBoard20, color87);
        a1.King king93 = new a1.King(chessBoard0, color87);
        java.util.ArrayList<java.lang.String> strList94 = king93.legalMoves();
        java.lang.String str95 = king93.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265f" + "'", str74, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "\u265a" + "'", str95, "\u265a");
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        a1.ChessPiece.Color color37 = rook36.getColor();
        java.util.ArrayList<java.lang.String> strList38 = rook36.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard4, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Bishop bishop12 = new a1.Bishop(chessBoard4, color10);
        a1.Rook rook13 = new a1.Rook(chessBoard1, color10);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.Rook rook31 = new a1.Rook(chessBoard19, color28);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.Rook rook44 = new a1.Rook(chessBoard32, color41);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard19, color41);
        a1.Rook rook46 = new a1.Rook(chessBoard14, color41);
        a1.Rook rook47 = new a1.Rook(chessBoard1, color41);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard0, color41);
        java.util.ArrayList<java.lang.String> strList49 = pawn48.legalMoves();
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList49);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = pawn2.legalMoves();
        java.lang.String str8 = pawn2.getPosition();
        java.util.ArrayList<java.lang.String> strList9 = pawn2.legalMoves();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.King king30 = new a1.King(chessBoard18, color27);
        a1.ChessBoard chessBoard31 = null;
        a1.ChessPiece.Color color32 = null;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard31, color32);
        java.util.ArrayList<java.lang.String> strList34 = pawn33.legalMoves();
        boolean boolean36 = chessBoard18.placePiece((a1.ChessPiece) pawn33, "\u265e");
        chessBoard18.initialize();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard41, color51);
        a1.Pawn pawn54 = new a1.Pawn(chessBoard38, color51);
        a1.Pawn pawn55 = new a1.Pawn(chessBoard18, color51);
        a1.Knight knight56 = new a1.Knight(chessBoard13, color51);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.King king69 = new a1.King(chessBoard57, color66);
        a1.ChessBoard chessBoard70 = null;
        a1.ChessPiece.Color color71 = null;
        a1.Pawn pawn72 = new a1.Pawn(chessBoard70, color71);
        java.util.ArrayList<java.lang.String> strList73 = pawn72.legalMoves();
        boolean boolean75 = chessBoard57.placePiece((a1.ChessPiece) pawn72, "\u265e");
        chessBoard57.initialize();
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Knight knight84 = new a1.Knight(chessBoard80, color82);
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard80, color86);
        a1.ChessBoard chessBoard89 = new a1.ChessBoard();
        a1.ChessPiece.Color color90 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook91 = new a1.Rook(chessBoard89, color90);
        a1.Pawn pawn92 = new a1.Pawn(chessBoard80, color90);
        a1.Pawn pawn93 = new a1.Pawn(chessBoard77, color90);
        a1.Pawn pawn94 = new a1.Pawn(chessBoard57, color90);
        a1.Rook rook95 = new a1.Rook(chessBoard13, color90);
        a1.Pawn pawn96 = new a1.Pawn(chessBoard0, color90);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
    }
}
