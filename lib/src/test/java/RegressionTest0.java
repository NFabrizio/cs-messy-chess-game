import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.String str3 = illegalMoveException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str3, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalMoveException: hi!", "a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("hi!", "a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        // The following exception was thrown during execution in test generation
        try {
            rook2.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece6 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = illegalMoveException2.getSuppressed();
        java.lang.String str5 = illegalMoveException2.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str5, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        java.lang.Throwable[] throwableArray7 = illegalMoveException6.getSuppressed();
        illegalMoveException2.addSuppressed((java.lang.Throwable) illegalMoveException6);
        java.lang.String str9 = illegalMoveException2.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str9, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            pawn2.setPosition("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        java.lang.Throwable[] throwableArray7 = illegalMoveException6.getSuppressed();
        illegalMoveException2.addSuppressed((java.lang.Throwable) illegalMoveException6);
        java.lang.String str9 = illegalMoveException6.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str9, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.lang.Class<?> wildcardClass13 = king12.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        // The following exception was thrown during execution in test generation
        try {
            king53.setPosition("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece18 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.lang.String str5 = pawn2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException5);
        java.lang.String str9 = illegalPositionException8.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "a1.IllegalPositionException: " + "'", str9, "a1.IllegalPositionException: ");
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        java.util.ArrayList<java.lang.String> strList17 = knight14.legalMoves();
        java.lang.Class<?> wildcardClass18 = knight14.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.lang.String str6 = knight4.toString();
        java.lang.String str7 = knight4.toString();
        // The following exception was thrown during execution in test generation
        try {
            knight4.setPosition("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265e" + "'", str6, "\u265e");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265e" + "'", str7, "\u265e");
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        // The following exception was thrown during execution in test generation
        try {
            pawn9.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece23 = chessBoard0.getPiece("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece15 = chessBoard0.getPiece("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard23, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Pawn pawn35 = new a1.Pawn(chessBoard23, color33);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard20, color33);
        a1.Pawn pawn37 = new a1.Pawn(chessBoard0, color33);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece39 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalMoveException: hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException4);
        java.lang.String str7 = illegalMoveException6.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.Class<?> wildcardClass5 = rook2.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = null;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Rook rook49 = new a1.Rook(chessBoard37, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = null;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard53, color59);
        a1.Rook rook62 = new a1.Rook(chessBoard50, color59);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard37, color59);
        a1.Knight knight64 = new a1.Knight(chessBoard0, color59);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.lang.String str5 = pawn2.toString();
        // The following exception was thrown during execution in test generation
        try {
            pawn2.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.lang.String str13 = king12.toString();
        java.lang.String str14 = king12.toString();
        // The following exception was thrown during execution in test generation
        try {
            king12.setPosition("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265a" + "'", str13, "\u265a");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265a" + "'", str14, "\u265a");
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265a", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        java.lang.Throwable[] throwableArray8 = illegalMoveException7.getSuppressed();
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException7);
        java.lang.String str11 = illegalPositionException10.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265c" + "'", str11, "\u265c");
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece6 = chessBoard0.getPiece("a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList9 = bishop8.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = bishop8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece24 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.lang.String str14 = king12.toString();
        java.lang.String str15 = king12.getPosition();
        // The following exception was thrown during execution in test generation
        try {
            king12.setPosition("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265a" + "'", str14, "\u265a");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList35 = pawn34.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            pawn34.setPosition("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.lang.String str15 = pawn9.toString();
        a1.ChessPiece.Color color16 = pawn9.getColor();
        java.util.ArrayList<java.lang.String> strList17 = pawn9.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265f" + "'", str15, "\u265f");
        org.junit.Assert.assertNull(color16);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.getPosition();
        // The following exception was thrown during execution in test generation
        try {
            pawn2.setPosition("a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        java.lang.Class<?> wildcardClass17 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("", "\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece55 = chessBoard0.getPiece("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece38 = chessBoard0.getPiece("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        java.lang.Class<?> wildcardClass44 = knight43.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.toString();
        java.lang.Class<?> wildcardClass8 = pawn3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Class<?> wildcardClass8 = throwableArray7.getClass();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        java.lang.Class<?> wildcardClass39 = color34.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece24 = chessBoard0.getPiece("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.lang.String str13 = king12.toString();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265a" + "'", str13, "\u265a");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece21 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.Class<?> wildcardClass4 = rook2.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.King king66 = new a1.King(chessBoard54, color63);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard0, color63);
        // The following exception was thrown during execution in test generation
        try {
            bishop67.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece18 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        // The following exception was thrown during execution in test generation
        try {
            rook2.setPosition("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        java.lang.String str6 = rook3.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.toString();
        a1.ChessPiece.Color color7 = rook2.getColor();
        // The following exception was thrown during execution in test generation
        try {
            rook2.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("", "\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.Class<?> wildcardClass5 = strList4.getClass();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = knight18.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = knight18.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Knight knight9 = new a1.Knight(chessBoard1, color7);
        a1.Knight knight10 = new a1.Knight(chessBoard0, color7);
        java.util.ArrayList<java.lang.String> strList11 = knight10.legalMoves();
        java.lang.Class<?> wildcardClass12 = knight10.getClass();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        // The following exception was thrown during execution in test generation
        try {
            pawn2.setPosition("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        java.lang.String str41 = knight40.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265e" + "'", str41, "\u265e");
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException3);
        java.lang.String str8 = illegalPositionException7.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265d" + "'", str8, "\u265d");
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException24);
        java.lang.String str26 = illegalPositionException24.toString();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "a1.IllegalPositionException: a1.IllegalMoveException: hi!" + "'", str26, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessPiece.Color color48 = null;
        a1.Bishop bishop49 = new a1.Bishop(chessBoard39, color48);
        java.lang.String str50 = bishop49.toString();
        java.lang.String str51 = bishop49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) bishop49, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265d" + "'", str50, "\u265d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265d" + "'", str51, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            rook2.setPosition("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.King king66 = new a1.King(chessBoard54, color63);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard0, color63);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece69 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        java.util.ArrayList<java.lang.String> strList13 = pawn12.legalMoves();
        java.lang.String str14 = pawn12.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException3);
        java.lang.String str7 = illegalMoveException3.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str7, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.King king44 = new a1.King(chessBoard32, color41);
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.util.ArrayList<java.lang.String> strList48 = pawn47.legalMoves();
        boolean boolean50 = chessBoard32.placePiece((a1.ChessPiece) pawn47, "\u265e");
        chessBoard32.initialize();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard52, color65);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard32, color65);
        a1.Knight knight70 = new a1.Knight(chessBoard27, color65);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color65);
        // The following exception was thrown during execution in test generation
        try {
            rook71.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        java.lang.Class<?> wildcardClass13 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.lang.String str5 = rook2.getPosition();
        java.lang.Class<?> wildcardClass6 = rook2.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.util.ArrayList<java.lang.String> strList7 = pawn3.legalMoves();
        a1.ChessPiece.Color color8 = pawn3.getColor();
        java.lang.Class<?> wildcardClass9 = pawn3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece60 = chessBoard0.getPiece("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        java.lang.String str13 = pawn12.getPosition();
        java.lang.Class<?> wildcardClass14 = pawn12.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException7.getSuppressed();
        illegalMoveException2.addSuppressed((java.lang.Throwable) illegalMoveException7);
        java.lang.String str11 = illegalMoveException7.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str11, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        java.lang.Class<?> wildcardClass52 = rook51.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList11 = bishop10.legalMoves();
        java.lang.String str12 = bishop10.getPosition();
        // The following exception was thrown during execution in test generation
        try {
            bishop10.setPosition("a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable[] throwableArray7 = illegalPositionException6.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException12);
        illegalPositionException6.addSuppressed((java.lang.Throwable) illegalMoveException12);
        java.lang.Class<?> wildcardClass16 = illegalMoveException12.getClass();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.lang.String str7 = rook2.toString();
        java.lang.String str8 = rook2.toString();
        // The following exception was thrown during execution in test generation
        try {
            rook2.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        java.lang.String str44 = knight43.getPosition();
        java.util.ArrayList<java.lang.String> strList45 = knight43.legalMoves();
        a1.ChessPiece.Color color46 = knight43.getColor();
        java.lang.String str47 = knight43.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u265e" + "'", str47, "\u265e");
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        java.lang.String str44 = knight43.getPosition();
        java.util.ArrayList<java.lang.String> strList45 = knight43.legalMoves();
        java.util.ArrayList<java.lang.String> strList46 = knight43.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList46);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        java.lang.String str22 = bishop20.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        java.lang.String str6 = rook5.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        java.lang.String str8 = rook5.toString();
        java.lang.String str9 = rook5.toString();
        a1.ChessPiece.Color color10 = rook5.getColor();
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece13 = chessBoard0.getPiece("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color4 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color4.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.lang.String str38 = pawn37.toString();
        boolean boolean40 = chessBoard34.placePiece((a1.ChessPiece) pawn37, "");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard41, color51);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard34, color51);
        java.util.ArrayList<java.lang.String> strList55 = bishop54.legalMoves();
        a1.ChessPiece.Color color56 = bishop54.getColor();
        a1.Knight knight57 = new a1.Knight(chessBoard17, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard0, color56);
        java.lang.String str59 = knight58.toString();
        java.util.ArrayList<java.lang.String> strList60 = knight58.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265e" + "'", str59, "\u265e");
        org.junit.Assert.assertNotNull(strList60);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece38 = chessBoard0.getPiece("a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece74 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard18, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Pawn pawn30 = new a1.Pawn(chessBoard18, color28);
        a1.Pawn pawn31 = new a1.Pawn(chessBoard15, color28);
        a1.ChessPiece.Color color32 = pawn31.getColor();
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        // The following exception was thrown during execution in test generation
        try {
            bishop33.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        java.lang.Throwable[] throwableArray11 = illegalMoveException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = illegalMoveException10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException10.getSuppressed();
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException18);
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException20);
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalMoveException20);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException20);
        java.lang.Throwable[] throwableArray24 = illegalPositionException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = illegalPositionException23.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        java.lang.Throwable[] throwableArray8 = illegalMoveException7.getSuppressed();
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException3);
        java.lang.String str11 = illegalMoveException10.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265d" + "'", str11, "\u265d");
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        boolean boolean10 = chessBoard0.placePiece((a1.ChessPiece) rook6, "\u265e");
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Rook rook23 = new a1.Rook(chessBoard11, color20);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Bishop bishop35 = new a1.Bishop(chessBoard27, color33);
        a1.Rook rook36 = new a1.Rook(chessBoard24, color33);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard11, color33);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = null;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.King king55 = new a1.King(chessBoard43, color52);
        a1.ChessBoard chessBoard56 = null;
        a1.ChessPiece.Color color57 = null;
        a1.Pawn pawn58 = new a1.Pawn(chessBoard56, color57);
        java.util.ArrayList<java.lang.String> strList59 = pawn58.legalMoves();
        boolean boolean61 = chessBoard43.placePiece((a1.ChessPiece) pawn58, "\u265e");
        chessBoard43.initialize();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard66, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Pawn pawn78 = new a1.Pawn(chessBoard66, color76);
        a1.Pawn pawn79 = new a1.Pawn(chessBoard63, color76);
        a1.Pawn pawn80 = new a1.Pawn(chessBoard43, color76);
        a1.Knight knight81 = new a1.Knight(chessBoard38, color76);
        a1.Rook rook82 = new a1.Rook(chessBoard11, color76);
        a1.Knight knight83 = new a1.Knight(chessBoard0, color76);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece85 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        java.lang.String str58 = knight57.toString();
        java.lang.String str59 = knight57.toString();
        java.lang.String str60 = knight57.toString();
        java.lang.String str61 = knight57.toString();
        boolean boolean63 = chessBoard0.placePiece((a1.ChessPiece) knight57, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: ", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265e" + "'", str58, "\u265e");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265e" + "'", str59, "\u265e");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265e" + "'", str60, "\u265e");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Class<?> wildcardClass4 = throwableArray3.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException5);
        java.lang.Class<?> wildcardClass9 = illegalMoveException8.getClass();
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        java.lang.String str22 = bishop20.toString();
        java.util.ArrayList<java.lang.String> strList23 = bishop20.legalMoves();
        java.lang.String str24 = bishop20.getPosition();
        // The following exception was thrown during execution in test generation
        try {
            bishop20.setPosition("a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265d" + "'", str22, "\u265d");
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessPiece.Color color48 = null;
        a1.Bishop bishop49 = new a1.Bishop(chessBoard39, color48);
        java.lang.String str50 = bishop49.toString();
        java.lang.String str51 = bishop49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) bishop49, "\u265c");
        java.lang.String str54 = bishop49.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265d" + "'", str50, "\u265d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265d" + "'", str51, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265d" + "'", str54, "\u265d");
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("\u265a", throwable2);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        a1.IllegalPositionException illegalPositionException14 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException11);
        java.lang.Throwable[] throwableArray15 = illegalPositionException14.getSuppressed();
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException14);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException14);
        java.lang.String str18 = illegalPositionException14.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "a1.IllegalPositionException: a1.IllegalPositionException: " + "'", str18, "a1.IllegalPositionException: a1.IllegalPositionException: ");
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: ", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str21 = bishop20.toString();
        java.lang.String str22 = bishop20.getPosition();
        java.lang.String str23 = bishop20.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265d" + "'", str21, "\u265d");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265d" + "'", str23, "\u265d");
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.lang.String str14 = king12.toString();
        // The following exception was thrown during execution in test generation
        try {
            king12.setPosition("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265a" + "'", str14, "\u265a");
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        // The following exception was thrown during execution in test generation
        try {
            pawn12.setPosition("a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: ", "\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.lang.String str6 = knight4.toString();
        java.lang.String str7 = knight4.toString();
        java.lang.String str8 = knight4.toString();
        java.lang.String str9 = knight4.getPosition();
        // The following exception was thrown during execution in test generation
        try {
            knight4.setPosition("a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265e" + "'", str6, "\u265e");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265e" + "'", str7, "\u265e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            pawn2.setPosition("a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece49 = chessBoard0.getPiece("a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        java.lang.Throwable[] throwableArray8 = illegalMoveException7.getSuppressed();
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException3);
        java.lang.String str11 = illegalMoveException3.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str11, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = knight4.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = knight4.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            knight4.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece14 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Bishop bishop14 = new a1.Bishop(chessBoard6, color12);
        a1.Rook rook15 = new a1.Rook(chessBoard3, color12);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color12);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = null;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.Rook rook37 = new a1.Rook(chessBoard25, color34);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard25, color47);
        a1.Rook rook52 = new a1.Rook(chessBoard20, color47);
        a1.Rook rook53 = new a1.Rook(chessBoard17, color47);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.Rook rook66 = new a1.Rook(chessBoard54, color63);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.Rook rook79 = new a1.Rook(chessBoard67, color76);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard54, color76);
        a1.Knight knight81 = new a1.Knight(chessBoard17, color76);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color76);
        java.lang.String str83 = rook82.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        java.lang.Class<?> wildcardClass17 = color13.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("hi!", "\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        // The following exception was thrown during execution in test generation
        try {
            rook2.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.lang.String str14 = king12.toString();
        java.lang.String str15 = king12.getPosition();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265a" + "'", str14, "\u265a");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard18, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Pawn pawn30 = new a1.Pawn(chessBoard18, color28);
        a1.Pawn pawn31 = new a1.Pawn(chessBoard15, color28);
        a1.ChessPiece.Color color32 = pawn31.getColor();
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        java.lang.String str34 = bishop33.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265d" + "'", str34, "\u265d");
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        java.util.ArrayList<java.lang.String> strList27 = bishop26.legalMoves();
        java.lang.String str28 = bishop26.toString();
        java.util.ArrayList<java.lang.String> strList29 = bishop26.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265d" + "'", str28, "\u265d");
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Bishop bishop14 = new a1.Bishop(chessBoard6, color12);
        a1.Rook rook15 = new a1.Rook(chessBoard3, color12);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color12);
        a1.ChessPiece.Color color17 = pawn16.getColor();
        java.lang.String str18 = pawn16.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Knight knight38 = new a1.Knight(chessBoard22, color35);
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight40 = new a1.Knight(chessBoard22, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = null;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.Rook rook61 = new a1.Rook(chessBoard49, color58);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.Rook rook74 = new a1.Rook(chessBoard62, color71);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard49, color71);
        a1.Rook rook76 = new a1.Rook(chessBoard44, color71);
        a1.Rook rook77 = new a1.Rook(chessBoard41, color71);
        java.util.ArrayList<java.lang.String> strList78 = rook77.legalMoves();
        a1.ChessPiece.Color color79 = rook77.getColor();
        a1.Pawn pawn80 = new a1.Pawn(chessBoard22, color79);
        a1.King king81 = new a1.King(chessBoard0, color79);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265e", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.lang.String str13 = king12.toString();
        java.lang.String str14 = king12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265a" + "'", str13, "\u265a");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265a" + "'", str14, "\u265a");
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        java.util.ArrayList<java.lang.String> strList72 = rook71.legalMoves();
        java.util.ArrayList<java.lang.String> strList73 = rook71.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException3);
        java.lang.String str8 = illegalMoveException3.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str8, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException5);
        java.lang.String str9 = illegalMoveException5.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str9, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard49, color68);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard0, color68);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Knight knight81 = new a1.Knight(chessBoard73, color79);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color79);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        java.lang.String str72 = rook71.toString();
        java.lang.String str73 = rook71.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265c" + "'", str72, "\u265c");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265c" + "'", str73, "\u265c");
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        java.lang.String str54 = king53.toString();
        java.lang.String str55 = king53.toString();
        java.util.ArrayList<java.lang.String> strList56 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList57 = king53.legalMoves();
        java.lang.String str58 = king53.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265a" + "'", str55, "\u265a");
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable[] throwableArray8 = illegalMoveException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException5);
        java.lang.String str10 = illegalPositionException9.toString();
        org.junit.Assert.assertNotNull(throwableArray8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265d" + "'", str10, "\u265d");
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        java.lang.String str60 = rook59.toString();
        java.util.ArrayList<java.lang.String> strList61 = rook59.legalMoves();
        java.lang.String str62 = rook59.toString();
        java.lang.String str63 = rook59.toString();
        a1.ChessPiece.Color color64 = rook59.getColor();
        a1.Bishop bishop65 = new a1.Bishop(chessBoard54, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard0, color64);
        java.lang.String str67 = bishop66.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265c" + "'", str60, "\u265c");
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265c" + "'", str62, "\u265c");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265c" + "'", str63, "\u265c");
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u265d" + "'", str67, "\u265d");
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable[] throwableArray10 = illegalMoveException8.getSuppressed();
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException3);
        java.lang.String str13 = illegalMoveException12.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "a1.IllegalMoveException: " + "'", str13, "a1.IllegalMoveException: ");
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Bishop bishop14 = new a1.Bishop(chessBoard6, color12);
        a1.Rook rook15 = new a1.Rook(chessBoard3, color12);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color12);
        java.lang.Class<?> wildcardClass17 = color12.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessPiece.Color color82 = null;
        a1.Bishop bishop83 = new a1.Bishop(chessBoard73, color82);
        java.lang.String str84 = bishop83.toString();
        java.lang.String str85 = bishop83.toString();
        java.util.ArrayList<java.lang.String> strList86 = bishop83.legalMoves();
        boolean boolean88 = chessBoard0.placePiece((a1.ChessPiece) bishop83, "a1.IllegalPositionException: ");
        java.lang.String str89 = bishop83.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265d" + "'", str84, "\u265d");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265d" + "'", str85, "\u265d");
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u265d" + "'", str89, "\u265d");
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException11);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        java.lang.String str15 = illegalMoveException4.toString();
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str15, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        java.lang.Throwable[] throwableArray19 = illegalMoveException18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = illegalMoveException18.getSuppressed();
        java.lang.Throwable[] throwableArray21 = illegalMoveException18.getSuppressed();
        java.lang.Throwable throwable25 = null;
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", throwable25);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException26);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException26);
        illegalMoveException18.addSuppressed((java.lang.Throwable) illegalMoveException28);
        a1.IllegalPositionException illegalPositionException30 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException28);
        java.lang.Throwable throwable33 = null;
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("hi!", throwable33);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265a", throwable33);
        java.lang.Throwable[] throwableArray36 = illegalMoveException35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = illegalMoveException35.getSuppressed();
        java.lang.Throwable throwable41 = null;
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("hi!", throwable41);
        java.lang.Throwable[] throwableArray43 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException42.getSuppressed();
        a1.IllegalPositionException illegalPositionException45 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException42);
        java.lang.Throwable[] throwableArray46 = illegalPositionException45.getSuppressed();
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException45);
        illegalMoveException35.addSuppressed((java.lang.Throwable) illegalPositionException45);
        illegalPositionException30.addSuppressed((java.lang.Throwable) illegalPositionException45);
        illegalMoveException14.addSuppressed((java.lang.Throwable) illegalPositionException30);
        java.lang.String str51 = illegalPositionException30.toString();
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265c" + "'", str51, "\u265c");
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        java.lang.String str33 = pawn31.toString();
        boolean boolean35 = chessBoard22.placePiece((a1.ChessPiece) pawn31, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        boolean boolean41 = chessBoard36.placePiece((a1.ChessPiece) rook39, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard36.placePiece((a1.ChessPiece) knight50, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        a1.King king74 = new a1.King(chessBoard36, color70);
        a1.King king75 = new a1.King(chessBoard22, color70);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color70);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece79 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = knight18.legalMoves();
        java.lang.Class<?> wildcardClass20 = strList19.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.lang.String str18 = king12.toString();
        java.util.ArrayList<java.lang.String> strList19 = king12.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            king12.setPosition("a1.IllegalMoveException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265a" + "'", str18, "\u265a");
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.King king44 = new a1.King(chessBoard32, color41);
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.util.ArrayList<java.lang.String> strList48 = pawn47.legalMoves();
        boolean boolean50 = chessBoard32.placePiece((a1.ChessPiece) pawn47, "\u265e");
        chessBoard32.initialize();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard52, color65);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard32, color65);
        a1.Knight knight70 = new a1.Knight(chessBoard27, color65);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color65);
        java.util.ArrayList<java.lang.String> strList72 = rook71.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException9);
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("\u265a", throwable13);
        java.lang.Throwable[] throwableArray16 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException15.getSuppressed();
        illegalPositionException9.addSuppressed((java.lang.Throwable) illegalMoveException15);
        java.lang.String str19 = illegalPositionException9.toString();
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "a1.IllegalPositionException: " + "'", str19, "a1.IllegalPositionException: ");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str21 = bishop20.toString();
        java.lang.String str22 = bishop20.getPosition();
        // The following exception was thrown during execution in test generation
        try {
            bishop20.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265d" + "'", str21, "\u265d");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.toString();
        java.lang.String str6 = pawn2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265f" + "'", str6, "\u265f");
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece chessPiece19 = null;
        boolean boolean21 = chessBoard0.placePiece(chessPiece19, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece23 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Rook rook38 = new a1.Rook(chessBoard26, color35);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.Rook rook51 = new a1.Rook(chessBoard39, color48);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard26, color48);
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard26, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard21, color53);
        java.util.ArrayList<java.lang.String> strList56 = bishop55.legalMoves();
        java.lang.String str57 = bishop55.toString();
        a1.ChessPiece.Color color58 = bishop55.getColor();
        a1.Pawn pawn59 = new a1.Pawn(chessBoard0, color58);
        java.lang.Class<?> wildcardClass60 = pawn59.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265d" + "'", str57, "\u265d");
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        java.lang.String str6 = rook5.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        java.lang.String str8 = rook5.toString();
        java.lang.String str9 = rook5.toString();
        a1.ChessPiece.Color color10 = rook5.getColor();
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = null;
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard13, color19);
        a1.Knight knight22 = new a1.Knight(chessBoard12, color19);
        java.util.ArrayList<java.lang.String> strList23 = knight22.legalMoves();
        a1.ChessPiece.Color color24 = knight22.getColor();
        a1.Rook rook25 = new a1.Rook(chessBoard0, color24);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece27 = chessBoard0.getPiece("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color4 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color4.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessPiece.Color color82 = null;
        a1.Bishop bishop83 = new a1.Bishop(chessBoard73, color82);
        java.lang.String str84 = bishop83.toString();
        java.lang.String str85 = bishop83.toString();
        java.util.ArrayList<java.lang.String> strList86 = bishop83.legalMoves();
        boolean boolean88 = chessBoard0.placePiece((a1.ChessPiece) bishop83, "a1.IllegalPositionException: ");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece90 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265d" + "'", str84, "\u265d");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265d" + "'", str85, "\u265d");
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        java.util.ArrayList<java.lang.String> strList19 = pawn15.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = pawn15.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        java.lang.String str37 = rook36.toString();
        // The following exception was thrown during execution in test generation
        try {
            rook36.setPosition("a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265c" + "'", str37, "\u265c");
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        java.lang.Throwable[] throwableArray11 = illegalMoveException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = illegalMoveException10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException10.getSuppressed();
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException18);
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException20);
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalMoveException20);
        java.lang.Throwable throwable25 = null;
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", throwable25);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException26);
        illegalMoveException20.addSuppressed((java.lang.Throwable) illegalMoveException26);
        a1.IllegalPositionException illegalPositionException29 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException26);
        java.lang.Throwable[] throwableArray30 = illegalMoveException26.getSuppressed();
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        java.lang.Throwable[] throwableArray37 = illegalMoveException36.getSuppressed();
        java.lang.Throwable[] throwableArray38 = illegalMoveException36.getSuppressed();
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException36);
        java.lang.Throwable[] throwableArray40 = illegalPositionException39.getSuppressed();
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException39);
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException41);
        illegalMoveException26.addSuppressed((java.lang.Throwable) illegalMoveException42);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException13);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265a", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece chessPiece19 = null;
        boolean boolean21 = chessBoard0.placePiece(chessPiece19, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265f", "\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        java.lang.String str33 = knight30.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265e" + "'", str33, "\u265e");
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        java.lang.String str6 = rook5.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        java.lang.String str8 = rook5.toString();
        java.lang.String str9 = rook5.toString();
        a1.ChessPiece.Color color10 = rook5.getColor();
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = bishop11.toString();
        java.lang.Class<?> wildcardClass13 = bishop11.getClass();
        org.junit.Assert.assertTrue("'" + color4 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color4.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.Rook rook26 = new a1.Rook(chessBoard0, color22);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: a1.IllegalPositionException: ", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        a1.ChessPiece.Color color71 = null;
        a1.Knight knight72 = new a1.Knight(chessBoard0, color71);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = null;
        a1.ChessPiece.Color color75 = null;
        a1.Pawn pawn76 = new a1.Pawn(chessBoard74, color75);
        java.lang.String str77 = pawn76.toString();
        boolean boolean79 = chessBoard73.placePiece((a1.ChessPiece) pawn76, "");
        a1.ChessPiece.Color color80 = pawn76.getColor();
        boolean boolean82 = chessBoard0.placePiece((a1.ChessPiece) pawn76, "a1.IllegalPositionException: a1.IllegalPositionException: ");
        // The following exception was thrown during execution in test generation
        try {
            pawn76.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265f" + "'", str77, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(color80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.Class<?> wildcardClass3 = chessBoard0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265f", "\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = null;
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard2, color3);
        java.lang.String str5 = pawn4.toString();
        boolean boolean7 = chessBoard1.placePiece((a1.ChessPiece) pawn4, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Knight knight17 = new a1.Knight(chessBoard1, color14);
        a1.Knight knight18 = new a1.Knight(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList19 = knight18.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = knight18.legalMoves();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        // The following exception was thrown during execution in test generation
        try {
            rook2.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        java.lang.String str6 = rook5.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        java.lang.String str8 = rook5.toString();
        java.lang.String str9 = rook5.toString();
        a1.ChessPiece.Color color10 = rook5.getColor();
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.Class<?> wildcardClass12 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + color4 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color4.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        java.lang.Class<?> wildcardClass35 = bishop34.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.lang.String str4 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList5 = pawn2.legalMoves();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = null;
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        java.lang.String str22 = pawn21.toString();
        boolean boolean24 = chessBoard18.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        java.lang.String str29 = pawn27.toString();
        boolean boolean31 = chessBoard18.placePiece((a1.ChessPiece) pawn27, "\u265f");
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        boolean boolean37 = chessBoard32.placePiece((a1.ChessPiece) rook35, "\u265f");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard38, color44);
        boolean boolean48 = chessBoard32.placePiece((a1.ChessPiece) knight46, "");
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard56, color66);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard49, color66);
        a1.King king70 = new a1.King(chessBoard32, color66);
        a1.King king71 = new a1.King(chessBoard18, color66);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = null;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Knight knight79 = new a1.Knight(chessBoard75, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard75, color81);
        a1.King king84 = new a1.King(chessBoard72, color81);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard18, color81);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard0, color81);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece88 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u265f" + "'", str29, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        java.lang.String str13 = pawn12.getPosition();
        java.lang.String str14 = pawn12.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265f" + "'", str14, "\u265f");
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.lang.String str7 = pawn2.getPosition();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.Rook rook31 = new a1.Rook(chessBoard19, color28);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.Rook rook44 = new a1.Rook(chessBoard32, color41);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard19, color41);
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard19, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard14, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard0, color46);
        java.lang.String str50 = knight49.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265e" + "'", str50, "\u265e");
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.util.ArrayList<java.lang.String> strList18 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = king12.legalMoves();
        java.lang.String str20 = king12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265a" + "'", str20, "\u265a");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        boolean boolean43 = chessBoard38.placePiece((a1.ChessPiece) rook41, "\u265f");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard44, color50);
        boolean boolean54 = chessBoard38.placePiece((a1.ChessPiece) knight52, "");
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = null;
        a1.ChessPiece.Color color57 = null;
        a1.Pawn pawn58 = new a1.Pawn(chessBoard56, color57);
        java.lang.String str59 = pawn58.toString();
        boolean boolean61 = chessBoard55.placePiece((a1.ChessPiece) pawn58, "");
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard62, color72);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard55, color72);
        a1.King king76 = new a1.King(chessBoard38, color72);
        a1.Knight knight77 = new a1.Knight(chessBoard0, color72);
        java.lang.Class<?> wildcardClass78 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265f" + "'", str59, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.King king66 = new a1.King(chessBoard54, color63);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard0, color63);
        a1.ChessPiece.Color color68 = bishop67.getColor();
        java.lang.String str69 = bishop67.toString();
        java.lang.String str70 = bishop67.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265d" + "'", str70, "\u265d");
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.lang.String str6 = knight4.toString();
        java.lang.String str7 = knight4.toString();
        java.lang.String str8 = knight4.toString();
        java.lang.String str9 = knight4.getPosition();
        java.lang.String str10 = knight4.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265e" + "'", str6, "\u265e");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265e" + "'", str7, "\u265e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265e" + "'", str10, "\u265e");
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException5);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException10);
        illegalMoveException6.addSuppressed((java.lang.Throwable) illegalPositionException11);
        java.lang.String str13 = illegalPositionException11.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265c" + "'", str13, "\u265c");
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.toString();
        // The following exception was thrown during execution in test generation
        try {
            bishop10.setPosition("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265d" + "'", str11, "\u265d");
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        a1.ChessPiece.Color color74 = bishop73.getColor();
        java.lang.String str75 = bishop73.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.lang.String str5 = pawn2.toString();
        a1.ChessPiece.Color color6 = pawn2.getColor();
        java.util.ArrayList<java.lang.String> strList7 = pawn2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNull(color6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.Rook rook29 = new a1.Rook(chessBoard17, color26);
        a1.King king30 = new a1.King(chessBoard0, color26);
        java.util.ArrayList<java.lang.String> strList31 = king30.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList31);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        java.lang.String str7 = rook3.toString();
        java.util.ArrayList<java.lang.String> strList8 = rook3.legalMoves();
        java.lang.String str9 = rook3.toString();
        java.lang.Class<?> wildcardClass10 = rook3.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.Class<?> wildcardClass5 = pawn2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        // The following exception was thrown during execution in test generation
        try {
            pawn9.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265f", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException9);
        java.lang.String str11 = illegalMoveException10.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265c" + "'", str11, "\u265c");
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.lang.String str38 = pawn37.toString();
        boolean boolean40 = chessBoard34.placePiece((a1.ChessPiece) pawn37, "");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard41, color51);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard34, color51);
        java.util.ArrayList<java.lang.String> strList55 = bishop54.legalMoves();
        a1.ChessPiece.Color color56 = bishop54.getColor();
        a1.Knight knight57 = new a1.Knight(chessBoard17, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard0, color56);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265f", "\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("\u265a", throwable2);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.String str6 = illegalMoveException4.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265a" + "'", str6, "\u265a");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        illegalPositionException8.addSuppressed((java.lang.Throwable) illegalMoveException11);
        java.lang.Throwable[] throwableArray16 = illegalPositionException8.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.Rook rook68 = new a1.Rook(chessBoard0, color65);
        java.lang.Class<?> wildcardClass69 = color65.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard55, color62);
        java.lang.String str66 = knight65.toString();
        java.util.ArrayList<java.lang.String> strList67 = knight65.legalMoves();
        java.lang.String str68 = knight65.toString();
        boolean boolean70 = chessBoard0.placePiece((a1.ChessPiece) knight65, "\u265d");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u265e" + "'", str66, "\u265e");
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u265e" + "'", str68, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Knight knight38 = new a1.Knight(chessBoard22, color35);
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight40 = new a1.Knight(chessBoard22, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = null;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.Rook rook61 = new a1.Rook(chessBoard49, color58);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.Rook rook74 = new a1.Rook(chessBoard62, color71);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard49, color71);
        a1.Rook rook76 = new a1.Rook(chessBoard44, color71);
        a1.Rook rook77 = new a1.Rook(chessBoard41, color71);
        java.util.ArrayList<java.lang.String> strList78 = rook77.legalMoves();
        a1.ChessPiece.Color color79 = rook77.getColor();
        a1.Pawn pawn80 = new a1.Pawn(chessBoard22, color79);
        a1.King king81 = new a1.King(chessBoard0, color79);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        a1.IllegalPositionException illegalPositionException4 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException10);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalPositionException10);
        java.lang.Throwable throwable15 = null;
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("hi!", throwable15);
        java.lang.Throwable[] throwableArray17 = illegalMoveException16.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        java.lang.Throwable[] throwableArray21 = illegalMoveException20.getSuppressed();
        illegalMoveException16.addSuppressed((java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException16);
        illegalPositionException10.addSuppressed((java.lang.Throwable) illegalMoveException16);
        java.lang.String str25 = illegalMoveException16.toString();
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str25, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard18, color24);
        a1.King king27 = new a1.King(chessBoard15, color24);
        a1.ChessBoard chessBoard28 = null;
        a1.ChessPiece.Color color29 = null;
        a1.Pawn pawn30 = new a1.Pawn(chessBoard28, color29);
        java.util.ArrayList<java.lang.String> strList31 = pawn30.legalMoves();
        boolean boolean33 = chessBoard15.placePiece((a1.ChessPiece) pawn30, "\u265e");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Bishop bishop42 = new a1.Bishop(chessBoard34, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Pawn pawn46 = new a1.Pawn(chessBoard34, color44);
        java.lang.String str47 = pawn46.getPosition();
        a1.ChessPiece.Color color48 = pawn46.getColor();
        a1.Pawn pawn49 = new a1.Pawn(chessBoard15, color48);
        a1.Rook rook50 = new a1.Rook(chessBoard0, color48);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece52 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = null;
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        java.lang.String str23 = pawn22.toString();
        boolean boolean25 = chessBoard19.placePiece((a1.ChessPiece) pawn22, "");
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.lang.String str29 = pawn28.toString();
        java.lang.String str30 = pawn28.toString();
        boolean boolean32 = chessBoard19.placePiece((a1.ChessPiece) pawn28, "\u265f");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        boolean boolean38 = chessBoard33.placePiece((a1.ChessPiece) rook36, "\u265f");
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard39, color45);
        boolean boolean49 = chessBoard33.placePiece((a1.ChessPiece) knight47, "");
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.King king72 = new a1.King(chessBoard19, color67);
        java.lang.String str73 = king72.toString();
        java.util.ArrayList<java.lang.String> strList74 = king72.legalMoves();
        java.util.ArrayList<java.lang.String> strList75 = king72.legalMoves();
        a1.ChessPiece.Color color76 = king72.getColor();
        a1.Knight knight77 = new a1.Knight(chessBoard0, color76);
        java.util.ArrayList<java.lang.String> strList78 = knight77.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265f" + "'", str23, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u265f" + "'", str29, "\u265f");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u265f" + "'", str30, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265a" + "'", str73, "\u265a");
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.lang.Class<?> wildcardClass6 = rook2.getClass();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.lang.String str18 = king12.toString();
        java.lang.String str19 = king12.getPosition();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265a" + "'", str18, "\u265a");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList37 = rook36.legalMoves();
        a1.ChessPiece.Color color38 = rook36.getColor();
        java.util.ArrayList<java.lang.String> strList39 = rook36.legalMoves();
        java.lang.Class<?> wildcardClass40 = rook36.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        java.lang.String str63 = king60.toString();
        java.util.ArrayList<java.lang.String> strList64 = king60.legalMoves();
        java.lang.Class<?> wildcardClass65 = strList64.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265a" + "'", str63, "\u265a");
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList9 = bishop8.legalMoves();
        java.lang.String str10 = bishop8.toString();
        java.util.ArrayList<java.lang.String> strList11 = bishop8.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            bishop8.setPosition("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265d" + "'", str10, "\u265d");
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard19, color21);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Pawn pawn31 = new a1.Pawn(chessBoard19, color29);
        java.lang.String str32 = pawn31.getPosition();
        a1.ChessPiece.Color color33 = pawn31.getColor();
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color33);
        java.lang.String str35 = pawn34.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece34 = chessBoard0.getPiece("a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        java.lang.String str28 = pawn26.toString();
        boolean boolean30 = chessBoard17.placePiece((a1.ChessPiece) pawn26, "\u265f");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        boolean boolean36 = chessBoard31.placePiece((a1.ChessPiece) rook34, "\u265f");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard37, color43);
        boolean boolean47 = chessBoard31.placePiece((a1.ChessPiece) knight45, "");
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = null;
        a1.ChessPiece.Color color50 = null;
        a1.Pawn pawn51 = new a1.Pawn(chessBoard49, color50);
        java.lang.String str52 = pawn51.toString();
        boolean boolean54 = chessBoard48.placePiece((a1.ChessPiece) pawn51, "");
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard48, color65);
        a1.King king69 = new a1.King(chessBoard31, color65);
        a1.King king70 = new a1.King(chessBoard17, color65);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = null;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.King king83 = new a1.King(chessBoard71, color80);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard17, color80);
        a1.ChessPiece.Color color85 = bishop84.getColor();
        a1.Pawn pawn86 = new a1.Pawn(chessBoard0, color85);
        java.lang.String str87 = pawn86.toString();
        java.util.ArrayList<java.lang.String> strList88 = pawn86.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u265f" + "'", str52, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u265f" + "'", str87, "\u265f");
        org.junit.Assert.assertNotNull(strList88);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        java.lang.String str35 = pawn34.toString();
        java.util.ArrayList<java.lang.String> strList36 = pawn34.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertNotNull(strList36);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException11);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable[] throwableArray15 = illegalMoveException4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard18, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Pawn pawn30 = new a1.Pawn(chessBoard18, color28);
        a1.Pawn pawn31 = new a1.Pawn(chessBoard15, color28);
        a1.ChessPiece.Color color32 = pawn31.getColor();
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece35 = chessBoard0.getPiece("a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException9);
        java.lang.Throwable[] throwableArray11 = illegalMoveException10.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard9, color28);
        a1.Knight knight32 = new a1.Knight(chessBoard0, color28);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard40, color50);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard33, color50);
        java.util.ArrayList<java.lang.String> strList54 = bishop53.legalMoves();
        java.lang.String str55 = bishop53.toString();
        boolean boolean57 = chessBoard0.placePiece((a1.ChessPiece) bishop53, "\u265f");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece59 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265d" + "'", str55, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        boolean boolean29 = chessBoard23.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Knight knight39 = new a1.Knight(chessBoard23, color36);
        a1.Knight knight40 = new a1.Knight(chessBoard17, color36);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard0, color36);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = null;
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard22, color23);
        java.lang.String str25 = pawn24.toString();
        boolean boolean27 = chessBoard21.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessBoard chessBoard28 = null;
        a1.ChessPiece.Color color29 = null;
        a1.Pawn pawn30 = new a1.Pawn(chessBoard28, color29);
        java.lang.String str31 = pawn30.toString();
        java.lang.String str32 = pawn30.toString();
        boolean boolean34 = chessBoard21.placePiece((a1.ChessPiece) pawn30, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        boolean boolean40 = chessBoard35.placePiece((a1.ChessPiece) rook38, "\u265f");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard41, color47);
        boolean boolean51 = chessBoard35.placePiece((a1.ChessPiece) knight49, "");
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = null;
        a1.ChessPiece.Color color54 = null;
        a1.Pawn pawn55 = new a1.Pawn(chessBoard53, color54);
        java.lang.String str56 = pawn55.toString();
        boolean boolean58 = chessBoard52.placePiece((a1.ChessPiece) pawn55, "");
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Knight knight63 = new a1.Knight(chessBoard59, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard59, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard59, color69);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard52, color69);
        a1.King king73 = new a1.King(chessBoard35, color69);
        a1.King king74 = new a1.King(chessBoard21, color69);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = null;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Knight knight82 = new a1.Knight(chessBoard78, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard78, color84);
        a1.King king87 = new a1.King(chessBoard75, color84);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard21, color84);
        a1.ChessPiece.Color color89 = bishop88.getColor();
        a1.Knight knight90 = new a1.Knight(chessBoard0, color89);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("hi!", "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u265f" + "'", str25, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u265f" + "'", str31, "\u265f");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265f" + "'", str56, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        java.lang.Class<?> wildcardClass6 = rook2.getClass();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight35 = new a1.Knight(chessBoard17, color34);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = null;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.Rook rook56 = new a1.Rook(chessBoard44, color53);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Rook rook69 = new a1.Rook(chessBoard57, color66);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard44, color66);
        a1.Rook rook71 = new a1.Rook(chessBoard39, color66);
        a1.Rook rook72 = new a1.Rook(chessBoard36, color66);
        java.util.ArrayList<java.lang.String> strList73 = rook72.legalMoves();
        a1.ChessPiece.Color color74 = rook72.getColor();
        a1.Pawn pawn75 = new a1.Pawn(chessBoard17, color74);
        a1.Rook rook76 = new a1.Rook(chessBoard0, color74);
        java.lang.String str77 = rook76.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265c" + "'", str77, "\u265c");
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException13);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece chessPiece19 = null;
        boolean boolean21 = chessBoard0.placePiece(chessPiece19, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.King king34 = new a1.King(chessBoard22, color31);
        a1.Rook rook35 = new a1.Rook(chessBoard0, color31);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException6);
        java.lang.String str9 = illegalPositionException6.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "a1.IllegalPositionException: hi!" + "'", str9, "a1.IllegalPositionException: hi!");
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException14);
        java.lang.Throwable throwable22 = null;
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("hi!", throwable22);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException26);
        java.lang.Throwable throwable30 = null;
        a1.IllegalMoveException illegalMoveException31 = new a1.IllegalMoveException("hi!", throwable30);
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("\u265a", throwable30);
        java.lang.Throwable[] throwableArray33 = illegalMoveException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = illegalMoveException32.getSuppressed();
        illegalPositionException26.addSuppressed((java.lang.Throwable) illegalMoveException32);
        illegalMoveException14.addSuppressed((java.lang.Throwable) illegalPositionException26);
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException14);
        java.lang.String str38 = illegalMoveException14.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265c" + "'", str38, "\u265c");
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.lang.String str16 = pawn15.toString();
        boolean boolean18 = chessBoard12.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard19, color21);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color25);
        a1.Knight knight28 = new a1.Knight(chessBoard12, color25);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard12, color31);
        a1.Knight knight35 = new a1.Knight(chessBoard3, color31);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard0, color31);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = null;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Rook rook49 = new a1.Rook(chessBoard37, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = null;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard53, color59);
        a1.Rook rook62 = new a1.Rook(chessBoard50, color59);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard37, color59);
        a1.Pawn pawn64 = new a1.Pawn(chessBoard0, color59);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece66 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265f" + "'", str16, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        java.lang.String str6 = rook5.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        java.lang.String str8 = rook5.toString();
        java.lang.String str9 = rook5.toString();
        a1.ChessPiece.Color color10 = rook5.getColor();
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = bishop11.toString();
        java.lang.String str13 = bishop11.toString();
        // The following exception was thrown during execution in test generation
        try {
            bishop11.setPosition("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color4 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color4.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265d" + "'", str13, "\u265d");
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook2.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        // The following exception was thrown during execution in test generation
        try {
            king12.setPosition("a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        java.util.ArrayList<java.lang.String> strList72 = rook71.legalMoves();
        java.util.ArrayList<java.lang.String> strList73 = rook71.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList35 = pawn34.legalMoves();
        java.util.ArrayList<java.lang.String> strList36 = pawn34.legalMoves();
        java.lang.String str37 = pawn34.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        chessBoard13.initialize();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard36, color38);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Bishop bishop44 = new a1.Bishop(chessBoard36, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard36, color46);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard33, color46);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard13, color46);
        a1.Knight knight51 = new a1.Knight(chessBoard8, color46);
        a1.King king52 = new a1.King(chessBoard0, color46);
        java.lang.String str53 = king52.toString();
        java.util.ArrayList<java.lang.String> strList54 = king52.legalMoves();
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265a" + "'", str53, "\u265a");
        org.junit.Assert.assertNotNull(strList54);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece chessPiece19 = null;
        boolean boolean21 = chessBoard0.placePiece(chessPiece19, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.King king34 = new a1.King(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.util.ArrayList<java.lang.String> strList38 = pawn37.legalMoves();
        boolean boolean40 = chessBoard22.placePiece((a1.ChessPiece) pawn37, "\u265e");
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard22, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = null;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Knight knight68 = new a1.Knight(chessBoard64, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard64, color70);
        a1.Rook rook73 = new a1.Rook(chessBoard61, color70);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard48, color70);
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn76 = new a1.Pawn(chessBoard48, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard43, color75);
        java.util.ArrayList<java.lang.String> strList78 = bishop77.legalMoves();
        java.lang.String str79 = bishop77.toString();
        a1.ChessPiece.Color color80 = bishop77.getColor();
        a1.Pawn pawn81 = new a1.Pawn(chessBoard22, color80);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color80);
        java.lang.Class<?> wildcardClass83 = rook82.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265d" + "'", str79, "\u265d");
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException6);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException12);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = illegalMoveException2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException2.getSuppressed();
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException10);
        illegalMoveException2.addSuppressed((java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException2.getSuppressed();
        java.lang.Class<?> wildcardClass15 = throwableArray14.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = null;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.Rook rook71 = new a1.Rook(chessBoard59, color68);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = null;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Knight knight79 = new a1.Knight(chessBoard75, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard75, color81);
        a1.Rook rook84 = new a1.Rook(chessBoard72, color81);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard59, color81);
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn87 = new a1.Pawn(chessBoard59, color86);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard54, color86);
        java.util.ArrayList<java.lang.String> strList89 = bishop88.legalMoves();
        java.lang.String str90 = bishop88.toString();
        a1.ChessPiece.Color color91 = bishop88.getColor();
        a1.Bishop bishop92 = new a1.Bishop(chessBoard0, color91);
        java.lang.String str93 = bishop92.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u265d" + "'", str90, "\u265d");
        org.junit.Assert.assertTrue("'" + color91 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color91.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\u265d" + "'", str93, "\u265d");
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessBoard chessBoard20 = null;
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        java.lang.String str23 = pawn22.toString();
        java.lang.String str24 = pawn22.toString();
        boolean boolean26 = chessBoard13.placePiece((a1.ChessPiece) pawn22, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        boolean boolean32 = chessBoard27.placePiece((a1.ChessPiece) rook30, "\u265f");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard33, color39);
        boolean boolean43 = chessBoard27.placePiece((a1.ChessPiece) knight41, "");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.lang.String str48 = pawn47.toString();
        boolean boolean50 = chessBoard44.placePiece((a1.ChessPiece) pawn47, "");
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Pawn pawn63 = new a1.Pawn(chessBoard51, color61);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard44, color61);
        a1.King king65 = new a1.King(chessBoard27, color61);
        a1.King king66 = new a1.King(chessBoard13, color61);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.King king79 = new a1.King(chessBoard67, color76);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard13, color76);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard0, color76);
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.King king83 = new a1.King(chessBoard0, color82);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265f" + "'", str23, "\u265f");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265f" + "'", str24, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265f" + "'", str48, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        java.lang.String str23 = bishop22.toString();
        a1.ChessPiece.Color color24 = bishop22.getColor();
        java.util.ArrayList<java.lang.String> strList25 = bishop22.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            bishop22.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265d" + "'", str23, "\u265d");
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.Rook rook34 = new a1.Rook(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard22, color44);
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard22, color49);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard0, color49);
        java.lang.Class<?> wildcardClass52 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.lang.String str4 = rook2.getPosition();
        a1.ChessPiece.Color color5 = rook2.getColor();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = color5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(color5);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.King king66 = new a1.King(chessBoard54, color63);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard0, color63);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.util.ArrayList<java.lang.String> strList69 = bishop67.legalMoves();
        java.util.ArrayList<java.lang.String> strList70 = bishop67.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strList70);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        java.util.ArrayList<java.lang.String> strList35 = bishop34.legalMoves();
        java.lang.String str36 = bishop34.toString();
        java.lang.String str37 = bishop34.toString();
        java.lang.String str38 = bishop34.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265d" + "'", str37, "\u265d");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265d" + "'", str38, "\u265d");
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable[] throwableArray7 = illegalMoveException6.getSuppressed();
        java.lang.String str8 = illegalMoveException6.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        java.lang.String str35 = pawn34.toString();
        java.lang.String str36 = pawn34.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        java.lang.String str7 = rook3.toString();
        java.util.ArrayList<java.lang.String> strList8 = rook3.legalMoves();
        java.lang.String str9 = rook3.toString();
        java.lang.String str10 = rook3.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265c" + "'", str10, "\u265c");
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.lang.String str4 = rook2.getPosition();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        java.lang.String str59 = pawn58.toString();
        a1.ChessPiece.Color color60 = pawn58.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265f" + "'", str59, "\u265f");
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException9);
        java.lang.String str11 = illegalPositionException9.toString();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "a1.IllegalPositionException: " + "'", str11, "a1.IllegalPositionException: ");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.lang.String str9 = pawn3.toString();
        java.lang.String str10 = pawn3.toString();
        java.util.ArrayList<java.lang.String> strList11 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = pawn3.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.King king44 = new a1.King(chessBoard32, color41);
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.util.ArrayList<java.lang.String> strList48 = pawn47.legalMoves();
        boolean boolean50 = chessBoard32.placePiece((a1.ChessPiece) pawn47, "\u265e");
        chessBoard32.initialize();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard52, color65);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard32, color65);
        a1.Knight knight70 = new a1.Knight(chessBoard27, color65);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color65);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        java.lang.String str77 = knight76.toString();
        boolean boolean79 = chessBoard0.placePiece((a1.ChessPiece) knight76, "\u265d");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: hi!", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265e" + "'", str77, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessBoard chessBoard20 = null;
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        java.lang.String str23 = pawn22.toString();
        java.lang.String str24 = pawn22.toString();
        boolean boolean26 = chessBoard13.placePiece((a1.ChessPiece) pawn22, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        boolean boolean32 = chessBoard27.placePiece((a1.ChessPiece) rook30, "\u265f");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard33, color39);
        boolean boolean43 = chessBoard27.placePiece((a1.ChessPiece) knight41, "");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.lang.String str48 = pawn47.toString();
        boolean boolean50 = chessBoard44.placePiece((a1.ChessPiece) pawn47, "");
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Pawn pawn63 = new a1.Pawn(chessBoard51, color61);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard44, color61);
        a1.King king65 = new a1.King(chessBoard27, color61);
        a1.King king66 = new a1.King(chessBoard13, color61);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.King king79 = new a1.King(chessBoard67, color76);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard13, color76);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard0, color76);
        a1.ChessPiece.Color color82 = null;
        a1.Knight knight83 = new a1.Knight(chessBoard0, color82);
        java.util.ArrayList<java.lang.String> strList84 = knight83.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265f" + "'", str23, "\u265f");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265f" + "'", str24, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265f" + "'", str48, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList84);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("\u265a", throwable2);
        java.lang.String str5 = illegalMoveException4.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265a" + "'", str5, "\u265a");
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        a1.ChessPiece.Color color74 = bishop73.getColor();
        java.util.ArrayList<java.lang.String> strList75 = bishop73.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList75);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        java.lang.Throwable[] throwableArray29 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = illegalMoveException28.getSuppressed();
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException36);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException38);
        java.lang.Throwable[] throwableArray40 = illegalMoveException28.getSuppressed();
        java.lang.Throwable throwable46 = null;
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("hi!", throwable46);
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException47);
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException48);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException48);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException51);
        illegalPositionException25.addSuppressed((java.lang.Throwable) illegalMoveException51);
        java.lang.Throwable throwable56 = null;
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("hi!", throwable56);
        a1.IllegalPositionException illegalPositionException58 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException57);
        java.lang.Throwable throwable62 = null;
        a1.IllegalMoveException illegalMoveException63 = new a1.IllegalMoveException("hi!", throwable62);
        a1.IllegalPositionException illegalPositionException64 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException63);
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException64);
        illegalMoveException57.addSuppressed((java.lang.Throwable) illegalPositionException64);
        java.lang.Throwable throwable69 = null;
        a1.IllegalMoveException illegalMoveException70 = new a1.IllegalMoveException("hi!", throwable69);
        java.lang.Throwable[] throwableArray71 = illegalMoveException70.getSuppressed();
        java.lang.Throwable throwable73 = null;
        a1.IllegalMoveException illegalMoveException74 = new a1.IllegalMoveException("hi!", throwable73);
        java.lang.Throwable[] throwableArray75 = illegalMoveException74.getSuppressed();
        illegalMoveException70.addSuppressed((java.lang.Throwable) illegalMoveException74);
        a1.IllegalMoveException illegalMoveException77 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException70);
        illegalPositionException64.addSuppressed((java.lang.Throwable) illegalMoveException70);
        illegalMoveException51.addSuppressed((java.lang.Throwable) illegalPositionException64);
        java.lang.Throwable throwable83 = null;
        a1.IllegalMoveException illegalMoveException84 = new a1.IllegalMoveException("hi!", throwable83);
        java.lang.Throwable[] throwableArray85 = illegalMoveException84.getSuppressed();
        java.lang.Throwable[] throwableArray86 = illegalMoveException84.getSuppressed();
        a1.IllegalPositionException illegalPositionException87 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException84);
        a1.IllegalMoveException illegalMoveException88 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException84);
        java.lang.Throwable[] throwableArray89 = illegalMoveException84.getSuppressed();
        illegalMoveException51.addSuppressed((java.lang.Throwable) illegalMoveException84);
        java.lang.Throwable[] throwableArray91 = illegalMoveException51.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = bishop20.legalMoves();
        java.lang.String str23 = bishop20.getPosition();
        java.util.ArrayList<java.lang.String> strList24 = bishop20.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList37 = rook36.legalMoves();
        a1.ChessPiece.Color color38 = rook36.getColor();
        java.util.ArrayList<java.lang.String> strList39 = rook36.legalMoves();
        java.lang.String str40 = rook36.toString();
        java.lang.String str41 = rook36.toString();
        java.util.ArrayList<java.lang.String> strList42 = rook36.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u265c" + "'", str40, "\u265c");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265c" + "'", str41, "\u265c");
        org.junit.Assert.assertNotNull(strList42);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = illegalMoveException2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException2.getSuppressed();
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException10);
        illegalMoveException2.addSuppressed((java.lang.Throwable) illegalMoveException12);
        java.lang.String str14 = illegalMoveException12.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265c" + "'", str14, "\u265c");
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Knight knight38 = new a1.Knight(chessBoard22, color35);
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight40 = new a1.Knight(chessBoard22, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = null;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.Rook rook61 = new a1.Rook(chessBoard49, color58);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.Rook rook74 = new a1.Rook(chessBoard62, color71);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard49, color71);
        a1.Rook rook76 = new a1.Rook(chessBoard44, color71);
        a1.Rook rook77 = new a1.Rook(chessBoard41, color71);
        java.util.ArrayList<java.lang.String> strList78 = rook77.legalMoves();
        a1.ChessPiece.Color color79 = rook77.getColor();
        a1.Pawn pawn80 = new a1.Pawn(chessBoard22, color79);
        a1.King king81 = new a1.King(chessBoard0, color79);
        java.lang.String str82 = king81.toString();
        java.util.ArrayList<java.lang.String> strList83 = king81.legalMoves();
        java.lang.String str84 = king81.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u265a" + "'", str82, "\u265a");
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265a" + "'", str84, "\u265a");
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Bishop bishop14 = new a1.Bishop(chessBoard6, color12);
        a1.Rook rook15 = new a1.Rook(chessBoard3, color12);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        boolean boolean65 = chessBoard60.placePiece((a1.ChessPiece) rook63, "\u265f");
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard66, color72);
        boolean boolean76 = chessBoard60.placePiece((a1.ChessPiece) knight74, "");
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessBoard chessBoard78 = null;
        a1.ChessPiece.Color color79 = null;
        a1.Pawn pawn80 = new a1.Pawn(chessBoard78, color79);
        java.lang.String str81 = pawn80.toString();
        boolean boolean83 = chessBoard77.placePiece((a1.ChessPiece) pawn80, "");
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Knight knight88 = new a1.Knight(chessBoard84, color86);
        a1.ChessBoard chessBoard89 = new a1.ChessBoard();
        a1.ChessPiece.Color color90 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook91 = new a1.Rook(chessBoard89, color90);
        a1.Bishop bishop92 = new a1.Bishop(chessBoard84, color90);
        a1.ChessBoard chessBoard93 = new a1.ChessBoard();
        a1.ChessPiece.Color color94 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook95 = new a1.Rook(chessBoard93, color94);
        a1.Pawn pawn96 = new a1.Pawn(chessBoard84, color94);
        a1.Bishop bishop97 = new a1.Bishop(chessBoard77, color94);
        a1.King king98 = new a1.King(chessBoard60, color94);
        a1.Pawn pawn99 = new a1.Pawn(chessBoard0, color94);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265f" + "'", str81, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color94 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color94.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.lang.String str5 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessPiece.Color color48 = null;
        a1.Bishop bishop49 = new a1.Bishop(chessBoard39, color48);
        java.lang.String str50 = bishop49.toString();
        java.lang.String str51 = bishop49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) bishop49, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece55 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265d" + "'", str50, "\u265d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265d" + "'", str51, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece chessPiece19 = null;
        boolean boolean21 = chessBoard0.placePiece(chessPiece19, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.King king34 = new a1.King(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.util.ArrayList<java.lang.String> strList38 = pawn37.legalMoves();
        boolean boolean40 = chessBoard22.placePiece((a1.ChessPiece) pawn37, "\u265e");
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard22, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = null;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Knight knight68 = new a1.Knight(chessBoard64, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard64, color70);
        a1.Rook rook73 = new a1.Rook(chessBoard61, color70);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard48, color70);
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn76 = new a1.Pawn(chessBoard48, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard43, color75);
        java.util.ArrayList<java.lang.String> strList78 = bishop77.legalMoves();
        java.lang.String str79 = bishop77.toString();
        a1.ChessPiece.Color color80 = bishop77.getColor();
        a1.Pawn pawn81 = new a1.Pawn(chessBoard22, color80);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color80);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: a1.IllegalMoveException: hi!", "a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265d" + "'", str79, "\u265d");
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        java.lang.String str28 = pawn26.toString();
        boolean boolean30 = chessBoard17.placePiece((a1.ChessPiece) pawn26, "\u265f");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        boolean boolean36 = chessBoard31.placePiece((a1.ChessPiece) rook34, "\u265f");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard37, color43);
        boolean boolean47 = chessBoard31.placePiece((a1.ChessPiece) knight45, "");
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = null;
        a1.ChessPiece.Color color50 = null;
        a1.Pawn pawn51 = new a1.Pawn(chessBoard49, color50);
        java.lang.String str52 = pawn51.toString();
        boolean boolean54 = chessBoard48.placePiece((a1.ChessPiece) pawn51, "");
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard48, color65);
        a1.King king69 = new a1.King(chessBoard31, color65);
        a1.King king70 = new a1.King(chessBoard17, color65);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = null;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.King king83 = new a1.King(chessBoard71, color80);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard17, color80);
        a1.ChessPiece.Color color85 = bishop84.getColor();
        a1.Pawn pawn86 = new a1.Pawn(chessBoard0, color85);
        java.util.ArrayList<java.lang.String> strList87 = pawn86.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u265f" + "'", str52, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList87);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        java.util.ArrayList<java.lang.String> strList20 = pawn16.legalMoves();
        a1.ChessPiece.Color color21 = pawn16.getColor();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) pawn16, "\u265e");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(color21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        // The following exception was thrown during execution in test generation
        try {
            pawn58.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.lang.String str13 = king12.toString();
        java.lang.String str14 = king12.toString();
        a1.ChessPiece.Color color15 = king12.getColor();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265a" + "'", str13, "\u265a");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265a" + "'", str14, "\u265a");
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        java.lang.Class<?> wildcardClass7 = strList6.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Bishop bishop14 = new a1.Bishop(chessBoard6, color12);
        a1.Rook rook15 = new a1.Rook(chessBoard3, color12);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color12);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = null;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.Rook rook37 = new a1.Rook(chessBoard25, color34);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard25, color47);
        a1.Rook rook52 = new a1.Rook(chessBoard20, color47);
        a1.Rook rook53 = new a1.Rook(chessBoard17, color47);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.Rook rook66 = new a1.Rook(chessBoard54, color63);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.Rook rook79 = new a1.Rook(chessBoard67, color76);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard54, color76);
        a1.Knight knight81 = new a1.Knight(chessBoard17, color76);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color76);
        java.lang.String str83 = rook82.getPosition();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.lang.String str13 = king12.toString();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265a" + "'", str13, "\u265a");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException3);
        java.lang.String str8 = illegalMoveException3.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str8, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessBoard chessBoard6 = null;
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        java.lang.String str9 = pawn8.toString();
        boolean boolean11 = chessBoard5.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Knight knight16 = new a1.Knight(chessBoard12, color14);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.King king29 = new a1.King(chessBoard17, color26);
        a1.ChessBoard chessBoard30 = null;
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard30, color31);
        java.util.ArrayList<java.lang.String> strList33 = pawn32.legalMoves();
        boolean boolean35 = chessBoard17.placePiece((a1.ChessPiece) pawn32, "\u265e");
        chessBoard17.initialize();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard40, color50);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard37, color50);
        a1.Pawn pawn54 = new a1.Pawn(chessBoard17, color50);
        a1.Knight knight55 = new a1.Knight(chessBoard12, color50);
        a1.Rook rook56 = new a1.Rook(chessBoard5, color50);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        boolean boolean62 = chessBoard57.placePiece((a1.ChessPiece) rook60, "\u265f");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard63, color69);
        boolean boolean73 = chessBoard57.placePiece((a1.ChessPiece) knight71, "");
        a1.ChessPiece.Color color74 = knight71.getColor();
        a1.King king75 = new a1.King(chessBoard5, color74);
        a1.King king76 = new a1.King(chessBoard0, color74);
        java.lang.String str77 = king76.toString();
        java.lang.Class<?> wildcardClass78 = king76.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265a" + "'", str77, "\u265a");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = null;
        a1.ChessPiece.Color color74 = null;
        a1.Pawn pawn75 = new a1.Pawn(chessBoard73, color74);
        java.lang.String str76 = pawn75.toString();
        boolean boolean78 = chessBoard72.placePiece((a1.ChessPiece) pawn75, "");
        boolean boolean80 = chessBoard0.placePiece((a1.ChessPiece) pawn75, "\u265c");
        java.lang.String str81 = pawn75.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265f" + "'", str76, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265f" + "'", str81, "\u265f");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable[] throwableArray7 = illegalPositionException6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = illegalPositionException6.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece14 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.lang.String str38 = pawn37.toString();
        boolean boolean40 = chessBoard34.placePiece((a1.ChessPiece) pawn37, "");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard41, color51);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard34, color51);
        java.util.ArrayList<java.lang.String> strList55 = bishop54.legalMoves();
        a1.ChessPiece.Color color56 = bishop54.getColor();
        a1.Knight knight57 = new a1.Knight(chessBoard17, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard0, color56);
        java.lang.String str59 = knight58.toString();
        java.lang.String str60 = knight58.toString();
        java.lang.String str61 = knight58.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265e" + "'", str59, "\u265e");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265e" + "'", str60, "\u265e");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.Rook rook34 = new a1.Rook(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard22, color44);
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard22, color49);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard0, color49);
        java.lang.String str52 = pawn51.toString();
        java.util.ArrayList<java.lang.String> strList53 = pawn51.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u265f" + "'", str52, "\u265f");
        org.junit.Assert.assertNotNull(strList53);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard19, color21);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color25);
        a1.Rook rook28 = new a1.Rook(chessBoard16, color25);
        a1.Pawn pawn29 = new a1.Pawn(chessBoard13, color25);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.Rook rook65 = new a1.Rook(chessBoard33, color60);
        a1.Rook rook66 = new a1.Rook(chessBoard30, color60);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.Rook rook79 = new a1.Rook(chessBoard67, color76);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = null;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Knight knight87 = new a1.Knight(chessBoard83, color85);
        a1.ChessBoard chessBoard88 = new a1.ChessBoard();
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook90 = new a1.Rook(chessBoard88, color89);
        a1.Bishop bishop91 = new a1.Bishop(chessBoard83, color89);
        a1.Rook rook92 = new a1.Rook(chessBoard80, color89);
        a1.Bishop bishop93 = new a1.Bishop(chessBoard67, color89);
        a1.Knight knight94 = new a1.Knight(chessBoard30, color89);
        a1.Rook rook95 = new a1.Rook(chessBoard13, color89);
        a1.Knight knight96 = new a1.Knight(chessBoard0, color89);
        java.lang.Class<?> wildcardClass97 = knight96.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        a1.ChessPiece.Color color74 = null;
        a1.Pawn pawn75 = new a1.Pawn(chessBoard0, color74);
        java.lang.String str76 = pawn75.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265f" + "'", str76, "\u265f");
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265a", throwable10);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalMoveException12);
        java.lang.String str16 = illegalMoveException7.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "a1.IllegalMoveException: a1.IllegalMoveException: hi!" + "'", str16, "a1.IllegalMoveException: a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable[] throwableArray6 = illegalPositionException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException5);
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.lang.String str16 = king12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265a" + "'", str16, "\u265a");
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.lang.String str9 = pawn3.toString();
        java.util.ArrayList<java.lang.String> strList10 = pawn3.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        java.util.ArrayList<java.lang.String> strList50 = king47.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = king47.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.King king51 = new a1.King(chessBoard39, color48);
        java.util.ArrayList<java.lang.String> strList52 = king51.legalMoves();
        java.util.ArrayList<java.lang.String> strList53 = king51.legalMoves();
        java.lang.String str54 = king51.toString();
        java.util.ArrayList<java.lang.String> strList55 = king51.legalMoves();
        java.lang.String str56 = king51.toString();
        java.util.ArrayList<java.lang.String> strList57 = king51.legalMoves();
        java.lang.String str58 = king51.toString();
        java.lang.String str59 = king51.getPosition();
        java.lang.String str60 = king51.toString();
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king51, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece64 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265a" + "'", str56, "\u265a");
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265a" + "'", str58, "\u265a");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265a" + "'", str60, "\u265a");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        boolean boolean10 = chessBoard0.placePiece((a1.ChessPiece) rook6, "\u265e");
        java.lang.String str11 = rook6.toString();
        java.lang.String str12 = rook6.toString();
        java.lang.String str13 = rook6.toString();
        java.lang.String str14 = rook6.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265c" + "'", str11, "\u265c");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265c" + "'", str12, "\u265c");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265c" + "'", str13, "\u265c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265c" + "'", str14, "\u265c");
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        java.lang.Throwable[] throwableArray29 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = illegalMoveException28.getSuppressed();
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException36);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException38);
        java.lang.Throwable[] throwableArray40 = illegalMoveException28.getSuppressed();
        java.lang.Throwable throwable46 = null;
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("hi!", throwable46);
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException47);
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException48);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException48);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException51);
        illegalPositionException25.addSuppressed((java.lang.Throwable) illegalMoveException51);
        java.lang.Throwable throwable56 = null;
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("hi!", throwable56);
        a1.IllegalPositionException illegalPositionException58 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException57);
        java.lang.Throwable throwable62 = null;
        a1.IllegalMoveException illegalMoveException63 = new a1.IllegalMoveException("hi!", throwable62);
        a1.IllegalPositionException illegalPositionException64 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException63);
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException64);
        illegalMoveException57.addSuppressed((java.lang.Throwable) illegalPositionException64);
        java.lang.Throwable throwable69 = null;
        a1.IllegalMoveException illegalMoveException70 = new a1.IllegalMoveException("hi!", throwable69);
        java.lang.Throwable[] throwableArray71 = illegalMoveException70.getSuppressed();
        java.lang.Throwable throwable73 = null;
        a1.IllegalMoveException illegalMoveException74 = new a1.IllegalMoveException("hi!", throwable73);
        java.lang.Throwable[] throwableArray75 = illegalMoveException74.getSuppressed();
        illegalMoveException70.addSuppressed((java.lang.Throwable) illegalMoveException74);
        a1.IllegalMoveException illegalMoveException77 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException70);
        illegalPositionException64.addSuppressed((java.lang.Throwable) illegalMoveException70);
        illegalMoveException51.addSuppressed((java.lang.Throwable) illegalPositionException64);
        java.lang.Throwable throwable83 = null;
        a1.IllegalMoveException illegalMoveException84 = new a1.IllegalMoveException("hi!", throwable83);
        java.lang.Throwable[] throwableArray85 = illegalMoveException84.getSuppressed();
        java.lang.Throwable[] throwableArray86 = illegalMoveException84.getSuppressed();
        java.lang.Throwable[] throwableArray87 = illegalMoveException84.getSuppressed();
        a1.IllegalMoveException illegalMoveException88 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException84);
        a1.IllegalPositionException illegalPositionException89 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException84);
        illegalPositionException64.addSuppressed((java.lang.Throwable) illegalMoveException84);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        java.lang.String str4 = pawn2.getPosition();
        java.util.ArrayList<java.lang.String> strList5 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        java.lang.Class<?> wildcardClass19 = color17.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.lang.String str16 = pawn15.toString();
        java.lang.String str17 = pawn15.toString();
        boolean boolean19 = chessBoard6.placePiece((a1.ChessPiece) pawn15, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        boolean boolean25 = chessBoard20.placePiece((a1.ChessPiece) rook23, "\u265f");
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard26, color32);
        boolean boolean36 = chessBoard20.placePiece((a1.ChessPiece) knight34, "");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = null;
        a1.ChessPiece.Color color39 = null;
        a1.Pawn pawn40 = new a1.Pawn(chessBoard38, color39);
        java.lang.String str41 = pawn40.toString();
        boolean boolean43 = chessBoard37.placePiece((a1.ChessPiece) pawn40, "");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Pawn pawn56 = new a1.Pawn(chessBoard44, color54);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard37, color54);
        a1.King king58 = new a1.King(chessBoard20, color54);
        a1.King king59 = new a1.King(chessBoard6, color54);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = null;
        a1.ChessPiece.Color color62 = null;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard61, color62);
        java.lang.String str64 = pawn63.toString();
        boolean boolean66 = chessBoard60.placePiece((a1.ChessPiece) pawn63, "");
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard67, color69);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard67, color73);
        a1.Knight knight76 = new a1.Knight(chessBoard60, color73);
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight78 = new a1.Knight(chessBoard60, color77);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard6, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Knight knight84 = new a1.Knight(chessBoard80, color82);
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard80, color86);
        a1.ChessBoard chessBoard89 = new a1.ChessBoard();
        a1.ChessPiece.Color color90 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook91 = new a1.Rook(chessBoard89, color90);
        a1.Pawn pawn92 = new a1.Pawn(chessBoard80, color90);
        a1.Bishop bishop93 = new a1.Bishop(chessBoard6, color90);
        a1.Knight knight94 = new a1.Knight(chessBoard0, color90);
        java.lang.String str95 = knight94.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265f" + "'", str16, "\u265f");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265f" + "'", str41, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265f" + "'", str64, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "\u265e" + "'", str95, "\u265e");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        java.lang.String str35 = bishop34.toString();
        java.lang.String str36 = bishop34.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265d" + "'", str35, "\u265d");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard48 = null;
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard48, color62);
        a1.King king67 = new a1.King(chessBoard0, color62);
        java.util.ArrayList<java.lang.String> strList68 = king67.legalMoves();
        a1.ChessPiece.Color color69 = king67.getColor();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("\u265c", throwable1);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        a1.ChessPiece.Color color7 = pawn2.getColor();
        java.lang.String str8 = pawn2.getPosition();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(color7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = knight4.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = knight4.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = knight4.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.lang.String str13 = king12.toString();
        java.lang.String str14 = king12.toString();
        java.lang.String str15 = king12.toString();
        java.lang.String str16 = king12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265a" + "'", str13, "\u265a");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265a" + "'", str14, "\u265a");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265a" + "'", str16, "\u265a");
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        boolean boolean10 = chessBoard0.placePiece((a1.ChessPiece) rook6, "\u265e");
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Rook rook23 = new a1.Rook(chessBoard11, color20);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Bishop bishop35 = new a1.Bishop(chessBoard27, color33);
        a1.Rook rook36 = new a1.Rook(chessBoard24, color33);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard11, color33);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = null;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.King king55 = new a1.King(chessBoard43, color52);
        a1.ChessBoard chessBoard56 = null;
        a1.ChessPiece.Color color57 = null;
        a1.Pawn pawn58 = new a1.Pawn(chessBoard56, color57);
        java.util.ArrayList<java.lang.String> strList59 = pawn58.legalMoves();
        boolean boolean61 = chessBoard43.placePiece((a1.ChessPiece) pawn58, "\u265e");
        chessBoard43.initialize();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard66, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Pawn pawn78 = new a1.Pawn(chessBoard66, color76);
        a1.Pawn pawn79 = new a1.Pawn(chessBoard63, color76);
        a1.Pawn pawn80 = new a1.Pawn(chessBoard43, color76);
        a1.Knight knight81 = new a1.Knight(chessBoard38, color76);
        a1.Rook rook82 = new a1.Rook(chessBoard11, color76);
        a1.Knight knight83 = new a1.Knight(chessBoard0, color76);
        java.util.ArrayList<java.lang.String> strList84 = knight83.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList84);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessPiece.Color color7 = pawn3.getColor();
        java.lang.String str8 = pawn3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(color7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable[] throwableArray9 = illegalPositionException8.getSuppressed();
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException10);
        java.lang.Class<?> wildcardClass12 = illegalMoveException10.getClass();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard7, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard18, color24);
        boolean boolean28 = chessBoard7.placePiece((a1.ChessPiece) knight26, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = null;
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard30, color31);
        java.lang.String str33 = pawn32.toString();
        boolean boolean35 = chessBoard29.placePiece((a1.ChessPiece) pawn32, "");
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        java.lang.String str40 = pawn38.toString();
        boolean boolean42 = chessBoard29.placePiece((a1.ChessPiece) pawn38, "\u265f");
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        boolean boolean48 = chessBoard43.placePiece((a1.ChessPiece) rook46, "\u265f");
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard49, color55);
        boolean boolean59 = chessBoard43.placePiece((a1.ChessPiece) knight57, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = null;
        a1.ChessPiece.Color color62 = null;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard61, color62);
        java.lang.String str64 = pawn63.toString();
        boolean boolean66 = chessBoard60.placePiece((a1.ChessPiece) pawn63, "");
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard67, color69);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard67, color73);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Pawn pawn79 = new a1.Pawn(chessBoard67, color77);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard60, color77);
        a1.King king81 = new a1.King(chessBoard43, color77);
        a1.King king82 = new a1.King(chessBoard29, color77);
        a1.Knight knight83 = new a1.Knight(chessBoard7, color77);
        a1.Rook rook84 = new a1.Rook(chessBoard0, color77);
        chessBoard0.initialize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u265f" + "'", str40, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265f" + "'", str64, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        // The following exception was thrown during execution in test generation
        try {
            pawn16.setPosition("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = pawn2.legalMoves();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: a1.IllegalMoveException: hi!", "\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Knight knight9 = new a1.Knight(chessBoard1, color7);
        a1.Knight knight10 = new a1.Knight(chessBoard0, color7);
        java.lang.String str11 = knight10.toString();
        java.util.ArrayList<java.lang.String> strList12 = knight10.legalMoves();
        java.lang.Class<?> wildcardClass13 = strList12.getClass();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265e" + "'", str11, "\u265e");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.Rook rook31 = new a1.Rook(chessBoard19, color28);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.Rook rook44 = new a1.Rook(chessBoard32, color41);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard19, color41);
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard19, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard14, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard0, color46);
        java.util.ArrayList<java.lang.String> strList50 = knight49.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList50);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Pawn pawn37 = new a1.Pawn(chessBoard21, color34);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        java.util.ArrayList<java.lang.String> strList59 = bishop58.legalMoves();
        a1.ChessPiece.Color color60 = bishop58.getColor();
        a1.Knight knight61 = new a1.Knight(chessBoard21, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = null;
        a1.ChessPiece.Color color64 = null;
        a1.Pawn pawn65 = new a1.Pawn(chessBoard63, color64);
        java.lang.String str66 = pawn65.toString();
        boolean boolean68 = chessBoard62.placePiece((a1.ChessPiece) pawn65, "");
        java.lang.String str69 = pawn65.getPosition();
        java.util.ArrayList<java.lang.String> strList70 = pawn65.legalMoves();
        java.util.ArrayList<java.lang.String> strList71 = pawn65.legalMoves();
        java.util.ArrayList<java.lang.String> strList72 = pawn65.legalMoves();
        boolean boolean74 = chessBoard21.placePiece((a1.ChessPiece) pawn65, "\u265d");
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = null;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        java.lang.String str81 = rook80.toString();
        java.util.ArrayList<java.lang.String> strList82 = rook80.legalMoves();
        java.lang.String str83 = rook80.toString();
        java.lang.String str84 = rook80.toString();
        a1.ChessPiece.Color color85 = rook80.getColor();
        a1.Bishop bishop86 = new a1.Bishop(chessBoard75, color85);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard21, color85);
        a1.Pawn pawn88 = new a1.Pawn(chessBoard0, color85);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u265f" + "'", str66, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265c" + "'", str81, "\u265c");
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265c" + "'", str84, "\u265c");
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265a", "\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        java.util.ArrayList<java.lang.String> strList20 = pawn16.legalMoves();
        a1.ChessPiece.Color color21 = pawn16.getColor();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) pawn16, "\u265e");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Bishop bishop35 = new a1.Bishop(chessBoard27, color33);
        a1.King king36 = new a1.King(chessBoard24, color33);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard0, color33);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(color21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        illegalPositionException8.addSuppressed((java.lang.Throwable) illegalMoveException11);
        java.lang.Class<?> wildcardClass16 = illegalPositionException8.getClass();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException7.getSuppressed();
        illegalMoveException2.addSuppressed((java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray11 = illegalMoveException7.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList37 = rook36.legalMoves();
        java.util.ArrayList<java.lang.String> strList38 = rook36.legalMoves();
        java.util.ArrayList<java.lang.String> strList39 = rook36.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strList39);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        chessBoard19.initialize();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        boolean boolean62 = chessBoard57.placePiece((a1.ChessPiece) rook60, "\u265f");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard63, color69);
        boolean boolean73 = chessBoard57.placePiece((a1.ChessPiece) knight71, "");
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = null;
        a1.ChessPiece.Color color76 = null;
        a1.Pawn pawn77 = new a1.Pawn(chessBoard75, color76);
        java.lang.String str78 = pawn77.toString();
        boolean boolean80 = chessBoard74.placePiece((a1.ChessPiece) pawn77, "");
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Knight knight85 = new a1.Knight(chessBoard81, color83);
        a1.ChessBoard chessBoard86 = new a1.ChessBoard();
        a1.ChessPiece.Color color87 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook88 = new a1.Rook(chessBoard86, color87);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard81, color87);
        a1.ChessBoard chessBoard90 = new a1.ChessBoard();
        a1.ChessPiece.Color color91 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook92 = new a1.Rook(chessBoard90, color91);
        a1.Pawn pawn93 = new a1.Pawn(chessBoard81, color91);
        a1.Bishop bishop94 = new a1.Bishop(chessBoard74, color91);
        a1.King king95 = new a1.King(chessBoard57, color91);
        a1.Knight knight96 = new a1.Knight(chessBoard19, color91);
        a1.Bishop bishop97 = new a1.Bishop(chessBoard0, color91);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece99 = chessBoard0.getPiece("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265f" + "'", str78, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color91 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color91.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Rook rook69 = new a1.Rook(chessBoard57, color66);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard54, color66);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color66);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece74 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.lang.String str7 = pawn2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        chessBoard0.initialize();
        chessBoard0.initialize();
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece63 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        illegalPositionException9.addSuppressed((java.lang.Throwable) illegalMoveException12);
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalPositionException9);
        java.lang.Class<?> wildcardClass18 = illegalPositionException17.getClass();
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        boolean boolean10 = chessBoard0.placePiece((a1.ChessPiece) rook6, "\u265e");
        java.lang.String str11 = rook6.toString();
        java.lang.String str12 = rook6.toString();
        java.lang.String str13 = rook6.getPosition();
        java.lang.String str14 = rook6.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265c" + "'", str11, "\u265c");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265c" + "'", str12, "\u265c");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265c" + "'", str14, "\u265c");
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException11);
        java.lang.Throwable[] throwableArray16 = illegalMoveException11.getSuppressed();
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException11);
        java.lang.String str18 = illegalMoveException11.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str18, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.lang.String str16 = pawn15.toString();
        boolean boolean18 = chessBoard12.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard19, color21);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color25);
        a1.Knight knight28 = new a1.Knight(chessBoard12, color25);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard12, color31);
        a1.Knight knight35 = new a1.Knight(chessBoard3, color31);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard0, color31);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265f" + "'", str16, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Knight knight69 = new a1.Knight(chessBoard53, color66);
        a1.Rook rook70 = new a1.Rook(chessBoard44, color66);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color66);
        java.lang.String str72 = rook71.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265c" + "'", str72, "\u265c");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard23, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Pawn pawn35 = new a1.Pawn(chessBoard23, color33);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard20, color33);
        a1.Pawn pawn37 = new a1.Pawn(chessBoard0, color33);
        java.util.ArrayList<java.lang.String> strList38 = pawn37.legalMoves();
        java.util.ArrayList<java.lang.String> strList39 = pawn37.legalMoves();
        java.lang.String str40 = pawn37.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u265f" + "'", str40, "\u265f");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessPiece.Color color48 = null;
        a1.Bishop bishop49 = new a1.Bishop(chessBoard39, color48);
        java.lang.String str50 = bishop49.toString();
        java.lang.String str51 = bishop49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) bishop49, "\u265c");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard74, color84);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard71, color84);
        a1.Pawn pawn88 = new a1.Pawn(chessBoard54, color84);
        a1.Rook rook89 = new a1.Rook(chessBoard0, color84);
        java.lang.String str90 = rook89.toString();
        java.lang.String str91 = rook89.toString();
        java.util.ArrayList<java.lang.String> strList92 = rook89.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265d" + "'", str50, "\u265d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265d" + "'", str51, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u265c" + "'", str90, "\u265c");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u265c" + "'", str91, "\u265c");
        org.junit.Assert.assertNotNull(strList92);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard35, color48);
        a1.ChessPiece.Color color52 = pawn51.getColor();
        a1.Rook rook53 = new a1.Rook(chessBoard0, color52);
        chessBoard0.initialize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("\u265a", throwable4);
        java.lang.Throwable[] throwableArray7 = illegalMoveException6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = illegalMoveException6.getSuppressed();
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException13.getSuppressed();
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException13);
        java.lang.Throwable[] throwableArray17 = illegalPositionException16.getSuppressed();
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException16);
        illegalMoveException6.addSuppressed((java.lang.Throwable) illegalPositionException16);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException20);
        java.lang.String str22 = illegalPositionException20.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265d" + "'", str22, "\u265d");
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Rook rook38 = new a1.Rook(chessBoard26, color35);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.Rook rook51 = new a1.Rook(chessBoard39, color48);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard26, color48);
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard26, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard21, color53);
        java.util.ArrayList<java.lang.String> strList56 = bishop55.legalMoves();
        java.lang.String str57 = bishop55.toString();
        a1.ChessPiece.Color color58 = bishop55.getColor();
        a1.Pawn pawn59 = new a1.Pawn(chessBoard0, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessPiece.Color color69 = bishop68.getColor();
        a1.Bishop bishop70 = new a1.Bishop(chessBoard0, color69);
        java.lang.String str71 = bishop70.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265d" + "'", str57, "\u265d");
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u265d" + "'", str71, "\u265d");
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Class<?> wildcardClass9 = illegalMoveException4.getClass();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = null;
        a1.ChessPiece.Color color50 = null;
        a1.Pawn pawn51 = new a1.Pawn(chessBoard49, color50);
        java.lang.String str52 = pawn51.toString();
        boolean boolean54 = chessBoard48.placePiece((a1.ChessPiece) pawn51, "");
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard48, color65);
        java.util.ArrayList<java.lang.String> strList69 = bishop68.legalMoves();
        a1.ChessPiece.Color color70 = bishop68.getColor();
        a1.King king71 = new a1.King(chessBoard0, color70);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u265f" + "'", str52, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException9);
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("\u265a", throwable13);
        java.lang.Throwable[] throwableArray16 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException15.getSuppressed();
        illegalPositionException9.addSuppressed((java.lang.Throwable) illegalMoveException15);
        java.lang.String str19 = illegalMoveException15.toString();
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265a" + "'", str19, "\u265a");
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException7);
        java.lang.Throwable[] throwableArray11 = illegalPositionException7.getSuppressed();
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException21);
        java.lang.Throwable throwable25 = null;
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", throwable25);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265a", throwable25);
        java.lang.Throwable[] throwableArray28 = illegalMoveException27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = illegalMoveException27.getSuppressed();
        illegalPositionException21.addSuppressed((java.lang.Throwable) illegalMoveException27);
        illegalPositionException7.addSuppressed((java.lang.Throwable) illegalPositionException21);
        java.lang.String str32 = illegalPositionException21.toString();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "a1.IllegalPositionException: " + "'", str32, "a1.IllegalPositionException: ");
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.lang.String str4 = pawn2.toString();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.lang.String str16 = pawn15.toString();
        java.lang.String str17 = pawn15.toString();
        boolean boolean19 = chessBoard6.placePiece((a1.ChessPiece) pawn15, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        boolean boolean25 = chessBoard20.placePiece((a1.ChessPiece) rook23, "\u265f");
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard26, color32);
        boolean boolean36 = chessBoard20.placePiece((a1.ChessPiece) knight34, "");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = null;
        a1.ChessPiece.Color color39 = null;
        a1.Pawn pawn40 = new a1.Pawn(chessBoard38, color39);
        java.lang.String str41 = pawn40.toString();
        boolean boolean43 = chessBoard37.placePiece((a1.ChessPiece) pawn40, "");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Pawn pawn56 = new a1.Pawn(chessBoard44, color54);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard37, color54);
        a1.King king58 = new a1.King(chessBoard20, color54);
        a1.King king59 = new a1.King(chessBoard6, color54);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = null;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard63, color69);
        a1.King king72 = new a1.King(chessBoard60, color69);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard6, color69);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard0, color69);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265f" + "'", str16, "\u265f");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265f" + "'", str41, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.lang.String str9 = bishop8.toString();
        java.lang.String str10 = bishop8.toString();
        java.lang.String str11 = bishop8.toString();
        java.util.ArrayList<java.lang.String> strList12 = bishop8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265d" + "'", str9, "\u265d");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265d" + "'", str10, "\u265d");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265d" + "'", str11, "\u265d");
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece chessPiece19 = null;
        boolean boolean21 = chessBoard0.placePiece(chessPiece19, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.King king34 = new a1.King(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.util.ArrayList<java.lang.String> strList38 = pawn37.legalMoves();
        boolean boolean40 = chessBoard22.placePiece((a1.ChessPiece) pawn37, "\u265e");
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard22, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = null;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Knight knight68 = new a1.Knight(chessBoard64, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard64, color70);
        a1.Rook rook73 = new a1.Rook(chessBoard61, color70);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard48, color70);
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn76 = new a1.Pawn(chessBoard48, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard43, color75);
        java.util.ArrayList<java.lang.String> strList78 = bishop77.legalMoves();
        java.lang.String str79 = bishop77.toString();
        a1.ChessPiece.Color color80 = bishop77.getColor();
        a1.Pawn pawn81 = new a1.Pawn(chessBoard22, color80);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color80);
        // The following exception was thrown during execution in test generation
        try {
            rook82.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265d" + "'", str79, "\u265d");
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        boolean boolean35 = chessBoard30.placePiece((a1.ChessPiece) rook33, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard36, color38);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard36, color42);
        boolean boolean46 = chessBoard30.placePiece((a1.ChessPiece) knight44, "");
        a1.ChessPiece.Color color47 = knight44.getColor();
        a1.Bishop bishop48 = new a1.Bishop(chessBoard0, color47);
        // The following exception was thrown during execution in test generation
        try {
            bishop48.setPosition("a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.lang.String str7 = pawn2.toString();
        // The following exception was thrown during execution in test generation
        try {
            pawn2.setPosition("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        java.lang.Throwable[] throwableArray8 = illegalMoveException7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = illegalMoveException7.getSuppressed();
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray12 = illegalMoveException7.getSuppressed();
        java.lang.Throwable throwable15 = null;
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("hi!", throwable15);
        java.lang.Throwable[] throwableArray17 = illegalMoveException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = illegalMoveException16.getSuppressed();
        java.lang.Throwable[] throwableArray19 = illegalMoveException16.getSuppressed();
        java.lang.Throwable throwable23 = null;
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("hi!", throwable23);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException24);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException24);
        illegalMoveException16.addSuppressed((java.lang.Throwable) illegalMoveException26);
        a1.IllegalPositionException illegalPositionException28 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException26);
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("\u265a", throwable31);
        java.lang.Throwable[] throwableArray34 = illegalMoveException33.getSuppressed();
        java.lang.Throwable[] throwableArray35 = illegalMoveException33.getSuppressed();
        java.lang.Throwable throwable39 = null;
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("hi!", throwable39);
        java.lang.Throwable[] throwableArray41 = illegalMoveException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = illegalMoveException40.getSuppressed();
        a1.IllegalPositionException illegalPositionException43 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException40);
        java.lang.Throwable[] throwableArray44 = illegalPositionException43.getSuppressed();
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException43);
        illegalMoveException33.addSuppressed((java.lang.Throwable) illegalPositionException43);
        illegalPositionException28.addSuppressed((java.lang.Throwable) illegalPositionException43);
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalPositionException43);
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException49);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException50);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        java.util.ArrayList<java.lang.String> strList35 = bishop34.legalMoves();
        java.lang.String str36 = bishop34.toString();
        java.lang.Class<?> wildcardClass37 = bishop34.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.getPosition();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece30 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        java.lang.String str13 = rook12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265c" + "'", str13, "\u265c");
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        java.lang.Throwable[] throwableArray29 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = illegalMoveException28.getSuppressed();
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException36);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException38);
        java.lang.Throwable[] throwableArray40 = illegalMoveException28.getSuppressed();
        java.lang.Throwable throwable46 = null;
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("hi!", throwable46);
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException47);
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException48);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException48);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException51);
        illegalPositionException25.addSuppressed((java.lang.Throwable) illegalMoveException51);
        java.lang.Throwable throwable56 = null;
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("hi!", throwable56);
        a1.IllegalPositionException illegalPositionException58 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException57);
        java.lang.Throwable throwable62 = null;
        a1.IllegalMoveException illegalMoveException63 = new a1.IllegalMoveException("hi!", throwable62);
        a1.IllegalPositionException illegalPositionException64 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException63);
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException64);
        illegalMoveException57.addSuppressed((java.lang.Throwable) illegalPositionException64);
        java.lang.Throwable throwable69 = null;
        a1.IllegalMoveException illegalMoveException70 = new a1.IllegalMoveException("hi!", throwable69);
        java.lang.Throwable[] throwableArray71 = illegalMoveException70.getSuppressed();
        java.lang.Throwable throwable73 = null;
        a1.IllegalMoveException illegalMoveException74 = new a1.IllegalMoveException("hi!", throwable73);
        java.lang.Throwable[] throwableArray75 = illegalMoveException74.getSuppressed();
        illegalMoveException70.addSuppressed((java.lang.Throwable) illegalMoveException74);
        a1.IllegalMoveException illegalMoveException77 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException70);
        illegalPositionException64.addSuppressed((java.lang.Throwable) illegalMoveException70);
        illegalMoveException51.addSuppressed((java.lang.Throwable) illegalPositionException64);
        java.lang.Throwable[] throwableArray80 = illegalMoveException51.getSuppressed();
        java.lang.Throwable throwable83 = null;
        a1.IllegalMoveException illegalMoveException84 = new a1.IllegalMoveException("hi!", throwable83);
        java.lang.Throwable[] throwableArray85 = illegalMoveException84.getSuppressed();
        java.lang.Throwable[] throwableArray86 = illegalMoveException84.getSuppressed();
        java.lang.Throwable[] throwableArray87 = illegalMoveException84.getSuppressed();
        a1.IllegalMoveException illegalMoveException88 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException84);
        java.lang.Throwable throwable91 = null;
        a1.IllegalMoveException illegalMoveException92 = new a1.IllegalMoveException("hi!", throwable91);
        java.lang.Throwable[] throwableArray93 = illegalMoveException92.getSuppressed();
        java.lang.Throwable[] throwableArray94 = illegalMoveException92.getSuppressed();
        java.lang.Throwable[] throwableArray95 = illegalMoveException92.getSuppressed();
        a1.IllegalPositionException illegalPositionException96 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException92);
        java.lang.Throwable[] throwableArray97 = illegalMoveException92.getSuppressed();
        illegalMoveException84.addSuppressed((java.lang.Throwable) illegalMoveException92);
        illegalMoveException51.addSuppressed((java.lang.Throwable) illegalMoveException84);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertNotNull(throwableArray97);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = null;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.Rook rook71 = new a1.Rook(chessBoard59, color68);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = null;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Knight knight79 = new a1.Knight(chessBoard75, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard75, color81);
        a1.Rook rook84 = new a1.Rook(chessBoard72, color81);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard59, color81);
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn87 = new a1.Pawn(chessBoard59, color86);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard54, color86);
        java.util.ArrayList<java.lang.String> strList89 = bishop88.legalMoves();
        java.lang.String str90 = bishop88.toString();
        a1.ChessPiece.Color color91 = bishop88.getColor();
        a1.Bishop bishop92 = new a1.Bishop(chessBoard0, color91);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece94 = chessBoard0.getPiece("a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u265d" + "'", str90, "\u265d");
        org.junit.Assert.assertTrue("'" + color91 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color91.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = null;
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Knight knight9 = new a1.Knight(chessBoard5, color7);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        a1.Bishop bishop13 = new a1.Bishop(chessBoard5, color11);
        a1.Rook rook14 = new a1.Rook(chessBoard2, color11);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard18, color24);
        a1.Rook rook27 = new a1.Rook(chessBoard15, color24);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard2, color24);
        a1.King king29 = new a1.King(chessBoard1, color24);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard0, color24);
        // The following exception was thrown during execution in test generation
        try {
            bishop30.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color11 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color11.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        java.lang.String str65 = rook64.toString();
        java.lang.String str66 = rook64.getPosition();
        java.util.ArrayList<java.lang.String> strList67 = rook64.legalMoves();
        boolean boolean69 = chessBoard0.placePiece((a1.ChessPiece) rook64, "\u265a");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece71 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265c" + "'", str65, "\u265c");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        java.lang.String str63 = king60.toString();
        java.util.ArrayList<java.lang.String> strList64 = king60.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            king60.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265a" + "'", str63, "\u265a");
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException5);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException11);
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        illegalMoveException6.addSuppressed((java.lang.Throwable) illegalMoveException11);
        java.lang.Throwable[] throwableArray16 = illegalMoveException6.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        java.util.ArrayList<java.lang.String> strList50 = king47.legalMoves();
        java.lang.String str51 = king47.toString();
        java.lang.String str52 = king47.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265a" + "'", str51, "\u265a");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u265a" + "'", str52, "\u265a");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.lang.String str7 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList8 = pawn2.legalMoves();
        java.lang.String str9 = pawn2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece20 = chessBoard0.getPiece("a1.IllegalMoveException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList35 = pawn34.legalMoves();
        java.util.ArrayList<java.lang.String> strList36 = pawn34.legalMoves();
        java.util.ArrayList<java.lang.String> strList37 = pawn34.legalMoves();
        java.lang.String str38 = pawn34.toString();
        java.lang.String str39 = pawn34.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.util.ArrayList<java.lang.String> strList5 = knight4.legalMoves();
        java.lang.String str6 = knight4.getPosition();
        java.util.ArrayList<java.lang.String> strList7 = knight4.legalMoves();
        java.lang.String str8 = knight4.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.King king51 = new a1.King(chessBoard39, color48);
        java.util.ArrayList<java.lang.String> strList52 = king51.legalMoves();
        java.util.ArrayList<java.lang.String> strList53 = king51.legalMoves();
        java.lang.String str54 = king51.toString();
        java.util.ArrayList<java.lang.String> strList55 = king51.legalMoves();
        java.lang.String str56 = king51.toString();
        java.util.ArrayList<java.lang.String> strList57 = king51.legalMoves();
        java.lang.String str58 = king51.toString();
        java.lang.String str59 = king51.getPosition();
        java.lang.String str60 = king51.toString();
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king51, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            king51.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265a" + "'", str56, "\u265a");
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265a" + "'", str58, "\u265a");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265a" + "'", str60, "\u265a");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        java.lang.String str13 = pawn12.getPosition();
        java.util.ArrayList<java.lang.String> strList14 = pawn12.legalMoves();
        java.lang.String str15 = pawn12.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265f" + "'", str15, "\u265f");
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = bishop8.getColor();
        java.lang.String str10 = bishop8.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265d" + "'", str10, "\u265d");
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = null;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.Rook rook67 = new a1.Rook(chessBoard55, color64);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard52, color64);
        a1.ChessPiece.Color color69 = pawn68.getColor();
        a1.Pawn pawn70 = new a1.Pawn(chessBoard0, color69);
        java.util.ArrayList<java.lang.String> strList71 = pawn70.legalMoves();
        java.lang.String str72 = pawn70.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265f" + "'", str72, "\u265f");
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        java.util.ArrayList<java.lang.String> strList14 = pawn9.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = pawn9.legalMoves();
        java.lang.String str16 = pawn9.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException7);
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        a1.IllegalPositionException illegalPositionException14 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException13);
        java.lang.Throwable[] throwableArray16 = illegalMoveException13.getSuppressed();
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException13);
        a1.IllegalPositionException illegalPositionException18 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        java.util.ArrayList<java.lang.String> strList72 = rook71.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            rook71.setPosition("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = pawn3.legalMoves();
        java.lang.String str10 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList11 = pawn3.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.util.ArrayList<java.lang.String> strList7 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        java.lang.String str7 = rook3.toString();
        java.util.ArrayList<java.lang.String> strList8 = rook3.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            rook3.setPosition("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        java.util.ArrayList<java.lang.String> strList35 = bishop34.legalMoves();
        java.lang.String str36 = bishop34.toString();
        a1.ChessPiece.Color color37 = bishop34.getColor();
        java.lang.String str38 = bishop34.toString();
        java.util.ArrayList<java.lang.String> strList39 = bishop34.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265d" + "'", str38, "\u265d");
        org.junit.Assert.assertNotNull(strList39);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        java.lang.String str61 = knight60.toString();
        java.util.ArrayList<java.lang.String> strList62 = knight60.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            knight60.setPosition("a1.IllegalPositionException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
        org.junit.Assert.assertNotNull(strList62);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        java.util.ArrayList<java.lang.String> strList14 = pawn9.legalMoves();
        java.lang.String str15 = pawn9.toString();
        // The following exception was thrown during execution in test generation
        try {
            pawn9.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265f" + "'", str15, "\u265f");
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException11);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        java.lang.Class<?> wildcardClass15 = illegalMoveException14.getClass();
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        java.lang.String str37 = rook36.toString();
        java.util.ArrayList<java.lang.String> strList38 = rook36.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265c" + "'", str37, "\u265c");
        org.junit.Assert.assertNotNull(strList38);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        boolean boolean51 = chessBoard46.placePiece((a1.ChessPiece) rook49, "\u265f");
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard52, color58);
        boolean boolean62 = chessBoard46.placePiece((a1.ChessPiece) knight60, "");
        a1.ChessPiece.Color color63 = knight60.getColor();
        a1.Knight knight64 = new a1.Knight(chessBoard45, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard0, color63);
        java.util.ArrayList<java.lang.String> strList66 = knight65.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList66);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Rook rook69 = new a1.Rook(chessBoard57, color66);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard54, color66);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color66);
        java.lang.String str72 = rook71.toString();
        java.util.ArrayList<java.lang.String> strList73 = rook71.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265c" + "'", str72, "\u265c");
        org.junit.Assert.assertNotNull(strList73);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        java.lang.String str7 = rook3.toString();
        java.lang.String str8 = rook3.toString();
        java.util.ArrayList<java.lang.String> strList9 = rook3.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        java.lang.String str44 = knight43.getPosition();
        java.lang.String str45 = knight43.toString();
        java.lang.String str46 = knight43.toString();
        java.util.ArrayList<java.lang.String> strList47 = knight43.legalMoves();
        java.util.ArrayList<java.lang.String> strList48 = knight43.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265e" + "'", str45, "\u265e");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u265e" + "'", str46, "\u265e");
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList48);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.lang.String str38 = pawn37.toString();
        boolean boolean40 = chessBoard34.placePiece((a1.ChessPiece) pawn37, "");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard41, color51);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard34, color51);
        java.util.ArrayList<java.lang.String> strList55 = bishop54.legalMoves();
        a1.ChessPiece.Color color56 = bishop54.getColor();
        a1.Knight knight57 = new a1.Knight(chessBoard17, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard0, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard62, color72);
        a1.Pawn pawn75 = new a1.Pawn(chessBoard59, color72);
        a1.King king76 = new a1.King(chessBoard0, color72);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = null;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        java.lang.String str83 = rook82.toString();
        java.util.ArrayList<java.lang.String> strList84 = rook82.legalMoves();
        java.lang.String str85 = rook82.toString();
        java.lang.String str86 = rook82.toString();
        a1.ChessPiece.Color color87 = rook82.getColor();
        a1.Bishop bishop88 = new a1.Bishop(chessBoard77, color87);
        a1.Rook rook89 = new a1.Rook(chessBoard0, color87);
        java.lang.String str90 = rook89.toString();
        java.lang.String str91 = rook89.getPosition();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265c" + "'", str85, "\u265c");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u265c" + "'", str86, "\u265c");
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u265c" + "'", str90, "\u265c");
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        java.lang.String str26 = king25.toString();
        java.util.ArrayList<java.lang.String> strList27 = king25.legalMoves();
        java.lang.String str28 = king25.toString();
        java.util.ArrayList<java.lang.String> strList29 = king25.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265a" + "'", str26, "\u265a");
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265a" + "'", str28, "\u265a");
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        chessBoard0.initialize();
        a1.ChessPiece.Color color49 = null;
        a1.Knight knight50 = new a1.Knight(chessBoard0, color49);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("hi!", "\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException15);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("\u265a", throwable3);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray16 = illegalPositionException15.getSuppressed();
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException15);
        illegalMoveException5.addSuppressed((java.lang.Throwable) illegalPositionException15);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable22 = null;
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("hi!", throwable22);
        java.lang.Throwable[] throwableArray24 = illegalMoveException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = illegalMoveException23.getSuppressed();
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException23);
        illegalPositionException19.addSuppressed((java.lang.Throwable) illegalPositionException26);
        java.lang.Throwable throwable28 = null;
        // The following exception was thrown during execution in test generation
        try {
            illegalPositionException19.addSuppressed(throwable28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.lang.String str5 = rook2.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.lang.String str7 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList8 = rook2.legalMoves();
        java.lang.String str9 = rook2.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard22, color32);
        a1.Pawn pawn35 = new a1.Pawn(chessBoard19, color32);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard39, color49);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard36, color49);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        java.util.ArrayList<java.lang.String> strList74 = bishop73.legalMoves();
        a1.ChessPiece.Color color75 = bishop73.getColor();
        a1.Knight knight76 = new a1.Knight(chessBoard36, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard19, color75);
        a1.Knight knight78 = new a1.Knight(chessBoard0, color75);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        java.util.ArrayList<java.lang.String> strList19 = pawn15.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException5);
        java.lang.String str7 = illegalPositionException5.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "a1.IllegalPositionException: hi!" + "'", str7, "a1.IllegalPositionException: hi!");
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Knight knight9 = new a1.Knight(chessBoard1, color7);
        a1.Knight knight10 = new a1.Knight(chessBoard0, color7);
        java.util.ArrayList<java.lang.String> strList11 = knight10.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = knight10.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Pawn pawn37 = new a1.Pawn(chessBoard21, color34);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        java.util.ArrayList<java.lang.String> strList59 = bishop58.legalMoves();
        a1.ChessPiece.Color color60 = bishop58.getColor();
        a1.Knight knight61 = new a1.Knight(chessBoard21, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = null;
        a1.ChessPiece.Color color64 = null;
        a1.Pawn pawn65 = new a1.Pawn(chessBoard63, color64);
        java.lang.String str66 = pawn65.toString();
        boolean boolean68 = chessBoard62.placePiece((a1.ChessPiece) pawn65, "");
        java.lang.String str69 = pawn65.getPosition();
        java.util.ArrayList<java.lang.String> strList70 = pawn65.legalMoves();
        java.util.ArrayList<java.lang.String> strList71 = pawn65.legalMoves();
        java.util.ArrayList<java.lang.String> strList72 = pawn65.legalMoves();
        boolean boolean74 = chessBoard21.placePiece((a1.ChessPiece) pawn65, "\u265d");
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = null;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        java.lang.String str81 = rook80.toString();
        java.util.ArrayList<java.lang.String> strList82 = rook80.legalMoves();
        java.lang.String str83 = rook80.toString();
        java.lang.String str84 = rook80.toString();
        a1.ChessPiece.Color color85 = rook80.getColor();
        a1.Bishop bishop86 = new a1.Bishop(chessBoard75, color85);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard21, color85);
        a1.Pawn pawn88 = new a1.Pawn(chessBoard0, color85);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece90 = chessBoard0.getPiece("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u265f" + "'", str66, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265c" + "'", str81, "\u265c");
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265c" + "'", str84, "\u265c");
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessPiece.Color color82 = null;
        a1.Bishop bishop83 = new a1.Bishop(chessBoard73, color82);
        java.lang.String str84 = bishop83.toString();
        java.lang.String str85 = bishop83.toString();
        java.util.ArrayList<java.lang.String> strList86 = bishop83.legalMoves();
        boolean boolean88 = chessBoard0.placePiece((a1.ChessPiece) bishop83, "a1.IllegalPositionException: ");
        java.lang.Class<?> wildcardClass89 = bishop83.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265d" + "'", str84, "\u265d");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265d" + "'", str85, "\u265d");
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.util.ArrayList<java.lang.String> strList5 = knight4.legalMoves();
        java.lang.String str6 = knight4.getPosition();
        java.util.ArrayList<java.lang.String> strList7 = knight4.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            knight4.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = null;
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        java.lang.String str12 = pawn11.toString();
        boolean boolean14 = chessBoard8.placePiece((a1.ChessPiece) pawn11, "");
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.Knight knight24 = new a1.Knight(chessBoard8, color21);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard8, color27);
        a1.King king31 = new a1.King(chessBoard0, color27);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265f" + "'", str12, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        java.lang.String str22 = knight19.toString();
        java.lang.String str23 = knight19.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265e" + "'", str22, "\u265e");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265e" + "'", str23, "\u265e");
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.lang.String str38 = pawn37.toString();
        boolean boolean40 = chessBoard34.placePiece((a1.ChessPiece) pawn37, "");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard41, color51);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard34, color51);
        java.util.ArrayList<java.lang.String> strList55 = bishop54.legalMoves();
        a1.ChessPiece.Color color56 = bishop54.getColor();
        a1.Knight knight57 = new a1.Knight(chessBoard17, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard0, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard62, color72);
        a1.Pawn pawn75 = new a1.Pawn(chessBoard59, color72);
        a1.King king76 = new a1.King(chessBoard0, color72);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = null;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        java.lang.String str83 = rook82.toString();
        java.util.ArrayList<java.lang.String> strList84 = rook82.legalMoves();
        java.lang.String str85 = rook82.toString();
        java.lang.String str86 = rook82.toString();
        a1.ChessPiece.Color color87 = rook82.getColor();
        a1.Bishop bishop88 = new a1.Bishop(chessBoard77, color87);
        a1.Rook rook89 = new a1.Rook(chessBoard0, color87);
        a1.ChessPiece.Color color90 = rook89.getColor();
        java.lang.String str91 = rook89.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265c" + "'", str85, "\u265c");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u265c" + "'", str86, "\u265c");
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u265c" + "'", str91, "\u265c");
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece4 = chessBoard0.getPiece("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard9, color28);
        a1.Knight knight32 = new a1.Knight(chessBoard0, color28);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook2.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException9);
        java.lang.String str11 = illegalMoveException10.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265c" + "'", str11, "\u265c");
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = rook2.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        java.lang.Throwable[] throwableArray7 = illegalMoveException6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = illegalMoveException6.getSuppressed();
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable[] throwableArray10 = illegalPositionException9.getSuppressed();
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException9);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException11);
        java.lang.Throwable throwable16 = null;
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("hi!", throwable16);
        java.lang.Throwable[] throwableArray18 = illegalMoveException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = illegalMoveException17.getSuppressed();
        java.lang.Throwable[] throwableArray20 = illegalMoveException17.getSuppressed();
        java.lang.Throwable throwable24 = null;
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("hi!", throwable24);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException25);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException25);
        illegalMoveException17.addSuppressed((java.lang.Throwable) illegalMoveException27);
        a1.IllegalPositionException illegalPositionException29 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException27);
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException39);
        java.lang.Throwable throwable43 = null;
        a1.IllegalMoveException illegalMoveException44 = new a1.IllegalMoveException("hi!", throwable43);
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("\u265a", throwable43);
        java.lang.Throwable[] throwableArray46 = illegalMoveException45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = illegalMoveException45.getSuppressed();
        illegalPositionException39.addSuppressed((java.lang.Throwable) illegalMoveException45);
        illegalMoveException27.addSuppressed((java.lang.Throwable) illegalPositionException39);
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException27);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException27);
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException12);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.King king46 = new a1.King(chessBoard34, color43);
        a1.ChessBoard chessBoard47 = null;
        a1.ChessPiece.Color color48 = null;
        a1.Pawn pawn49 = new a1.Pawn(chessBoard47, color48);
        java.util.ArrayList<java.lang.String> strList50 = pawn49.legalMoves();
        boolean boolean52 = chessBoard34.placePiece((a1.ChessPiece) pawn49, "\u265e");
        chessBoard34.initialize();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard54, color67);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard34, color67);
        a1.Knight knight72 = new a1.Knight(chessBoard29, color67);
        a1.Rook rook73 = new a1.Rook(chessBoard22, color67);
        a1.Knight knight74 = new a1.Knight(chessBoard0, color67);
        // The following exception was thrown during execution in test generation
        try {
            knight74.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        boolean boolean10 = chessBoard0.placePiece((a1.ChessPiece) rook6, "\u265e");
        a1.ChessPiece.Color color11 = null;
        a1.Rook rook12 = new a1.Rook(chessBoard0, color11);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard13, color20);
        java.util.ArrayList<java.lang.String> strList24 = knight23.legalMoves();
        a1.ChessPiece.Color color25 = knight23.getColor();
        a1.Knight knight26 = new a1.Knight(chessBoard0, color25);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece28 = chessBoard0.getPiece("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        java.util.ArrayList<java.lang.String> strList72 = rook71.legalMoves();
        java.util.ArrayList<java.lang.String> strList73 = rook71.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalMoveException: hi!", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        java.util.ArrayList<java.lang.String> strList50 = king47.legalMoves();
        a1.ChessPiece.Color color51 = king47.getColor();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        java.lang.String str33 = pawn31.toString();
        boolean boolean35 = chessBoard22.placePiece((a1.ChessPiece) pawn31, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        boolean boolean41 = chessBoard36.placePiece((a1.ChessPiece) rook39, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard36.placePiece((a1.ChessPiece) knight50, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        a1.King king74 = new a1.King(chessBoard36, color70);
        a1.King king75 = new a1.King(chessBoard22, color70);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color70);
        java.lang.String str77 = knight76.toString();
        java.util.ArrayList<java.lang.String> strList78 = knight76.legalMoves();
        java.lang.String str79 = knight76.toString();
        java.util.ArrayList<java.lang.String> strList80 = knight76.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265e" + "'", str77, "\u265e");
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265e" + "'", str79, "\u265e");
        org.junit.Assert.assertNotNull(strList80);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        a1.ChessBoard chessBoard53 = null;
        a1.ChessPiece.Color color54 = null;
        a1.Pawn pawn55 = new a1.Pawn(chessBoard53, color54);
        java.util.ArrayList<java.lang.String> strList56 = pawn55.legalMoves();
        a1.ChessPiece.Color color57 = pawn55.getColor();
        boolean boolean59 = chessBoard0.placePiece((a1.ChessPiece) pawn55, "a1.IllegalPositionException: a1.IllegalPositionException: ");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece61 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNull(color57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: a1.IllegalPositionException: ", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        // The following exception was thrown during execution in test generation
        try {
            king12.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard48 = null;
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard48, color62);
        a1.King king67 = new a1.King(chessBoard0, color62);
        java.util.ArrayList<java.lang.String> strList68 = king67.legalMoves();
        java.lang.String str69 = king67.getPosition();
        java.util.ArrayList<java.lang.String> strList70 = king67.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            king67.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strList70);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard19, color21);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color25);
        a1.Rook rook28 = new a1.Rook(chessBoard16, color25);
        a1.Pawn pawn29 = new a1.Pawn(chessBoard13, color25);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.Rook rook65 = new a1.Rook(chessBoard33, color60);
        a1.Rook rook66 = new a1.Rook(chessBoard30, color60);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.Rook rook79 = new a1.Rook(chessBoard67, color76);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = null;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Knight knight87 = new a1.Knight(chessBoard83, color85);
        a1.ChessBoard chessBoard88 = new a1.ChessBoard();
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook90 = new a1.Rook(chessBoard88, color89);
        a1.Bishop bishop91 = new a1.Bishop(chessBoard83, color89);
        a1.Rook rook92 = new a1.Rook(chessBoard80, color89);
        a1.Bishop bishop93 = new a1.Bishop(chessBoard67, color89);
        a1.Knight knight94 = new a1.Knight(chessBoard30, color89);
        a1.Rook rook95 = new a1.Rook(chessBoard13, color89);
        a1.Rook rook96 = new a1.Rook(chessBoard0, color89);
        java.util.ArrayList<java.lang.String> strList97 = rook96.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList97);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Bishop bishop25 = new a1.Bishop(chessBoard17, color23);
        a1.King king26 = new a1.King(chessBoard14, color23);
        a1.ChessBoard chessBoard27 = null;
        a1.ChessPiece.Color color28 = null;
        a1.Pawn pawn29 = new a1.Pawn(chessBoard27, color28);
        java.util.ArrayList<java.lang.String> strList30 = pawn29.legalMoves();
        boolean boolean32 = chessBoard14.placePiece((a1.ChessPiece) pawn29, "\u265e");
        chessBoard14.initialize();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard14, color47);
        java.util.ArrayList<java.lang.String> strList52 = pawn51.legalMoves();
        java.lang.String str53 = pawn51.toString();
        boolean boolean55 = chessBoard0.placePiece((a1.ChessPiece) pawn51, "\u265f");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = null;
        a1.ChessPiece.Color color58 = null;
        a1.Pawn pawn59 = new a1.Pawn(chessBoard57, color58);
        java.lang.String str60 = pawn59.toString();
        boolean boolean62 = chessBoard56.placePiece((a1.ChessPiece) pawn59, "");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard63, color69);
        a1.Knight knight72 = new a1.Knight(chessBoard56, color69);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard56, color75);
        java.lang.String str79 = bishop78.toString();
        a1.ChessPiece.Color color80 = bishop78.getColor();
        a1.Bishop bishop81 = new a1.Bishop(chessBoard0, color80);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265f" + "'", str60, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265d" + "'", str79, "\u265d");
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = null;
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = null;
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        java.lang.String str22 = pawn21.toString();
        boolean boolean24 = chessBoard18.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.Knight knight34 = new a1.Knight(chessBoard18, color31);
        a1.Knight knight35 = new a1.Knight(chessBoard17, color31);
        java.util.ArrayList<java.lang.String> strList36 = knight35.legalMoves();
        java.lang.String str37 = knight35.toString();
        java.lang.String str38 = knight35.getPosition();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1.IllegalPositionException: a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        boolean boolean46 = chessBoard41.placePiece((a1.ChessPiece) rook44, "\u265f");
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard47, color53);
        boolean boolean57 = chessBoard41.placePiece((a1.ChessPiece) knight55, "");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = null;
        a1.ChessPiece.Color color60 = null;
        a1.Pawn pawn61 = new a1.Pawn(chessBoard59, color60);
        java.lang.String str62 = pawn61.toString();
        boolean boolean64 = chessBoard58.placePiece((a1.ChessPiece) pawn61, "");
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.Knight knight74 = new a1.Knight(chessBoard58, color71);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Knight knight82 = new a1.Knight(chessBoard78, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard78, color84);
        a1.ChessBoard chessBoard87 = new a1.ChessBoard();
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook89 = new a1.Rook(chessBoard87, color88);
        a1.Pawn pawn90 = new a1.Pawn(chessBoard78, color88);
        a1.Pawn pawn91 = new a1.Pawn(chessBoard75, color88);
        a1.Pawn pawn92 = new a1.Pawn(chessBoard58, color88);
        a1.Pawn pawn93 = new a1.Pawn(chessBoard41, color88);
        a1.Pawn pawn94 = new a1.Pawn(chessBoard0, color88);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265e" + "'", str37, "\u265e");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265f" + "'", str62, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color88.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.lang.String str15 = pawn9.toString();
        java.util.ArrayList<java.lang.String> strList16 = pawn9.legalMoves();
        java.util.ArrayList<java.lang.String> strList17 = pawn9.legalMoves();
        java.lang.String str18 = pawn9.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265f" + "'", str15, "\u265f");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        java.lang.String str20 = rook19.toString();
        java.util.ArrayList<java.lang.String> strList21 = rook19.legalMoves();
        java.lang.String str22 = rook19.toString();
        java.lang.String str23 = rook19.toString();
        a1.ChessPiece.Color color24 = rook19.getColor();
        a1.Bishop bishop25 = new a1.Bishop(chessBoard14, color24);
        a1.Rook rook26 = new a1.Rook(chessBoard0, color24);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265c" + "'", str20, "\u265c");
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265c" + "'", str22, "\u265c");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265c" + "'", str23, "\u265c");
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        java.util.ArrayList<java.lang.String> strList27 = bishop26.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = bishop26.legalMoves();
        java.lang.Class<?> wildcardClass29 = bishop26.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        java.lang.String str27 = bishop26.toString();
        java.util.ArrayList<java.lang.String> strList28 = bishop26.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            bishop26.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265d" + "'", str27, "\u265d");
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException11);
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException19);
        java.lang.Throwable throwable23 = null;
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("hi!", throwable23);
        java.lang.Throwable[] throwableArray25 = illegalMoveException24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = illegalMoveException24.getSuppressed();
        java.lang.Throwable[] throwableArray27 = illegalMoveException24.getSuppressed();
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException32);
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException32);
        illegalMoveException24.addSuppressed((java.lang.Throwable) illegalMoveException34);
        illegalMoveException21.addSuppressed((java.lang.Throwable) illegalMoveException34);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException41.getSuppressed();
        java.lang.Throwable throwable48 = null;
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("hi!", throwable48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException49);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException49);
        illegalMoveException41.addSuppressed((java.lang.Throwable) illegalMoveException51);
        java.lang.Throwable[] throwableArray53 = illegalMoveException41.getSuppressed();
        java.lang.Throwable throwable59 = null;
        a1.IllegalMoveException illegalMoveException60 = new a1.IllegalMoveException("hi!", throwable59);
        a1.IllegalPositionException illegalPositionException61 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException60);
        a1.IllegalMoveException illegalMoveException62 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException61);
        a1.IllegalPositionException illegalPositionException63 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException61);
        a1.IllegalMoveException illegalMoveException64 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException61);
        illegalMoveException41.addSuppressed((java.lang.Throwable) illegalMoveException64);
        illegalPositionException38.addSuppressed((java.lang.Throwable) illegalMoveException64);
        java.lang.Throwable throwable69 = null;
        a1.IllegalMoveException illegalMoveException70 = new a1.IllegalMoveException("hi!", throwable69);
        a1.IllegalPositionException illegalPositionException71 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException70);
        java.lang.Throwable throwable75 = null;
        a1.IllegalMoveException illegalMoveException76 = new a1.IllegalMoveException("hi!", throwable75);
        a1.IllegalPositionException illegalPositionException77 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException76);
        a1.IllegalMoveException illegalMoveException78 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException77);
        illegalMoveException70.addSuppressed((java.lang.Throwable) illegalPositionException77);
        java.lang.Throwable throwable82 = null;
        a1.IllegalMoveException illegalMoveException83 = new a1.IllegalMoveException("hi!", throwable82);
        java.lang.Throwable[] throwableArray84 = illegalMoveException83.getSuppressed();
        java.lang.Throwable throwable86 = null;
        a1.IllegalMoveException illegalMoveException87 = new a1.IllegalMoveException("hi!", throwable86);
        java.lang.Throwable[] throwableArray88 = illegalMoveException87.getSuppressed();
        illegalMoveException83.addSuppressed((java.lang.Throwable) illegalMoveException87);
        a1.IllegalMoveException illegalMoveException90 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException83);
        illegalPositionException77.addSuppressed((java.lang.Throwable) illegalMoveException83);
        illegalMoveException64.addSuppressed((java.lang.Throwable) illegalPositionException77);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalPositionException77);
        java.lang.Throwable[] throwableArray94 = illegalMoveException12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        boolean boolean29 = chessBoard23.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Knight knight39 = new a1.Knight(chessBoard23, color36);
        a1.Knight knight40 = new a1.Knight(chessBoard17, color36);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard0, color36);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        boolean boolean48 = chessBoard43.placePiece((a1.ChessPiece) rook46, "\u265f");
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard43, color62);
        a1.King king67 = new a1.King(chessBoard42, color62);
        a1.Knight knight68 = new a1.Knight(chessBoard0, color62);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece70 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.King king51 = new a1.King(chessBoard39, color48);
        java.util.ArrayList<java.lang.String> strList52 = king51.legalMoves();
        java.util.ArrayList<java.lang.String> strList53 = king51.legalMoves();
        java.lang.String str54 = king51.toString();
        java.util.ArrayList<java.lang.String> strList55 = king51.legalMoves();
        java.lang.String str56 = king51.toString();
        java.util.ArrayList<java.lang.String> strList57 = king51.legalMoves();
        java.lang.String str58 = king51.toString();
        java.lang.String str59 = king51.getPosition();
        java.lang.String str60 = king51.toString();
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king51, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece64 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265a" + "'", str56, "\u265a");
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265a" + "'", str58, "\u265a");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265a" + "'", str60, "\u265a");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessBoard chessBoard20 = null;
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        java.lang.String str23 = pawn22.toString();
        java.lang.String str24 = pawn22.toString();
        boolean boolean26 = chessBoard13.placePiece((a1.ChessPiece) pawn22, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        boolean boolean32 = chessBoard27.placePiece((a1.ChessPiece) rook30, "\u265f");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard33, color39);
        boolean boolean43 = chessBoard27.placePiece((a1.ChessPiece) knight41, "");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.lang.String str48 = pawn47.toString();
        boolean boolean50 = chessBoard44.placePiece((a1.ChessPiece) pawn47, "");
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Pawn pawn63 = new a1.Pawn(chessBoard51, color61);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard44, color61);
        a1.King king65 = new a1.King(chessBoard27, color61);
        a1.King king66 = new a1.King(chessBoard13, color61);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.King king79 = new a1.King(chessBoard67, color76);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard13, color76);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard0, color76);
        a1.ChessPiece.Color color82 = null;
        a1.Knight knight83 = new a1.Knight(chessBoard0, color82);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("hi!", "\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265f" + "'", str23, "\u265f");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265f" + "'", str24, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265f" + "'", str48, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        java.lang.String str22 = knight19.toString();
        java.util.ArrayList<java.lang.String> strList23 = knight19.legalMoves();
        java.lang.String str24 = knight19.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265e" + "'", str22, "\u265e");
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265e" + "'", str24, "\u265e");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = null;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Knight knight81 = new a1.Knight(chessBoard77, color79);
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard77, color83);
        a1.Rook rook86 = new a1.Rook(chessBoard74, color83);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard71, color83);
        a1.King king88 = new a1.King(chessBoard0, color83);
        java.util.ArrayList<java.lang.String> strList89 = king88.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList89);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        java.util.ArrayList<java.lang.String> strList35 = bishop34.legalMoves();
        java.lang.String str36 = bishop34.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.lang.String str38 = pawn37.toString();
        boolean boolean40 = chessBoard34.placePiece((a1.ChessPiece) pawn37, "");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard41, color51);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard34, color51);
        java.util.ArrayList<java.lang.String> strList55 = bishop54.legalMoves();
        a1.ChessPiece.Color color56 = bishop54.getColor();
        a1.Knight knight57 = new a1.Knight(chessBoard17, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard0, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard62, color72);
        a1.Pawn pawn75 = new a1.Pawn(chessBoard59, color72);
        a1.King king76 = new a1.King(chessBoard0, color72);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = null;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        java.lang.String str83 = rook82.toString();
        java.util.ArrayList<java.lang.String> strList84 = rook82.legalMoves();
        java.lang.String str85 = rook82.toString();
        java.lang.String str86 = rook82.toString();
        a1.ChessPiece.Color color87 = rook82.getColor();
        a1.Bishop bishop88 = new a1.Bishop(chessBoard77, color87);
        a1.Rook rook89 = new a1.Rook(chessBoard0, color87);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece91 = chessBoard0.getPiece("a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265c" + "'", str85, "\u265c");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u265c" + "'", str86, "\u265c");
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray10 = illegalMoveException7.getSuppressed();
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException11);
        java.lang.String str14 = illegalPositionException13.toString();
        org.junit.Assert.assertNotNull(throwableArray10);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265d" + "'", str14, "\u265d");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: a1.IllegalPositionException: ", "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        java.util.ArrayList<java.lang.String> strList14 = pawn9.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = pawn9.legalMoves();
        java.util.ArrayList<java.lang.String> strList16 = pawn9.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        java.lang.String str26 = king25.toString();
        java.util.ArrayList<java.lang.String> strList27 = king25.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            king25.setPosition("a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265a" + "'", str26, "\u265a");
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        java.util.ArrayList<java.lang.String> strList17 = knight14.legalMoves();
        a1.ChessPiece.Color color18 = knight14.getColor();
        java.lang.String str19 = knight14.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265e" + "'", str19, "\u265e");
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str21 = bishop20.toString();
        java.lang.String str22 = bishop20.getPosition();
        java.lang.Class<?> wildcardClass23 = bishop20.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265d" + "'", str21, "\u265d");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Bishop bishop25 = new a1.Bishop(chessBoard17, color23);
        a1.King king26 = new a1.King(chessBoard14, color23);
        a1.ChessBoard chessBoard27 = null;
        a1.ChessPiece.Color color28 = null;
        a1.Pawn pawn29 = new a1.Pawn(chessBoard27, color28);
        java.util.ArrayList<java.lang.String> strList30 = pawn29.legalMoves();
        boolean boolean32 = chessBoard14.placePiece((a1.ChessPiece) pawn29, "\u265e");
        chessBoard14.initialize();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard14, color47);
        java.util.ArrayList<java.lang.String> strList52 = pawn51.legalMoves();
        java.lang.String str53 = pawn51.toString();
        boolean boolean55 = chessBoard0.placePiece((a1.ChessPiece) pawn51, "\u265f");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece57 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = null;
        a1.ChessPiece.Color color53 = null;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard52, color53);
        java.lang.String str55 = pawn54.toString();
        boolean boolean57 = chessBoard51.placePiece((a1.ChessPiece) pawn54, "");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard58, color68);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard51, color68);
        java.util.ArrayList<java.lang.String> strList72 = bishop71.legalMoves();
        a1.ChessPiece.Color color73 = bishop71.getColor();
        a1.Knight knight74 = new a1.Knight(chessBoard34, color73);
        a1.Knight knight75 = new a1.Knight(chessBoard17, color73);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard79, color85);
        a1.ChessBoard chessBoard88 = new a1.ChessBoard();
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook90 = new a1.Rook(chessBoard88, color89);
        a1.Pawn pawn91 = new a1.Pawn(chessBoard79, color89);
        a1.Pawn pawn92 = new a1.Pawn(chessBoard76, color89);
        a1.King king93 = new a1.King(chessBoard17, color89);
        a1.Knight knight94 = new a1.Knight(chessBoard0, color89);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265f" + "'", str55, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.Rook rook29 = new a1.Rook(chessBoard17, color26);
        a1.King king30 = new a1.King(chessBoard0, color26);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece32 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        java.lang.String str23 = bishop22.toString();
        a1.ChessPiece.Color color24 = bishop22.getColor();
        java.util.ArrayList<java.lang.String> strList25 = bishop22.legalMoves();
        java.lang.String str26 = bishop22.toString();
        java.lang.String str27 = bishop22.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265d" + "'", str23, "\u265d");
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265d" + "'", str26, "\u265d");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265d" + "'", str27, "\u265d");
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = null;
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        java.lang.String str12 = pawn11.toString();
        boolean boolean14 = chessBoard8.placePiece((a1.ChessPiece) pawn11, "");
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.Knight knight24 = new a1.Knight(chessBoard8, color21);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard8, color27);
        a1.King king31 = new a1.King(chessBoard0, color27);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265f" + "'", str12, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = null;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.Rook rook56 = new a1.Rook(chessBoard44, color53);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Rook rook69 = new a1.Rook(chessBoard57, color66);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard44, color66);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn72 = new a1.Pawn(chessBoard44, color71);
        a1.ChessPiece.Color color73 = pawn72.getColor();
        a1.Pawn pawn74 = new a1.Pawn(chessBoard0, color73);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        chessBoard0.initialize();
        a1.ChessPiece.Color color60 = null;
        a1.Bishop bishop61 = new a1.Bishop(chessBoard0, color60);
        java.lang.String str62 = bishop61.toString();
        java.util.ArrayList<java.lang.String> strList63 = bishop61.legalMoves();
        java.lang.Class<?> wildcardClass64 = bishop61.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265d" + "'", str62, "\u265d");
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.Rook rook34 = new a1.Rook(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard22, color44);
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard22, color49);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard0, color49);
        java.util.ArrayList<java.lang.String> strList52 = pawn51.legalMoves();
        a1.ChessPiece.Color color53 = pawn51.getColor();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        java.lang.Throwable[] throwableArray7 = illegalMoveException6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = illegalMoveException6.getSuppressed();
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable[] throwableArray11 = illegalMoveException6.getSuppressed();
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        java.lang.Throwable[] throwableArray16 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = illegalMoveException15.getSuppressed();
        java.lang.Throwable throwable22 = null;
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("hi!", throwable22);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException23);
        illegalMoveException15.addSuppressed((java.lang.Throwable) illegalMoveException25);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException25);
        java.lang.Throwable throwable30 = null;
        a1.IllegalMoveException illegalMoveException31 = new a1.IllegalMoveException("hi!", throwable30);
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("\u265a", throwable30);
        java.lang.Throwable[] throwableArray33 = illegalMoveException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = illegalMoveException32.getSuppressed();
        java.lang.Throwable throwable38 = null;
        a1.IllegalMoveException illegalMoveException39 = new a1.IllegalMoveException("hi!", throwable38);
        java.lang.Throwable[] throwableArray40 = illegalMoveException39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = illegalMoveException39.getSuppressed();
        a1.IllegalPositionException illegalPositionException42 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException39);
        java.lang.Throwable[] throwableArray43 = illegalPositionException42.getSuppressed();
        a1.IllegalMoveException illegalMoveException44 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException42);
        illegalMoveException32.addSuppressed((java.lang.Throwable) illegalPositionException42);
        illegalPositionException27.addSuppressed((java.lang.Throwable) illegalPositionException42);
        illegalMoveException6.addSuppressed((java.lang.Throwable) illegalPositionException42);
        a1.IllegalMoveException illegalMoveException48 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException49 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException48);
        java.lang.String str50 = illegalMoveException48.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "a1.IllegalMoveException: " + "'", str50, "a1.IllegalMoveException: ");
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        java.lang.String str4 = pawn2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = pawn3.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        java.lang.String str33 = pawn31.toString();
        boolean boolean35 = chessBoard22.placePiece((a1.ChessPiece) pawn31, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        boolean boolean41 = chessBoard36.placePiece((a1.ChessPiece) rook39, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard36.placePiece((a1.ChessPiece) knight50, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        a1.King king74 = new a1.King(chessBoard36, color70);
        a1.King king75 = new a1.King(chessBoard22, color70);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color70);
        a1.ChessPiece chessPiece77 = null;
        boolean boolean79 = chessBoard0.placePiece(chessPiece77, "a1.IllegalMoveException: hi!");
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException8);
        java.lang.String str10 = illegalMoveException9.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "a1.IllegalMoveException: " + "'", str10, "a1.IllegalMoveException: ");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard23, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Pawn pawn35 = new a1.Pawn(chessBoard23, color33);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard20, color33);
        a1.Pawn pawn37 = new a1.Pawn(chessBoard0, color33);
        java.util.ArrayList<java.lang.String> strList38 = pawn37.legalMoves();
        java.lang.String str39 = pawn37.toString();
        java.lang.String str40 = pawn37.getPosition();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.lang.String str4 = rook2.getPosition();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.lang.String str6 = rook2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = null;
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        java.lang.String str8 = pawn7.toString();
        boolean boolean10 = chessBoard4.placePiece((a1.ChessPiece) pawn7, "");
        a1.ChessBoard chessBoard11 = null;
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard11, color12);
        java.lang.String str14 = pawn13.toString();
        java.lang.String str15 = pawn13.toString();
        boolean boolean17 = chessBoard4.placePiece((a1.ChessPiece) pawn13, "\u265f");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        boolean boolean23 = chessBoard18.placePiece((a1.ChessPiece) rook21, "\u265f");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard24, color30);
        boolean boolean34 = chessBoard18.placePiece((a1.ChessPiece) knight32, "");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Pawn pawn54 = new a1.Pawn(chessBoard42, color52);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard35, color52);
        a1.King king56 = new a1.King(chessBoard18, color52);
        a1.King king57 = new a1.King(chessBoard4, color52);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = null;
        a1.ChessPiece.Color color60 = null;
        a1.Pawn pawn61 = new a1.Pawn(chessBoard59, color60);
        java.lang.String str62 = pawn61.toString();
        boolean boolean64 = chessBoard58.placePiece((a1.ChessPiece) pawn61, "");
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.Knight knight74 = new a1.Knight(chessBoard58, color71);
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight76 = new a1.Knight(chessBoard58, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard4, color75);
        a1.Knight knight78 = new a1.Knight(chessBoard0, color75);
        // The following exception was thrown during execution in test generation
        try {
            knight78.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265f" + "'", str14, "\u265f");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265f" + "'", str15, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265f" + "'", str62, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.Rook rook34 = new a1.Rook(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard22, color44);
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard22, color49);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard0, color49);
        java.util.ArrayList<java.lang.String> strList52 = pawn51.legalMoves();
        java.lang.String str53 = pawn51.toString();
        java.lang.String str54 = pawn51.getPosition();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("\u265d", throwable2);
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("a1.IllegalPositionException: hi!", throwable2);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException25);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException25);
        java.lang.Throwable[] throwableArray28 = illegalPositionException25.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        boolean boolean10 = chessBoard0.placePiece((a1.ChessPiece) rook6, "\u265e");
        a1.ChessPiece.Color color11 = null;
        a1.Rook rook12 = new a1.Rook(chessBoard0, color11);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard13, color20);
        java.util.ArrayList<java.lang.String> strList24 = knight23.legalMoves();
        a1.ChessPiece.Color color25 = knight23.getColor();
        a1.Knight knight26 = new a1.Knight(chessBoard0, color25);
        // The following exception was thrown during execution in test generation
        try {
            knight26.setPosition("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard9, color28);
        a1.Knight knight32 = new a1.Knight(chessBoard0, color28);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard40, color50);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard33, color50);
        java.util.ArrayList<java.lang.String> strList54 = bishop53.legalMoves();
        java.lang.String str55 = bishop53.toString();
        boolean boolean57 = chessBoard0.placePiece((a1.ChessPiece) bishop53, "\u265f");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece59 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265d" + "'", str55, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Knight knight54 = new a1.Knight(chessBoard50, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = null;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.Rook rook67 = new a1.Rook(chessBoard55, color64);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = null;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Knight knight75 = new a1.Knight(chessBoard71, color73);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard71, color77);
        a1.Rook rook80 = new a1.Rook(chessBoard68, color77);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard55, color77);
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn83 = new a1.Pawn(chessBoard55, color82);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard50, color82);
        java.util.ArrayList<java.lang.String> strList85 = bishop84.legalMoves();
        java.lang.String str86 = bishop84.toString();
        a1.ChessPiece.Color color87 = bishop84.getColor();
        a1.King king88 = new a1.King(chessBoard0, color87);
        java.lang.String str89 = king88.toString();
        java.util.ArrayList<java.lang.String> strList90 = king88.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u265d" + "'", str86, "\u265d");
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u265a" + "'", str89, "\u265a");
        org.junit.Assert.assertNotNull(strList90);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.getPosition();
        java.lang.String str12 = bishop10.toString();
        java.lang.String str13 = bishop10.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265d" + "'", str13, "\u265d");
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        a1.ChessPiece chessPiece24 = null;
        boolean boolean26 = chessBoard5.placePiece(chessPiece24, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.King king39 = new a1.King(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = null;
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard40, color41);
        java.util.ArrayList<java.lang.String> strList43 = pawn42.legalMoves();
        boolean boolean45 = chessBoard27.placePiece((a1.ChessPiece) pawn42, "\u265e");
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard27, color46);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard48, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = null;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Rook rook65 = new a1.Rook(chessBoard53, color62);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = null;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Knight knight73 = new a1.Knight(chessBoard69, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard69, color75);
        a1.Rook rook78 = new a1.Rook(chessBoard66, color75);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard53, color75);
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn81 = new a1.Pawn(chessBoard53, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard48, color80);
        java.util.ArrayList<java.lang.String> strList83 = bishop82.legalMoves();
        java.lang.String str84 = bishop82.toString();
        a1.ChessPiece.Color color85 = bishop82.getColor();
        a1.Pawn pawn86 = new a1.Pawn(chessBoard27, color85);
        a1.Rook rook87 = new a1.Rook(chessBoard5, color85);
        a1.Pawn pawn88 = new a1.Pawn(chessBoard0, color85);
        java.util.ArrayList<java.lang.String> strList89 = pawn88.legalMoves();
        java.util.ArrayList<java.lang.String> strList90 = pawn88.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265d" + "'", str84, "\u265d");
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(strList90);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        java.lang.String str39 = king38.toString();
        java.util.ArrayList<java.lang.String> strList40 = king38.legalMoves();
        java.util.ArrayList<java.lang.String> strList41 = king38.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265a" + "'", str39, "\u265a");
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strList41);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList11 = bishop10.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = bishop10.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessBoard chessBoard6 = null;
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        java.lang.String str9 = pawn8.toString();
        boolean boolean11 = chessBoard5.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Knight knight16 = new a1.Knight(chessBoard12, color14);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.King king29 = new a1.King(chessBoard17, color26);
        a1.ChessBoard chessBoard30 = null;
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard30, color31);
        java.util.ArrayList<java.lang.String> strList33 = pawn32.legalMoves();
        boolean boolean35 = chessBoard17.placePiece((a1.ChessPiece) pawn32, "\u265e");
        chessBoard17.initialize();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard40, color50);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard37, color50);
        a1.Pawn pawn54 = new a1.Pawn(chessBoard17, color50);
        a1.Knight knight55 = new a1.Knight(chessBoard12, color50);
        a1.Rook rook56 = new a1.Rook(chessBoard5, color50);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        boolean boolean62 = chessBoard57.placePiece((a1.ChessPiece) rook60, "\u265f");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard63, color69);
        boolean boolean73 = chessBoard57.placePiece((a1.ChessPiece) knight71, "");
        a1.ChessPiece.Color color74 = knight71.getColor();
        a1.King king75 = new a1.King(chessBoard5, color74);
        a1.King king76 = new a1.King(chessBoard0, color74);
        java.lang.String str77 = king76.toString();
        java.lang.String str78 = king76.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265a" + "'", str77, "\u265a");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265a" + "'", str78, "\u265a");
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        // The following exception was thrown during execution in test generation
        try {
            rook14.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard19, color21);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Pawn pawn31 = new a1.Pawn(chessBoard19, color29);
        java.lang.String str32 = pawn31.getPosition();
        a1.ChessPiece.Color color33 = pawn31.getColor();
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color33);
        a1.ChessPiece chessPiece35 = null;
        boolean boolean37 = chessBoard0.placePiece(chessPiece35, "\u265a");
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.Rook rook34 = new a1.Rook(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard22, color44);
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard22, color49);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard0, color49);
        java.util.ArrayList<java.lang.String> strList52 = pawn51.legalMoves();
        java.lang.String str53 = pawn51.toString();
        java.lang.String str54 = pawn51.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        java.lang.Throwable throwable1 = null;
        a1.IllegalPositionException illegalPositionException2 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", throwable1);
        java.lang.String str3 = illegalPositionException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "a1.IllegalPositionException: a1.IllegalMoveException: hi!" + "'", str3, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable[] throwableArray25 = illegalMoveException21.getSuppressed();
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException32);
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException33);
        a1.IllegalPositionException illegalPositionException35 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException33);
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException33);
        illegalMoveException21.addSuppressed((java.lang.Throwable) illegalMoveException36);
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException41.getSuppressed();
        java.lang.Throwable throwable45 = null;
        a1.IllegalMoveException illegalMoveException46 = new a1.IllegalMoveException("hi!", throwable45);
        a1.IllegalPositionException illegalPositionException47 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException46);
        java.lang.Throwable[] throwableArray48 = illegalMoveException46.getSuppressed();
        illegalMoveException41.addSuppressed((java.lang.Throwable) illegalMoveException46);
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException41);
        illegalMoveException36.addSuppressed((java.lang.Throwable) illegalMoveException41);
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException41);
        java.lang.Throwable[] throwableArray53 = illegalMoveException52.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable[] throwableArray25 = illegalMoveException21.getSuppressed();
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException32);
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException33);
        a1.IllegalPositionException illegalPositionException35 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException33);
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException33);
        illegalMoveException21.addSuppressed((java.lang.Throwable) illegalMoveException36);
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException41.getSuppressed();
        java.lang.Throwable throwable45 = null;
        a1.IllegalMoveException illegalMoveException46 = new a1.IllegalMoveException("hi!", throwable45);
        a1.IllegalPositionException illegalPositionException47 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException46);
        java.lang.Throwable[] throwableArray48 = illegalMoveException46.getSuppressed();
        illegalMoveException41.addSuppressed((java.lang.Throwable) illegalMoveException46);
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException41);
        illegalMoveException36.addSuppressed((java.lang.Throwable) illegalMoveException41);
        a1.IllegalPositionException illegalPositionException52 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        java.lang.Throwable[] throwableArray53 = illegalMoveException36.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.lang.String str6 = knight4.toString();
        java.lang.String str7 = knight4.toString();
        java.lang.String str8 = knight4.toString();
        java.lang.String str9 = knight4.getPosition();
        java.util.ArrayList<java.lang.String> strList10 = knight4.legalMoves();
        java.lang.Class<?> wildcardClass11 = knight4.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265e" + "'", str6, "\u265e");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265e" + "'", str7, "\u265e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            illegalMoveException4.addSuppressed(throwable10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        boolean boolean20 = chessBoard15.placePiece((a1.ChessPiece) rook18, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard21, color27);
        boolean boolean31 = chessBoard15.placePiece((a1.ChessPiece) knight29, "");
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = null;
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard33, color34);
        java.lang.String str36 = pawn35.toString();
        boolean boolean38 = chessBoard32.placePiece((a1.ChessPiece) pawn35, "");
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.Knight knight48 = new a1.Knight(chessBoard32, color45);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Pawn pawn64 = new a1.Pawn(chessBoard52, color62);
        a1.Pawn pawn65 = new a1.Pawn(chessBoard49, color62);
        a1.Pawn pawn66 = new a1.Pawn(chessBoard32, color62);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard15, color62);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard0, color62);
        java.lang.String str69 = bishop68.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265f" + "'", str36, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException11);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException11);
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException20);
        java.lang.Throwable throwable24 = null;
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("hi!", throwable24);
        java.lang.Throwable[] throwableArray26 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = illegalMoveException25.getSuppressed();
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException33);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException33);
        illegalMoveException25.addSuppressed((java.lang.Throwable) illegalMoveException35);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalMoveException35);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException22);
        java.lang.Throwable throwable41 = null;
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("hi!", throwable41);
        java.lang.Throwable[] throwableArray43 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray45 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable49 = null;
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("hi!", throwable49);
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException50);
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException50);
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalMoveException52);
        java.lang.Throwable[] throwableArray54 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable60 = null;
        a1.IllegalMoveException illegalMoveException61 = new a1.IllegalMoveException("hi!", throwable60);
        a1.IllegalPositionException illegalPositionException62 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException61);
        a1.IllegalMoveException illegalMoveException63 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException62);
        a1.IllegalPositionException illegalPositionException64 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException62);
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException62);
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalMoveException65);
        illegalPositionException39.addSuppressed((java.lang.Throwable) illegalMoveException65);
        illegalPositionException11.addSuppressed((java.lang.Throwable) illegalMoveException65);
        a1.IllegalMoveException illegalMoveException69 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException65);
        java.lang.Throwable throwable75 = null;
        a1.IllegalMoveException illegalMoveException76 = new a1.IllegalMoveException("hi!", throwable75);
        a1.IllegalPositionException illegalPositionException77 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException76);
        a1.IllegalMoveException illegalMoveException78 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException76);
        java.lang.Throwable throwable80 = null;
        a1.IllegalMoveException illegalMoveException81 = new a1.IllegalMoveException("hi!", throwable80);
        java.lang.Throwable[] throwableArray82 = illegalMoveException81.getSuppressed();
        java.lang.Throwable[] throwableArray83 = illegalMoveException81.getSuppressed();
        java.lang.Throwable[] throwableArray84 = illegalMoveException81.getSuppressed();
        java.lang.Throwable throwable88 = null;
        a1.IllegalMoveException illegalMoveException89 = new a1.IllegalMoveException("hi!", throwable88);
        a1.IllegalPositionException illegalPositionException90 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException89);
        a1.IllegalMoveException illegalMoveException91 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException89);
        illegalMoveException81.addSuppressed((java.lang.Throwable) illegalMoveException91);
        illegalMoveException78.addSuppressed((java.lang.Throwable) illegalMoveException91);
        a1.IllegalPositionException illegalPositionException94 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException78);
        a1.IllegalMoveException illegalMoveException95 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException94);
        illegalMoveException65.addSuppressed((java.lang.Throwable) illegalMoveException95);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        a1.ChessPiece.Color color72 = rook71.getColor();
        java.util.ArrayList<java.lang.String> strList73 = rook71.legalMoves();
        java.util.ArrayList<java.lang.String> strList74 = rook71.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strList74);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        a1.ChessPiece.Color color37 = rook36.getColor();
        java.lang.String str38 = rook36.toString();
        java.lang.String str39 = rook36.toString();
        java.lang.String str40 = rook36.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265c" + "'", str38, "\u265c");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265c" + "'", str39, "\u265c");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u265c" + "'", str40, "\u265c");
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException14);
        java.lang.String str18 = illegalMoveException17.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265e" + "'", str18, "\u265e");
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard48 = null;
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard48, color62);
        a1.King king67 = new a1.King(chessBoard0, color62);
        java.util.ArrayList<java.lang.String> strList68 = king67.legalMoves();
        java.lang.String str69 = king67.getPosition();
        java.lang.String str70 = king67.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265a" + "'", str70, "\u265a");
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265a", throwable11);
        java.lang.Throwable[] throwableArray14 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException13.getSuppressed();
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException13);
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException13);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece27 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        java.lang.String str73 = rook72.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        java.lang.String str63 = king60.toString();
        java.util.ArrayList<java.lang.String> strList64 = king60.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265a" + "'", str63, "\u265a");
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable[] throwableArray8 = illegalPositionException7.getSuppressed();
        java.lang.String str9 = illegalPositionException7.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265d" + "'", str9, "\u265d");
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable[] throwableArray13 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.util.ArrayList<java.lang.String> strList5 = knight4.legalMoves();
        a1.ChessPiece.Color color6 = knight4.getColor();
        // The following exception was thrown during execution in test generation
        try {
            knight4.setPosition("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.lang.Class<?> wildcardClass7 = rook2.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = king12.legalMoves();
        java.lang.String str16 = king12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265a" + "'", str16, "\u265a");
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        chessBoard13.initialize();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        java.lang.String str28 = pawn26.toString();
        boolean boolean30 = chessBoard17.placePiece((a1.ChessPiece) pawn26, "\u265f");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        boolean boolean36 = chessBoard31.placePiece((a1.ChessPiece) rook34, "\u265f");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard37, color43);
        boolean boolean47 = chessBoard31.placePiece((a1.ChessPiece) knight45, "");
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = null;
        a1.ChessPiece.Color color50 = null;
        a1.Pawn pawn51 = new a1.Pawn(chessBoard49, color50);
        java.lang.String str52 = pawn51.toString();
        boolean boolean54 = chessBoard48.placePiece((a1.ChessPiece) pawn51, "");
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard48, color65);
        a1.King king69 = new a1.King(chessBoard31, color65);
        a1.King king70 = new a1.King(chessBoard17, color65);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessBoard chessBoard72 = null;
        a1.ChessPiece.Color color73 = null;
        a1.Pawn pawn74 = new a1.Pawn(chessBoard72, color73);
        java.lang.String str75 = pawn74.toString();
        boolean boolean77 = chessBoard71.placePiece((a1.ChessPiece) pawn74, "");
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Knight knight82 = new a1.Knight(chessBoard78, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard78, color84);
        a1.Knight knight87 = new a1.Knight(chessBoard71, color84);
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight89 = new a1.Knight(chessBoard71, color88);
        a1.Bishop bishop90 = new a1.Bishop(chessBoard17, color88);
        a1.Knight knight91 = new a1.Knight(chessBoard13, color88);
        a1.Bishop bishop92 = new a1.Bishop(chessBoard0, color88);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u265f" + "'", str52, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u265f" + "'", str75, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color88.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        java.lang.String str7 = knight4.getPosition();
        java.lang.String str8 = knight4.toString();
        // The following exception was thrown during execution in test generation
        try {
            knight4.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard23, color29);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard23, color32);
        java.lang.String str34 = bishop33.toString();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) bishop33, "a1.IllegalMoveException: hi!");
        java.util.ArrayList<java.lang.String> strList37 = bishop33.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265d" + "'", str34, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.lang.String str18 = king12.toString();
        java.lang.String str19 = king12.toString();
        java.util.ArrayList<java.lang.String> strList20 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265a" + "'", str18, "\u265a");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265a" + "'", str19, "\u265a");
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece20 = chessBoard0.getPiece("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        java.lang.String str7 = rook3.toString();
        java.lang.String str8 = rook3.toString();
        java.lang.String str9 = rook3.toString();
        java.util.ArrayList<java.lang.String> strList10 = rook3.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException25);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException25);
        java.lang.String str28 = illegalPositionException25.toString();
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "a1.IllegalPositionException: a1.IllegalMoveException: hi!" + "'", str28, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.toString();
        java.lang.String str12 = bishop10.toString();
        java.util.ArrayList<java.lang.String> strList13 = bishop10.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = bishop10.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = bishop10.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265d" + "'", str11, "\u265d");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException13);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException13);
        java.lang.String str17 = illegalPositionException16.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.Rook rook68 = new a1.Rook(chessBoard0, color65);
        java.lang.String str69 = rook68.toString();
        java.lang.String str70 = rook68.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265c" + "'", str69, "\u265c");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265c" + "'", str70, "\u265c");
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.lang.String str16 = king12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265a" + "'", str16, "\u265a");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        java.util.ArrayList<java.lang.String> strList72 = rook71.legalMoves();
        java.lang.Class<?> wildcardClass73 = rook71.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard23, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Pawn pawn35 = new a1.Pawn(chessBoard23, color33);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard20, color33);
        a1.Pawn pawn37 = new a1.Pawn(chessBoard0, color33);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = null;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.Rook rook53 = new a1.Rook(chessBoard41, color50);
        a1.Pawn pawn54 = new a1.Pawn(chessBoard38, color50);
        a1.Rook rook55 = new a1.Rook(chessBoard0, color50);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        boolean boolean62 = chessBoard57.placePiece((a1.ChessPiece) rook60, "\u265f");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = null;
        a1.ChessPiece.Color color65 = null;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard64, color65);
        java.lang.String str67 = pawn66.toString();
        boolean boolean69 = chessBoard63.placePiece((a1.ChessPiece) pawn66, "");
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.Knight knight79 = new a1.Knight(chessBoard63, color76);
        a1.Knight knight80 = new a1.Knight(chessBoard57, color76);
        a1.King king81 = new a1.King(chessBoard56, color76);
        java.lang.String str82 = king81.toString();
        java.util.ArrayList<java.lang.String> strList83 = king81.legalMoves();
        java.util.ArrayList<java.lang.String> strList84 = king81.legalMoves();
        java.util.ArrayList<java.lang.String> strList85 = king81.legalMoves();
        a1.ChessPiece.Color color86 = king81.getColor();
        a1.Pawn pawn87 = new a1.Pawn(chessBoard0, color86);
        java.lang.String str88 = pawn87.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u265f" + "'", str67, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u265a" + "'", str82, "\u265a");
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u265f" + "'", str88, "\u265f");
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Bishop bishop39 = new a1.Bishop(chessBoard31, color37);
        a1.King king40 = new a1.King(chessBoard28, color37);
        a1.ChessBoard chessBoard41 = null;
        a1.ChessPiece.Color color42 = null;
        a1.Pawn pawn43 = new a1.Pawn(chessBoard41, color42);
        java.util.ArrayList<java.lang.String> strList44 = pawn43.legalMoves();
        boolean boolean46 = chessBoard28.placePiece((a1.ChessPiece) pawn43, "\u265e");
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Pawn pawn59 = new a1.Pawn(chessBoard47, color57);
        java.lang.String str60 = pawn59.getPosition();
        a1.ChessPiece.Color color61 = pawn59.getColor();
        a1.Pawn pawn62 = new a1.Pawn(chessBoard28, color61);
        a1.King king63 = new a1.King(chessBoard0, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.Rook rook79 = new a1.Rook(chessBoard67, color76);
        a1.Pawn pawn80 = new a1.Pawn(chessBoard64, color76);
        a1.Rook rook81 = new a1.Rook(chessBoard0, color76);
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.King king66 = new a1.King(chessBoard54, color63);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard0, color63);
        a1.ChessPiece.Color color68 = bishop67.getColor();
        java.lang.String str69 = bishop67.toString();
        java.util.ArrayList<java.lang.String> strList70 = bishop67.legalMoves();
        java.util.ArrayList<java.lang.String> strList71 = bishop67.legalMoves();
        java.lang.String str72 = bishop67.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265d" + "'", str72, "\u265d");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        java.lang.String str48 = pawn38.toString();
        java.util.ArrayList<java.lang.String> strList49 = pawn38.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265f" + "'", str48, "\u265f");
        org.junit.Assert.assertNotNull(strList49);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        a1.Knight knight13 = new a1.Knight(chessBoard9, color11);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Bishop bishop17 = new a1.Bishop(chessBoard9, color15);
        a1.Rook rook18 = new a1.Rook(chessBoard6, color15);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.Rook rook31 = new a1.Rook(chessBoard19, color28);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard6, color28);
        a1.Rook rook33 = new a1.Rook(chessBoard1, color28);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.Rook rook51 = new a1.Rook(chessBoard39, color48);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = null;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.Rook rook64 = new a1.Rook(chessBoard52, color61);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard39, color61);
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn67 = new a1.Pawn(chessBoard39, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard34, color66);
        java.util.ArrayList<java.lang.String> strList69 = bishop68.legalMoves();
        java.lang.String str70 = bishop68.toString();
        a1.ChessPiece.Color color71 = bishop68.getColor();
        a1.Rook rook72 = new a1.Rook(chessBoard1, color71);
        a1.ChessPiece.Color color73 = rook72.getColor();
        a1.Bishop bishop74 = new a1.Bishop(chessBoard0, color73);
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color11 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color11.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265d" + "'", str70, "\u265d");
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        java.lang.String str28 = pawn26.toString();
        boolean boolean30 = chessBoard17.placePiece((a1.ChessPiece) pawn26, "\u265f");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        boolean boolean36 = chessBoard31.placePiece((a1.ChessPiece) rook34, "\u265f");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard37, color43);
        boolean boolean47 = chessBoard31.placePiece((a1.ChessPiece) knight45, "");
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = null;
        a1.ChessPiece.Color color50 = null;
        a1.Pawn pawn51 = new a1.Pawn(chessBoard49, color50);
        java.lang.String str52 = pawn51.toString();
        boolean boolean54 = chessBoard48.placePiece((a1.ChessPiece) pawn51, "");
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard48, color65);
        a1.King king69 = new a1.King(chessBoard31, color65);
        a1.King king70 = new a1.King(chessBoard17, color65);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = null;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.King king83 = new a1.King(chessBoard71, color80);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard17, color80);
        a1.ChessPiece.Color color85 = bishop84.getColor();
        a1.Pawn pawn86 = new a1.Pawn(chessBoard0, color85);
        a1.ChessBoard chessBoard87 = new a1.ChessBoard();
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook89 = new a1.Rook(chessBoard87, color88);
        a1.King king90 = new a1.King(chessBoard0, color88);
        java.lang.String str91 = king90.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u265f" + "'", str52, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color88.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u265a" + "'", str91, "\u265a");
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Knight knight38 = new a1.Knight(chessBoard22, color35);
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight40 = new a1.Knight(chessBoard22, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = null;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.Rook rook61 = new a1.Rook(chessBoard49, color58);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.Rook rook74 = new a1.Rook(chessBoard62, color71);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard49, color71);
        a1.Rook rook76 = new a1.Rook(chessBoard44, color71);
        a1.Rook rook77 = new a1.Rook(chessBoard41, color71);
        java.util.ArrayList<java.lang.String> strList78 = rook77.legalMoves();
        a1.ChessPiece.Color color79 = rook77.getColor();
        a1.Pawn pawn80 = new a1.Pawn(chessBoard22, color79);
        a1.King king81 = new a1.King(chessBoard0, color79);
        java.lang.String str82 = king81.toString();
        java.util.ArrayList<java.lang.String> strList83 = king81.legalMoves();
        java.lang.Class<?> wildcardClass84 = king81.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u265a" + "'", str82, "\u265a");
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessBoard chessBoard20 = null;
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        java.lang.String str23 = pawn22.toString();
        java.lang.String str24 = pawn22.toString();
        boolean boolean26 = chessBoard13.placePiece((a1.ChessPiece) pawn22, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        boolean boolean32 = chessBoard27.placePiece((a1.ChessPiece) rook30, "\u265f");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard33, color39);
        boolean boolean43 = chessBoard27.placePiece((a1.ChessPiece) knight41, "");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.lang.String str48 = pawn47.toString();
        boolean boolean50 = chessBoard44.placePiece((a1.ChessPiece) pawn47, "");
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Pawn pawn63 = new a1.Pawn(chessBoard51, color61);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard44, color61);
        a1.King king65 = new a1.King(chessBoard27, color61);
        a1.King king66 = new a1.King(chessBoard13, color61);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard0, color61);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece69 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265f" + "'", str23, "\u265f");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265f" + "'", str24, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265f" + "'", str48, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable[] throwableArray10 = illegalMoveException5.getSuppressed();
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException14.getSuppressed();
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException22);
        illegalMoveException14.addSuppressed((java.lang.Throwable) illegalMoveException24);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException24);
        java.lang.Throwable throwable29 = null;
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("hi!", throwable29);
        a1.IllegalMoveException illegalMoveException31 = new a1.IllegalMoveException("\u265a", throwable29);
        java.lang.Throwable[] throwableArray32 = illegalMoveException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = illegalMoveException31.getSuppressed();
        java.lang.Throwable throwable37 = null;
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("hi!", throwable37);
        java.lang.Throwable[] throwableArray39 = illegalMoveException38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = illegalMoveException38.getSuppressed();
        a1.IllegalPositionException illegalPositionException41 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException38);
        java.lang.Throwable[] throwableArray42 = illegalPositionException41.getSuppressed();
        a1.IllegalMoveException illegalMoveException43 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException41);
        illegalMoveException31.addSuppressed((java.lang.Throwable) illegalPositionException41);
        illegalPositionException26.addSuppressed((java.lang.Throwable) illegalPositionException41);
        illegalMoveException5.addSuppressed((java.lang.Throwable) illegalPositionException41);
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException5);
        java.lang.Class<?> wildcardClass48 = illegalMoveException47.getClass();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.lang.String str7 = pawn2.getPosition();
        java.lang.String str8 = pawn2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = knight18.legalMoves();
        java.lang.String str20 = knight18.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265e" + "'", str20, "\u265e");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = null;
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Knight knight9 = new a1.Knight(chessBoard5, color7);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        a1.Bishop bishop13 = new a1.Bishop(chessBoard5, color11);
        a1.Rook rook14 = new a1.Rook(chessBoard2, color11);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard18, color24);
        a1.Rook rook27 = new a1.Rook(chessBoard15, color24);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard2, color24);
        a1.King king29 = new a1.King(chessBoard1, color24);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard0, color24);
        java.util.ArrayList<java.lang.String> strList31 = bishop30.legalMoves();
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color11 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color11.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList31);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard74, color84);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard0, color84);
        chessBoard0.initialize();
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.WHITE;
        a1.Bishop bishop90 = new a1.Bishop(chessBoard0, color89);
        a1.ChessPiece.Color color91 = bishop90.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.WHITE + "'", color89.equals(a1.ChessPiece.Color.WHITE));
        org.junit.Assert.assertTrue("'" + color91 + "' != '" + a1.ChessPiece.Color.WHITE + "'", color91.equals(a1.ChessPiece.Color.WHITE));
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.toString();
        java.lang.String str12 = bishop10.toString();
        java.util.ArrayList<java.lang.String> strList13 = bishop10.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265d" + "'", str11, "\u265d");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = null;
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Bishop bishop21 = new a1.Bishop(chessBoard13, color19);
        a1.Rook rook22 = new a1.Rook(chessBoard10, color19);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = null;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard26, color32);
        a1.Rook rook35 = new a1.Rook(chessBoard23, color32);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard10, color32);
        a1.King king37 = new a1.King(chessBoard9, color32);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = null;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.Rook rook54 = new a1.Rook(chessBoard42, color51);
        a1.Pawn pawn55 = new a1.Pawn(chessBoard39, color51);
        a1.ChessPiece.Color color56 = pawn55.getColor();
        a1.King king57 = new a1.King(chessBoard0, color56);
        java.lang.String str58 = king57.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.King king66 = new a1.King(chessBoard54, color63);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard0, color63);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.util.ArrayList<java.lang.String> strList69 = bishop67.legalMoves();
        java.lang.String str70 = bishop67.toString();
        a1.ChessPiece.Color color71 = bishop67.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265d" + "'", str70, "\u265d");
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard52, color58);
        a1.Pawn pawn61 = new a1.Pawn(chessBoard0, color58);
        java.lang.String str62 = pawn61.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        a1.ChessPiece.Color color7 = knight4.getColor();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
    }
}
