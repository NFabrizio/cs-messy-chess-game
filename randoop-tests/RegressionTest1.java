import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.toString();
        a1.ChessPiece.Color color6 = pawn2.getColor();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNull(color6);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.Rook rook29 = new a1.Rook(chessBoard17, color26);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = null;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard33, color39);
        a1.Rook rook42 = new a1.Rook(chessBoard30, color39);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard17, color39);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = null;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.King king61 = new a1.King(chessBoard49, color58);
        a1.ChessBoard chessBoard62 = null;
        a1.ChessPiece.Color color63 = null;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard62, color63);
        java.util.ArrayList<java.lang.String> strList65 = pawn64.legalMoves();
        boolean boolean67 = chessBoard49.placePiece((a1.ChessPiece) pawn64, "\u265e");
        chessBoard49.initialize();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard72, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Pawn pawn84 = new a1.Pawn(chessBoard72, color82);
        a1.Pawn pawn85 = new a1.Pawn(chessBoard69, color82);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard49, color82);
        a1.Knight knight87 = new a1.Knight(chessBoard44, color82);
        a1.Rook rook88 = new a1.Rook(chessBoard17, color82);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard0, color82);
        java.lang.String str90 = bishop89.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u265d" + "'", str90, "\u265d");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException25);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException25);
        java.lang.Throwable[] throwableArray28 = illegalMoveException27.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = pawn28.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.util.ArrayList<java.lang.String> strList7 = pawn3.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.King king66 = new a1.King(chessBoard54, color63);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard0, color63);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        java.lang.String str70 = bishop67.toString();
        // The following exception was thrown during execution in test generation
        try {
            bishop67.setPosition("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265d" + "'", str70, "\u265d");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        java.lang.String str35 = pawn34.getPosition();
        java.util.ArrayList<java.lang.String> strList36 = pawn34.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strList36);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        java.lang.String str74 = bishop73.toString();
        java.util.ArrayList<java.lang.String> strList75 = bishop73.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265d" + "'", str74, "\u265d");
        org.junit.Assert.assertNotNull(strList75);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable[] throwableArray7 = illegalPositionException6.getSuppressed();
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException15);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException15);
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        java.lang.Throwable[] throwableArray21 = illegalMoveException20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = illegalMoveException20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = illegalMoveException20.getSuppressed();
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        a1.IllegalPositionException illegalPositionException29 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException28);
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException28);
        illegalMoveException20.addSuppressed((java.lang.Throwable) illegalMoveException30);
        illegalMoveException17.addSuppressed((java.lang.Throwable) illegalMoveException30);
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException17);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException17);
        java.lang.Throwable throwable36 = null;
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("hi!", throwable36);
        java.lang.Throwable[] throwableArray38 = illegalMoveException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = illegalMoveException37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = illegalMoveException37.getSuppressed();
        java.lang.Throwable throwable44 = null;
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("hi!", throwable44);
        a1.IllegalPositionException illegalPositionException46 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException45);
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException45);
        illegalMoveException37.addSuppressed((java.lang.Throwable) illegalMoveException47);
        java.lang.Throwable[] throwableArray49 = illegalMoveException37.getSuppressed();
        java.lang.Throwable throwable55 = null;
        a1.IllegalMoveException illegalMoveException56 = new a1.IllegalMoveException("hi!", throwable55);
        a1.IllegalPositionException illegalPositionException57 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException56);
        a1.IllegalMoveException illegalMoveException58 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException57);
        a1.IllegalPositionException illegalPositionException59 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException57);
        a1.IllegalMoveException illegalMoveException60 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException57);
        illegalMoveException37.addSuppressed((java.lang.Throwable) illegalMoveException60);
        illegalPositionException34.addSuppressed((java.lang.Throwable) illegalMoveException60);
        java.lang.Throwable throwable65 = null;
        a1.IllegalMoveException illegalMoveException66 = new a1.IllegalMoveException("hi!", throwable65);
        a1.IllegalPositionException illegalPositionException67 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException66);
        java.lang.Throwable throwable71 = null;
        a1.IllegalMoveException illegalMoveException72 = new a1.IllegalMoveException("hi!", throwable71);
        a1.IllegalPositionException illegalPositionException73 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException72);
        a1.IllegalMoveException illegalMoveException74 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException73);
        illegalMoveException66.addSuppressed((java.lang.Throwable) illegalPositionException73);
        java.lang.Throwable throwable78 = null;
        a1.IllegalMoveException illegalMoveException79 = new a1.IllegalMoveException("hi!", throwable78);
        java.lang.Throwable[] throwableArray80 = illegalMoveException79.getSuppressed();
        java.lang.Throwable throwable82 = null;
        a1.IllegalMoveException illegalMoveException83 = new a1.IllegalMoveException("hi!", throwable82);
        java.lang.Throwable[] throwableArray84 = illegalMoveException83.getSuppressed();
        illegalMoveException79.addSuppressed((java.lang.Throwable) illegalMoveException83);
        a1.IllegalMoveException illegalMoveException86 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException79);
        illegalPositionException73.addSuppressed((java.lang.Throwable) illegalMoveException79);
        illegalMoveException60.addSuppressed((java.lang.Throwable) illegalPositionException73);
        java.lang.Throwable[] throwableArray89 = illegalMoveException60.getSuppressed();
        a1.IllegalPositionException illegalPositionException90 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException60);
        illegalPositionException6.addSuppressed((java.lang.Throwable) illegalMoveException60);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray89);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        a1.IllegalPositionException illegalPositionException29 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException28);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalMoveException28);
        a1.IllegalPositionException illegalPositionException31 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException28);
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException28);
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException32);
        java.lang.Class<?> wildcardClass34 = illegalMoveException33.getClass();
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        java.lang.String str24 = pawn20.getPosition();
        boolean boolean26 = chessBoard0.placePiece((a1.ChessPiece) pawn20, "a1.IllegalMoveException: hi!");
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece29 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265e", "\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList11 = pawn3.legalMoves();
        a1.ChessPiece.Color color12 = pawn3.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(color12);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException7);
        java.lang.Throwable[] throwableArray11 = illegalPositionException7.getSuppressed();
        java.lang.String str12 = illegalPositionException7.toString();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "a1.IllegalPositionException: hi!" + "'", str12, "a1.IllegalPositionException: hi!");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.WHITE;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        java.util.ArrayList<java.lang.String> strList10 = knight9.legalMoves();
        java.lang.Class<?> wildcardClass11 = strList10.getClass();
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.WHITE + "'", color8.equals(a1.ChessPiece.Color.WHITE));
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        java.util.ArrayList<java.lang.String> strList33 = knight30.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        a1.IllegalPositionException illegalPositionException4 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException10);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalPositionException10);
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException19);
        java.lang.Throwable throwable23 = null;
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("hi!", throwable23);
        java.lang.Throwable[] throwableArray25 = illegalMoveException24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = illegalMoveException24.getSuppressed();
        java.lang.Throwable[] throwableArray27 = illegalMoveException24.getSuppressed();
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException32);
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException32);
        illegalMoveException24.addSuppressed((java.lang.Throwable) illegalMoveException34);
        illegalMoveException21.addSuppressed((java.lang.Throwable) illegalMoveException34);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException41.getSuppressed();
        java.lang.Throwable throwable48 = null;
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("hi!", throwable48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException49);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException49);
        illegalMoveException41.addSuppressed((java.lang.Throwable) illegalMoveException51);
        java.lang.Throwable[] throwableArray53 = illegalMoveException41.getSuppressed();
        java.lang.Throwable throwable59 = null;
        a1.IllegalMoveException illegalMoveException60 = new a1.IllegalMoveException("hi!", throwable59);
        a1.IllegalPositionException illegalPositionException61 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException60);
        a1.IllegalMoveException illegalMoveException62 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException61);
        a1.IllegalPositionException illegalPositionException63 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException61);
        a1.IllegalMoveException illegalMoveException64 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException61);
        illegalMoveException41.addSuppressed((java.lang.Throwable) illegalMoveException64);
        illegalPositionException38.addSuppressed((java.lang.Throwable) illegalMoveException64);
        illegalPositionException10.addSuppressed((java.lang.Throwable) illegalMoveException64);
        java.lang.Throwable throwable74 = null;
        a1.IllegalMoveException illegalMoveException75 = new a1.IllegalMoveException("hi!", throwable74);
        a1.IllegalPositionException illegalPositionException76 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException75);
        a1.IllegalMoveException illegalMoveException77 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException75);
        a1.IllegalPositionException illegalPositionException78 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException75);
        a1.IllegalMoveException illegalMoveException79 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException78);
        java.lang.Throwable throwable82 = null;
        a1.IllegalMoveException illegalMoveException83 = new a1.IllegalMoveException("hi!", throwable82);
        a1.IllegalMoveException illegalMoveException84 = new a1.IllegalMoveException("\u265a", throwable82);
        java.lang.Throwable[] throwableArray85 = illegalMoveException84.getSuppressed();
        java.lang.Throwable[] throwableArray86 = illegalMoveException84.getSuppressed();
        illegalPositionException78.addSuppressed((java.lang.Throwable) illegalMoveException84);
        a1.IllegalMoveException illegalMoveException88 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException78);
        illegalMoveException64.addSuppressed((java.lang.Throwable) illegalMoveException88);
        java.lang.Throwable[] throwableArray90 = illegalMoveException64.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray90);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard23, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Pawn pawn35 = new a1.Pawn(chessBoard23, color33);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard20, color33);
        a1.Pawn pawn37 = new a1.Pawn(chessBoard0, color33);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = null;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.Rook rook53 = new a1.Rook(chessBoard41, color50);
        a1.Pawn pawn54 = new a1.Pawn(chessBoard38, color50);
        a1.Rook rook55 = new a1.Rook(chessBoard0, color50);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        boolean boolean62 = chessBoard57.placePiece((a1.ChessPiece) rook60, "\u265f");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = null;
        a1.ChessPiece.Color color65 = null;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard64, color65);
        java.lang.String str67 = pawn66.toString();
        boolean boolean69 = chessBoard63.placePiece((a1.ChessPiece) pawn66, "");
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.Knight knight79 = new a1.Knight(chessBoard63, color76);
        a1.Knight knight80 = new a1.Knight(chessBoard57, color76);
        a1.King king81 = new a1.King(chessBoard56, color76);
        java.lang.String str82 = king81.toString();
        java.util.ArrayList<java.lang.String> strList83 = king81.legalMoves();
        java.util.ArrayList<java.lang.String> strList84 = king81.legalMoves();
        java.util.ArrayList<java.lang.String> strList85 = king81.legalMoves();
        a1.ChessPiece.Color color86 = king81.getColor();
        a1.Pawn pawn87 = new a1.Pawn(chessBoard0, color86);
        java.util.ArrayList<java.lang.String> strList88 = pawn87.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u265f" + "'", str67, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u265a" + "'", str82, "\u265a");
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList88);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = null;
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard2, color3);
        java.lang.String str5 = pawn4.toString();
        boolean boolean7 = chessBoard1.placePiece((a1.ChessPiece) pawn4, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = null;
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        java.lang.String str12 = pawn11.toString();
        boolean boolean14 = chessBoard8.placePiece((a1.ChessPiece) pawn11, "");
        a1.ChessBoard chessBoard15 = null;
        a1.ChessPiece.Color color16 = null;
        a1.Pawn pawn17 = new a1.Pawn(chessBoard15, color16);
        java.lang.String str18 = pawn17.toString();
        java.lang.String str19 = pawn17.toString();
        boolean boolean21 = chessBoard8.placePiece((a1.ChessPiece) pawn17, "\u265f");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        boolean boolean27 = chessBoard22.placePiece((a1.ChessPiece) rook25, "\u265f");
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Knight knight36 = new a1.Knight(chessBoard28, color34);
        boolean boolean38 = chessBoard22.placePiece((a1.ChessPiece) knight36, "");
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = null;
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard40, color41);
        java.lang.String str43 = pawn42.toString();
        boolean boolean45 = chessBoard39.placePiece((a1.ChessPiece) pawn42, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Pawn pawn58 = new a1.Pawn(chessBoard46, color56);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard39, color56);
        a1.King king60 = new a1.King(chessBoard22, color56);
        a1.King king61 = new a1.King(chessBoard8, color56);
        boolean boolean63 = chessBoard1.placePiece((a1.ChessPiece) king61, "\u265c");
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Knight knight68 = new a1.Knight(chessBoard64, color66);
        a1.Rook rook69 = new a1.Rook(chessBoard1, color66);
        a1.King king70 = new a1.King(chessBoard0, color66);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265f" + "'", str12, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265f" + "'", str19, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265f" + "'", str43, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.lang.String str15 = pawn9.toString();
        java.util.ArrayList<java.lang.String> strList16 = pawn9.legalMoves();
        java.util.ArrayList<java.lang.String> strList17 = pawn9.legalMoves();
        java.util.ArrayList<java.lang.String> strList18 = pawn9.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265f" + "'", str15, "\u265f");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard33, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Pawn pawn45 = new a1.Pawn(chessBoard33, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = null;
        a1.ChessPiece.Color color48 = null;
        a1.Pawn pawn49 = new a1.Pawn(chessBoard47, color48);
        java.lang.String str50 = pawn49.toString();
        boolean boolean52 = chessBoard46.placePiece((a1.ChessPiece) pawn49, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard53, color59);
        a1.Knight knight62 = new a1.Knight(chessBoard46, color59);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard46, color65);
        java.lang.String str69 = bishop68.toString();
        a1.ChessPiece.Color color70 = bishop68.getColor();
        boolean boolean72 = chessBoard33.placePiece((a1.ChessPiece) bishop68, "\u265c");
        a1.ChessPiece.Color color73 = bishop68.getColor();
        a1.Knight knight74 = new a1.Knight(chessBoard0, color73);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265f" + "'", str50, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = null;
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = null;
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        java.lang.String str8 = pawn7.toString();
        boolean boolean10 = chessBoard4.placePiece((a1.ChessPiece) pawn7, "");
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Knight knight20 = new a1.Knight(chessBoard4, color17);
        a1.Knight knight21 = new a1.Knight(chessBoard3, color17);
        a1.Pawn pawn22 = new a1.Pawn(chessBoard0, color17);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color25);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece28 = chessBoard0.getPiece("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList37 = rook36.legalMoves();
        a1.ChessPiece.Color color38 = rook36.getColor();
        java.lang.String str39 = rook36.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265c" + "'", str39, "\u265c");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable[] throwableArray9 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException13.getSuppressed();
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        illegalMoveException13.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException23);
        java.lang.Throwable throwable28 = null;
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("hi!", throwable28);
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("\u265a", throwable28);
        java.lang.Throwable[] throwableArray31 = illegalMoveException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException30.getSuppressed();
        java.lang.Throwable throwable36 = null;
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("hi!", throwable36);
        java.lang.Throwable[] throwableArray38 = illegalMoveException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = illegalMoveException37.getSuppressed();
        a1.IllegalPositionException illegalPositionException40 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException37);
        java.lang.Throwable[] throwableArray41 = illegalPositionException40.getSuppressed();
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException40);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalPositionException40);
        illegalPositionException25.addSuppressed((java.lang.Throwable) illegalPositionException40);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException40);
        java.lang.Throwable throwable48 = null;
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("hi!", throwable48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException49);
        java.lang.Throwable throwable54 = null;
        a1.IllegalMoveException illegalMoveException55 = new a1.IllegalMoveException("hi!", throwable54);
        a1.IllegalPositionException illegalPositionException56 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException55);
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException56);
        illegalMoveException49.addSuppressed((java.lang.Throwable) illegalPositionException56);
        java.lang.Throwable throwable61 = null;
        a1.IllegalMoveException illegalMoveException62 = new a1.IllegalMoveException("hi!", throwable61);
        java.lang.Throwable[] throwableArray63 = illegalMoveException62.getSuppressed();
        java.lang.Throwable throwable65 = null;
        a1.IllegalMoveException illegalMoveException66 = new a1.IllegalMoveException("hi!", throwable65);
        java.lang.Throwable[] throwableArray67 = illegalMoveException66.getSuppressed();
        illegalMoveException62.addSuppressed((java.lang.Throwable) illegalMoveException66);
        a1.IllegalMoveException illegalMoveException69 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException62);
        illegalPositionException56.addSuppressed((java.lang.Throwable) illegalMoveException62);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException62);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard9, color28);
        a1.Knight knight32 = new a1.Knight(chessBoard0, color28);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard40, color50);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard33, color50);
        java.util.ArrayList<java.lang.String> strList54 = bishop53.legalMoves();
        java.lang.String str55 = bishop53.toString();
        boolean boolean57 = chessBoard0.placePiece((a1.ChessPiece) bishop53, "\u265f");
        java.lang.String str58 = bishop53.toString();
        java.lang.String str59 = bishop53.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265d" + "'", str55, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265d" + "'", str58, "\u265d");
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = null;
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        java.util.ArrayList<java.lang.String> strList12 = pawn11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = pawn11.legalMoves();
        boolean boolean15 = chessBoard8.placePiece((a1.ChessPiece) pawn11, "\u265d");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.King king33 = new a1.King(chessBoard21, color30);
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.util.ArrayList<java.lang.String> strList37 = pawn36.legalMoves();
        boolean boolean39 = chessBoard21.placePiece((a1.ChessPiece) pawn36, "\u265e");
        chessBoard21.initialize();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Pawn pawn56 = new a1.Pawn(chessBoard44, color54);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard41, color54);
        a1.Pawn pawn58 = new a1.Pawn(chessBoard21, color54);
        a1.Knight knight59 = new a1.Knight(chessBoard16, color54);
        a1.King king60 = new a1.King(chessBoard8, color54);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265e");
        chessBoard0.initialize();
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessPiece.Color color48 = null;
        a1.Bishop bishop49 = new a1.Bishop(chessBoard39, color48);
        java.lang.String str50 = bishop49.toString();
        java.lang.String str51 = bishop49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) bishop49, "\u265c");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard74, color84);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard71, color84);
        a1.Pawn pawn88 = new a1.Pawn(chessBoard54, color84);
        a1.Rook rook89 = new a1.Rook(chessBoard0, color84);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265d" + "'", str50, "\u265d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265d" + "'", str51, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        java.lang.String str54 = king53.toString();
        java.lang.String str55 = king53.toString();
        java.util.ArrayList<java.lang.String> strList56 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList57 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList58 = king53.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265a" + "'", str55, "\u265a");
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(strList58);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessPiece.Color color13 = king12.getColor();
        java.lang.String str14 = king12.toString();
        java.util.ArrayList<java.lang.String> strList15 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265a" + "'", str14, "\u265a");
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265a", throwable5);
        java.lang.Throwable[] throwableArray8 = illegalMoveException7.getSuppressed();
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException10);
        java.lang.String str12 = illegalPositionException11.toString();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "a1.IllegalPositionException: a1.IllegalPositionException: a1.IllegalMoveException: hi!" + "'", str12, "a1.IllegalPositionException: a1.IllegalPositionException: a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.lang.String str16 = pawn15.toString();
        boolean boolean18 = chessBoard12.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard19, color21);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color25);
        a1.Knight knight28 = new a1.Knight(chessBoard12, color25);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard12, color31);
        a1.Knight knight35 = new a1.Knight(chessBoard3, color31);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard0, color31);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = null;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Rook rook49 = new a1.Rook(chessBoard37, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = null;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard53, color59);
        a1.Rook rook62 = new a1.Rook(chessBoard50, color59);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard37, color59);
        a1.Pawn pawn64 = new a1.Pawn(chessBoard0, color59);
        java.lang.String str65 = pawn64.toString();
        java.util.ArrayList<java.lang.String> strList66 = pawn64.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            pawn64.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265f" + "'", str16, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265f" + "'", str65, "\u265f");
        org.junit.Assert.assertNotNull(strList66);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.lang.String str5 = pawn2.toString();
        a1.ChessPiece.Color color6 = pawn2.getColor();
        java.lang.String str7 = pawn2.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNull(color6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException11);
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        java.lang.Throwable[] throwableArray16 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = illegalMoveException15.getSuppressed();
        java.lang.Throwable throwable22 = null;
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("hi!", throwable22);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException23);
        illegalMoveException15.addSuppressed((java.lang.Throwable) illegalMoveException25);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException15);
        java.lang.Throwable[] throwableArray28 = illegalMoveException12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("\u265a", throwable3);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable15 = null;
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("hi!", throwable15);
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException16);
        java.lang.Throwable[] throwableArray18 = illegalMoveException16.getSuppressed();
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException16);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException11);
        illegalPositionException7.addSuppressed((java.lang.Throwable) illegalMoveException20);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        java.lang.Throwable[] throwableArray8 = illegalMoveException7.getSuppressed();
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException22);
        illegalPositionException10.addSuppressed((java.lang.Throwable) illegalPositionException23);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.lang.String str4 = rook2.getPosition();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.lang.String str6 = rook2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        a1.ChessPiece.Color color74 = null;
        a1.Pawn pawn75 = new a1.Pawn(chessBoard0, color74);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265a", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard35, color57);
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard35, color62);
        a1.Rook rook64 = new a1.Rook(chessBoard0, color62);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece66 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = knight4.legalMoves();
        java.lang.String str8 = knight4.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable[] throwableArray8 = illegalPositionException7.getSuppressed();
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException7);
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException15);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException15);
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException15);
        illegalPositionException9.addSuppressed((java.lang.Throwable) illegalMoveException18);
        java.lang.String str20 = illegalPositionException9.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265c" + "'", str20, "\u265c");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException7);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.ChessBoard chessBoard23 = null;
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        boolean boolean30 = chessBoard24.placePiece((a1.ChessPiece) pawn27, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Bishop bishop39 = new a1.Bishop(chessBoard31, color37);
        a1.Knight knight40 = new a1.Knight(chessBoard24, color37);
        a1.Knight knight41 = new a1.Knight(chessBoard23, color37);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard20, color37);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard0, color37);
        java.util.ArrayList<java.lang.String> strList44 = bishop43.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList44);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException7);
        java.lang.Throwable[] throwableArray11 = illegalPositionException7.getSuppressed();
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException21);
        java.lang.Throwable throwable25 = null;
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", throwable25);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265a", throwable25);
        java.lang.Throwable[] throwableArray28 = illegalMoveException27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = illegalMoveException27.getSuppressed();
        illegalPositionException21.addSuppressed((java.lang.Throwable) illegalMoveException27);
        illegalPositionException7.addSuppressed((java.lang.Throwable) illegalPositionException21);
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("\u265a", throwable35);
        java.lang.Throwable[] throwableArray38 = illegalMoveException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = illegalMoveException37.getSuppressed();
        java.lang.Throwable throwable43 = null;
        a1.IllegalMoveException illegalMoveException44 = new a1.IllegalMoveException("hi!", throwable43);
        java.lang.Throwable[] throwableArray45 = illegalMoveException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = illegalMoveException44.getSuppressed();
        a1.IllegalPositionException illegalPositionException47 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException44);
        java.lang.Throwable[] throwableArray48 = illegalPositionException47.getSuppressed();
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException47);
        illegalMoveException37.addSuppressed((java.lang.Throwable) illegalPositionException47);
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException37);
        illegalPositionException7.addSuppressed((java.lang.Throwable) illegalMoveException37);
        java.lang.Throwable[] throwableArray53 = illegalPositionException7.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.String str9 = illegalMoveException8.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str9, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        java.lang.String str19 = pawn15.toString();
        java.lang.String str20 = pawn15.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265f" + "'", str19, "\u265f");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265f" + "'", str20, "\u265f");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.King king47 = new a1.King(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = null;
        a1.ChessPiece.Color color49 = null;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard48, color49);
        java.util.ArrayList<java.lang.String> strList51 = pawn50.legalMoves();
        boolean boolean53 = chessBoard35.placePiece((a1.ChessPiece) pawn50, "\u265e");
        chessBoard35.initialize();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard58, color68);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard55, color68);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard35, color68);
        a1.Knight knight73 = new a1.Knight(chessBoard30, color68);
        java.lang.String str74 = knight73.getPosition();
        java.util.ArrayList<java.lang.String> strList75 = knight73.legalMoves();
        a1.ChessPiece.Color color76 = knight73.getColor();
        a1.Pawn pawn77 = new a1.Pawn(chessBoard0, color76);
        java.util.ArrayList<java.lang.String> strList78 = pawn77.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = null;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.Rook rook67 = new a1.Rook(chessBoard55, color64);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard52, color64);
        a1.ChessPiece.Color color69 = pawn68.getColor();
        a1.Pawn pawn70 = new a1.Pawn(chessBoard0, color69);
        chessBoard0.initialize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        java.lang.String str7 = rook3.toString();
        java.lang.String str8 = rook3.getPosition();
        java.lang.String str9 = rook3.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.lang.String str4 = pawn2.toString();
        a1.ChessPiece.Color color5 = pawn2.getColor();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = color5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertNull(color5);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.getPosition();
        java.lang.String str6 = rook2.toString();
        java.lang.String str7 = rook2.toString();
        // The following exception was thrown during execution in test generation
        try {
            rook2.setPosition("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        java.lang.String str22 = bishop20.toString();
        java.util.ArrayList<java.lang.String> strList23 = bishop20.legalMoves();
        java.lang.String str24 = bishop20.getPosition();
        java.util.ArrayList<java.lang.String> strList25 = bishop20.legalMoves();
        java.util.ArrayList<java.lang.String> strList26 = bishop20.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265d" + "'", str22, "\u265d");
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Knight knight9 = new a1.Knight(chessBoard1, color7);
        a1.Knight knight10 = new a1.Knight(chessBoard0, color7);
        java.lang.String str11 = knight10.toString();
        java.lang.String str12 = knight10.toString();
        java.lang.String str13 = knight10.toString();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265e" + "'", str11, "\u265e");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265e" + "'", str12, "\u265e");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265e" + "'", str13, "\u265e");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard9, color28);
        a1.Knight knight32 = new a1.Knight(chessBoard0, color28);
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color33);
        java.lang.Class<?> wildcardClass35 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.lang.String str5 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.lang.String str7 = rook2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.King king44 = new a1.King(chessBoard32, color41);
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.util.ArrayList<java.lang.String> strList48 = pawn47.legalMoves();
        boolean boolean50 = chessBoard32.placePiece((a1.ChessPiece) pawn47, "\u265e");
        chessBoard32.initialize();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard52, color65);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard32, color65);
        a1.Knight knight70 = new a1.Knight(chessBoard27, color65);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color65);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        java.lang.String str77 = knight76.toString();
        boolean boolean79 = chessBoard0.placePiece((a1.ChessPiece) knight76, "\u265d");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece81 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265e" + "'", str77, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException7);
        java.lang.Throwable[] throwableArray11 = illegalPositionException7.getSuppressed();
        java.lang.Throwable[] throwableArray12 = illegalPositionException7.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        java.util.ArrayList<java.lang.String> strList18 = knight17.legalMoves();
        a1.ChessPiece.Color color19 = knight17.getColor();
        a1.Knight knight20 = new a1.Knight(chessBoard0, color19);
        java.lang.String str21 = knight20.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265e" + "'", str21, "\u265e");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        java.util.ArrayList<java.lang.String> strList14 = pawn9.legalMoves();
        java.lang.String str15 = pawn9.getPosition();
        java.util.ArrayList<java.lang.String> strList16 = pawn9.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = null;
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessBoard chessBoard3 = null;
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        java.lang.String str6 = pawn5.toString();
        boolean boolean8 = chessBoard2.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        a1.Knight knight13 = new a1.Knight(chessBoard9, color11);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Bishop bishop17 = new a1.Bishop(chessBoard9, color15);
        a1.Knight knight18 = new a1.Knight(chessBoard2, color15);
        a1.Knight knight19 = new a1.Knight(chessBoard1, color15);
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color15);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265f" + "'", str6, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + color11 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color11.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.Rook rook34 = new a1.Rook(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard22, color44);
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard22, color49);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard0, color49);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.lang.String str4 = rook2.getPosition();
        java.lang.String str5 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.lang.String str6 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList7 = knight4.legalMoves();
        java.lang.String str8 = knight4.toString();
        java.lang.String str9 = knight4.getPosition();
        java.lang.String str10 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList11 = knight4.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265e" + "'", str6, "\u265e");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265e" + "'", str10, "\u265e");
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessBoard chessBoard46 = null;
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = null;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Knight knight54 = new a1.Knight(chessBoard50, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard50, color56);
        a1.Rook rook59 = new a1.Rook(chessBoard47, color56);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = null;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard63, color69);
        a1.Rook rook72 = new a1.Rook(chessBoard60, color69);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard47, color69);
        a1.King king74 = new a1.King(chessBoard46, color69);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard45, color69);
        a1.Rook rook76 = new a1.Rook(chessBoard0, color69);
        a1.ChessBoard chessBoard77 = null;
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Knight knight82 = new a1.Knight(chessBoard78, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Knight knight86 = new a1.Knight(chessBoard78, color84);
        a1.Knight knight87 = new a1.Knight(chessBoard77, color84);
        java.util.ArrayList<java.lang.String> strList88 = knight87.legalMoves();
        a1.ChessPiece.Color color89 = knight87.getColor();
        a1.Rook rook90 = new a1.Rook(chessBoard0, color89);
        java.util.ArrayList<java.lang.String> strList91 = rook90.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList91);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.lang.String str9 = pawn3.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable[] throwableArray9 = illegalPositionException8.getSuppressed();
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException10);
        java.lang.String str12 = illegalPositionException10.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265c" + "'", str12, "\u265c");
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard35, color57);
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard35, color62);
        a1.Rook rook64 = new a1.Rook(chessBoard0, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = null;
        a1.ChessPiece.Color color67 = null;
        a1.Pawn pawn68 = new a1.Pawn(chessBoard66, color67);
        java.lang.String str69 = pawn68.toString();
        boolean boolean71 = chessBoard65.placePiece((a1.ChessPiece) pawn68, "");
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard72, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Pawn pawn84 = new a1.Pawn(chessBoard72, color82);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard65, color82);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard0, color82);
        // The following exception was thrown during execution in test generation
        try {
            pawn86.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265f" + "'", str69, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        java.lang.String str26 = king25.toString();
        java.util.ArrayList<java.lang.String> strList27 = king25.legalMoves();
        java.lang.String str28 = king25.toString();
        java.lang.String str29 = king25.toString();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265a" + "'", str26, "\u265a");
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265a" + "'", str28, "\u265a");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u265a" + "'", str29, "\u265a");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard48 = null;
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard48, color62);
        a1.King king67 = new a1.King(chessBoard0, color62);
        java.util.ArrayList<java.lang.String> strList68 = king67.legalMoves();
        java.lang.String str69 = king67.getPosition();
        java.util.ArrayList<java.lang.String> strList70 = king67.legalMoves();
        java.lang.String str71 = king67.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u265a" + "'", str71, "\u265a");
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException12);
        illegalMoveException5.addSuppressed((java.lang.Throwable) illegalPositionException12);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException5);
        java.lang.String str17 = illegalMoveException16.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.King king66 = new a1.King(chessBoard54, color63);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard0, color63);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265a", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.Rook rook68 = new a1.Rook(chessBoard0, color65);
        java.util.ArrayList<java.lang.String> strList69 = rook68.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList69);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        java.lang.String str22 = pawn21.toString();
        a1.ChessPiece.Color color23 = pawn21.getColor();
        java.lang.String str24 = pawn21.getPosition();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertNull(color23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList9 = knight8.legalMoves();
        java.lang.String str10 = knight8.getPosition();
        java.util.ArrayList<java.lang.String> strList11 = knight8.legalMoves();
        java.lang.String str12 = knight8.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265e" + "'", str12, "\u265e");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException9);
        java.lang.Throwable throwable28 = null;
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("hi!", throwable28);
        java.lang.Throwable[] throwableArray30 = illegalMoveException29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = illegalMoveException29.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException29.getSuppressed();
        java.lang.Throwable throwable36 = null;
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("hi!", throwable36);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException37);
        a1.IllegalMoveException illegalMoveException39 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException37);
        illegalMoveException29.addSuppressed((java.lang.Throwable) illegalMoveException39);
        java.lang.Throwable[] throwableArray41 = illegalMoveException29.getSuppressed();
        java.lang.Throwable throwable47 = null;
        a1.IllegalMoveException illegalMoveException48 = new a1.IllegalMoveException("hi!", throwable47);
        a1.IllegalPositionException illegalPositionException49 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException48);
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException49);
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException49);
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException49);
        illegalMoveException29.addSuppressed((java.lang.Throwable) illegalMoveException52);
        illegalPositionException26.addSuppressed((java.lang.Throwable) illegalMoveException52);
        java.lang.Throwable throwable57 = null;
        a1.IllegalMoveException illegalMoveException58 = new a1.IllegalMoveException("hi!", throwable57);
        a1.IllegalPositionException illegalPositionException59 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException58);
        java.lang.Throwable throwable63 = null;
        a1.IllegalMoveException illegalMoveException64 = new a1.IllegalMoveException("hi!", throwable63);
        a1.IllegalPositionException illegalPositionException65 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException64);
        a1.IllegalMoveException illegalMoveException66 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException65);
        illegalMoveException58.addSuppressed((java.lang.Throwable) illegalPositionException65);
        java.lang.Throwable throwable70 = null;
        a1.IllegalMoveException illegalMoveException71 = new a1.IllegalMoveException("hi!", throwable70);
        java.lang.Throwable[] throwableArray72 = illegalMoveException71.getSuppressed();
        java.lang.Throwable throwable74 = null;
        a1.IllegalMoveException illegalMoveException75 = new a1.IllegalMoveException("hi!", throwable74);
        java.lang.Throwable[] throwableArray76 = illegalMoveException75.getSuppressed();
        illegalMoveException71.addSuppressed((java.lang.Throwable) illegalMoveException75);
        a1.IllegalMoveException illegalMoveException78 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException71);
        illegalPositionException65.addSuppressed((java.lang.Throwable) illegalMoveException71);
        illegalMoveException52.addSuppressed((java.lang.Throwable) illegalPositionException65);
        java.lang.Throwable[] throwableArray81 = illegalMoveException52.getSuppressed();
        a1.IllegalPositionException illegalPositionException82 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException52);
        java.lang.Throwable throwable86 = null;
        a1.IllegalMoveException illegalMoveException87 = new a1.IllegalMoveException("hi!", throwable86);
        a1.IllegalPositionException illegalPositionException88 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException87);
        java.lang.Throwable throwable92 = null;
        a1.IllegalMoveException illegalMoveException93 = new a1.IllegalMoveException("hi!", throwable92);
        a1.IllegalPositionException illegalPositionException94 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException93);
        a1.IllegalMoveException illegalMoveException95 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException94);
        illegalMoveException87.addSuppressed((java.lang.Throwable) illegalPositionException94);
        a1.IllegalMoveException illegalMoveException97 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException87);
        java.lang.Throwable[] throwableArray98 = illegalMoveException97.getSuppressed();
        illegalPositionException82.addSuppressed((java.lang.Throwable) illegalMoveException97);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessPiece chessPiece3 = null;
        boolean boolean5 = chessBoard0.placePiece(chessPiece3, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException12);
        illegalMoveException5.addSuppressed((java.lang.Throwable) illegalPositionException12);
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException15);
        java.lang.String str17 = illegalMoveException16.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265d" + "'", str17, "\u265d");
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.lang.String str16 = pawn15.toString();
        java.lang.String str17 = pawn15.toString();
        boolean boolean19 = chessBoard6.placePiece((a1.ChessPiece) pawn15, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        boolean boolean25 = chessBoard20.placePiece((a1.ChessPiece) rook23, "\u265f");
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard26, color32);
        boolean boolean36 = chessBoard20.placePiece((a1.ChessPiece) knight34, "");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = null;
        a1.ChessPiece.Color color39 = null;
        a1.Pawn pawn40 = new a1.Pawn(chessBoard38, color39);
        java.lang.String str41 = pawn40.toString();
        boolean boolean43 = chessBoard37.placePiece((a1.ChessPiece) pawn40, "");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Pawn pawn56 = new a1.Pawn(chessBoard44, color54);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard37, color54);
        a1.King king58 = new a1.King(chessBoard20, color54);
        a1.King king59 = new a1.King(chessBoard6, color54);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = null;
        a1.ChessPiece.Color color62 = null;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard61, color62);
        java.lang.String str64 = pawn63.toString();
        boolean boolean66 = chessBoard60.placePiece((a1.ChessPiece) pawn63, "");
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard67, color69);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard67, color73);
        a1.Knight knight76 = new a1.Knight(chessBoard60, color73);
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight78 = new a1.Knight(chessBoard60, color77);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard6, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Knight knight84 = new a1.Knight(chessBoard80, color82);
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard80, color86);
        a1.ChessBoard chessBoard89 = new a1.ChessBoard();
        a1.ChessPiece.Color color90 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook91 = new a1.Rook(chessBoard89, color90);
        a1.Pawn pawn92 = new a1.Pawn(chessBoard80, color90);
        a1.Bishop bishop93 = new a1.Bishop(chessBoard6, color90);
        a1.Knight knight94 = new a1.Knight(chessBoard0, color90);
        a1.ChessPiece.Color color95 = knight94.getColor();
        a1.ChessPiece.Color color96 = knight94.getColor();
        java.util.ArrayList<java.lang.String> strList97 = knight94.legalMoves();
        java.lang.String str98 = knight94.toString();
        java.lang.String str99 = knight94.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u265f" + "'", str16, "\u265f");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265f" + "'", str41, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265f" + "'", str64, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color95 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color95.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color96 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color96.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "\u265e" + "'", str98, "\u265e");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "\u265e" + "'", str99, "\u265e");
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard74, color84);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard0, color84);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalMoveException: a1.IllegalMoveException: hi!", "a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException7);
        java.lang.Throwable[] throwableArray11 = illegalPositionException7.getSuppressed();
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException21);
        java.lang.Throwable throwable25 = null;
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", throwable25);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265a", throwable25);
        java.lang.Throwable[] throwableArray28 = illegalMoveException27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = illegalMoveException27.getSuppressed();
        illegalPositionException21.addSuppressed((java.lang.Throwable) illegalMoveException27);
        illegalPositionException7.addSuppressed((java.lang.Throwable) illegalPositionException21);
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("\u265a", throwable35);
        java.lang.Throwable[] throwableArray38 = illegalMoveException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = illegalMoveException37.getSuppressed();
        java.lang.Throwable throwable43 = null;
        a1.IllegalMoveException illegalMoveException44 = new a1.IllegalMoveException("hi!", throwable43);
        java.lang.Throwable[] throwableArray45 = illegalMoveException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = illegalMoveException44.getSuppressed();
        a1.IllegalPositionException illegalPositionException47 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException44);
        java.lang.Throwable[] throwableArray48 = illegalPositionException47.getSuppressed();
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException47);
        illegalMoveException37.addSuppressed((java.lang.Throwable) illegalPositionException47);
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException37);
        illegalPositionException7.addSuppressed((java.lang.Throwable) illegalMoveException37);
        java.lang.Throwable throwable55 = null;
        a1.IllegalMoveException illegalMoveException56 = new a1.IllegalMoveException("hi!", throwable55);
        java.lang.Throwable[] throwableArray57 = illegalMoveException56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = illegalMoveException56.getSuppressed();
        java.lang.Throwable[] throwableArray59 = illegalMoveException56.getSuppressed();
        java.lang.Throwable throwable63 = null;
        a1.IllegalMoveException illegalMoveException64 = new a1.IllegalMoveException("hi!", throwable63);
        a1.IllegalPositionException illegalPositionException65 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException64);
        a1.IllegalMoveException illegalMoveException66 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException64);
        illegalMoveException56.addSuppressed((java.lang.Throwable) illegalMoveException66);
        a1.IllegalPositionException illegalPositionException68 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException56);
        illegalMoveException37.addSuppressed((java.lang.Throwable) illegalMoveException56);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Knight knight69 = new a1.Knight(chessBoard53, color66);
        a1.Rook rook70 = new a1.Rook(chessBoard44, color66);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color66);
        java.util.ArrayList<java.lang.String> strList72 = rook71.legalMoves();
        java.lang.String str73 = rook71.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265c" + "'", str73, "\u265c");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.ChessPiece.Color color24 = bishop23.getColor();
        a1.Rook rook25 = new a1.Rook(chessBoard0, color24);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        java.util.ArrayList<java.lang.String> strList13 = pawn12.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = null;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.King king66 = new a1.King(chessBoard54, color63);
        java.util.ArrayList<java.lang.String> strList67 = king66.legalMoves();
        java.util.ArrayList<java.lang.String> strList68 = king66.legalMoves();
        java.lang.String str69 = king66.toString();
        java.lang.String str70 = king66.getPosition();
        java.lang.String str71 = king66.toString();
        a1.ChessPiece.Color color72 = king66.getColor();
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color72);
        java.util.ArrayList<java.lang.String> strList74 = bishop73.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265a" + "'", str69, "\u265a");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u265a" + "'", str71, "\u265a");
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList74);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = null;
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        java.lang.String str8 = pawn7.toString();
        boolean boolean10 = chessBoard4.placePiece((a1.ChessPiece) pawn7, "");
        java.lang.String str11 = pawn7.getPosition();
        java.util.ArrayList<java.lang.String> strList12 = pawn7.legalMoves();
        java.lang.String str13 = pawn7.toString();
        java.lang.String str14 = pawn7.toString();
        java.util.ArrayList<java.lang.String> strList15 = pawn7.legalMoves();
        boolean boolean17 = chessBoard0.placePiece((a1.ChessPiece) pawn7, "");
        java.util.ArrayList<java.lang.String> strList18 = pawn7.legalMoves();
        java.lang.Class<?> wildcardClass19 = pawn7.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265f" + "'", str14, "\u265f");
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.lang.String str9 = pawn3.toString();
        java.lang.String str10 = pawn3.toString();
        java.util.ArrayList<java.lang.String> strList11 = pawn3.legalMoves();
        java.lang.String str12 = pawn3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265f" + "'", str12, "\u265f");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = null;
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        java.lang.String str22 = pawn21.toString();
        boolean boolean24 = chessBoard18.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        java.lang.String str29 = pawn27.toString();
        boolean boolean31 = chessBoard18.placePiece((a1.ChessPiece) pawn27, "\u265f");
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        boolean boolean37 = chessBoard32.placePiece((a1.ChessPiece) rook35, "\u265f");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard38, color44);
        boolean boolean48 = chessBoard32.placePiece((a1.ChessPiece) knight46, "");
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard56, color66);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard49, color66);
        a1.King king70 = new a1.King(chessBoard32, color66);
        a1.King king71 = new a1.King(chessBoard18, color66);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = null;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Knight knight79 = new a1.Knight(chessBoard75, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard75, color81);
        a1.King king84 = new a1.King(chessBoard72, color81);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard18, color81);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard0, color81);
        java.util.ArrayList<java.lang.String> strList87 = bishop86.legalMoves();
        java.lang.String str88 = bishop86.toString();
        java.lang.String str89 = bishop86.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u265f" + "'", str29, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u265d" + "'", str88, "\u265d");
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            rook2.setPosition("a1.IllegalPositionException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard49, color68);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard0, color68);
        java.util.ArrayList<java.lang.String> strList73 = pawn72.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList73);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        java.lang.String str26 = king25.toString();
        java.lang.String str27 = king25.toString();
        java.util.ArrayList<java.lang.String> strList28 = king25.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265a" + "'", str26, "\u265a");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265a" + "'", str27, "\u265a");
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Bishop bishop39 = new a1.Bishop(chessBoard31, color37);
        a1.King king40 = new a1.King(chessBoard28, color37);
        a1.ChessBoard chessBoard41 = null;
        a1.ChessPiece.Color color42 = null;
        a1.Pawn pawn43 = new a1.Pawn(chessBoard41, color42);
        java.util.ArrayList<java.lang.String> strList44 = pawn43.legalMoves();
        boolean boolean46 = chessBoard28.placePiece((a1.ChessPiece) pawn43, "\u265e");
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Pawn pawn59 = new a1.Pawn(chessBoard47, color57);
        java.lang.String str60 = pawn59.getPosition();
        a1.ChessPiece.Color color61 = pawn59.getColor();
        a1.Pawn pawn62 = new a1.Pawn(chessBoard28, color61);
        a1.King king63 = new a1.King(chessBoard0, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = null;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        java.lang.String str70 = rook69.toString();
        java.util.ArrayList<java.lang.String> strList71 = rook69.legalMoves();
        java.lang.String str72 = rook69.toString();
        java.lang.String str73 = rook69.toString();
        a1.ChessPiece.Color color74 = rook69.getColor();
        a1.Bishop bishop75 = new a1.Bishop(chessBoard64, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color74);
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265c" + "'", str70, "\u265c");
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265c" + "'", str72, "\u265c");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265c" + "'", str73, "\u265c");
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.toString();
        java.lang.String str12 = bishop10.toString();
        java.util.ArrayList<java.lang.String> strList13 = bishop10.legalMoves();
        java.lang.String str14 = bishop10.toString();
        a1.ChessPiece.Color color15 = bishop10.getColor();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265d" + "'", str11, "\u265d");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265d" + "'", str14, "\u265d");
        org.junit.Assert.assertNull(color15);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece34 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.lang.String str5 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = rook2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: a1.IllegalPositionException: ", "\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.WHITE;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        java.util.ArrayList<java.lang.String> strList10 = knight9.legalMoves();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.WHITE + "'", color8.equals(a1.ChessPiece.Color.WHITE));
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Pawn pawn56 = new a1.Pawn(chessBoard44, color54);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard41, color54);
        a1.ChessPiece.Color color58 = pawn57.getColor();
        a1.Rook rook59 = new a1.Rook(chessBoard0, color58);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = null;
        a1.ChessPiece.Color color63 = null;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard62, color63);
        java.lang.String str65 = pawn64.toString();
        boolean boolean67 = chessBoard61.placePiece((a1.ChessPiece) pawn64, "");
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Knight knight72 = new a1.Knight(chessBoard68, color70);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Bishop bishop76 = new a1.Bishop(chessBoard68, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Pawn pawn80 = new a1.Pawn(chessBoard68, color78);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard61, color78);
        java.util.ArrayList<java.lang.String> strList82 = bishop81.legalMoves();
        a1.ChessPiece.Color color83 = bishop81.getColor();
        a1.Knight knight84 = new a1.Knight(chessBoard0, color83);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265f" + "'", str65, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        java.lang.String str44 = knight43.getPosition();
        java.lang.String str45 = knight43.toString();
        a1.ChessPiece.Color color46 = knight43.getColor();
        java.lang.String str47 = knight43.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265e" + "'", str45, "\u265e");
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = null;
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        java.lang.String str8 = pawn7.toString();
        boolean boolean10 = chessBoard4.placePiece((a1.ChessPiece) pawn7, "");
        a1.ChessBoard chessBoard11 = null;
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard11, color12);
        java.lang.String str14 = pawn13.toString();
        java.lang.String str15 = pawn13.toString();
        boolean boolean17 = chessBoard4.placePiece((a1.ChessPiece) pawn13, "\u265f");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        boolean boolean23 = chessBoard18.placePiece((a1.ChessPiece) rook21, "\u265f");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard24, color30);
        boolean boolean34 = chessBoard18.placePiece((a1.ChessPiece) knight32, "");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Pawn pawn54 = new a1.Pawn(chessBoard42, color52);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard35, color52);
        a1.King king56 = new a1.King(chessBoard18, color52);
        a1.King king57 = new a1.King(chessBoard4, color52);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = null;
        a1.ChessPiece.Color color60 = null;
        a1.Pawn pawn61 = new a1.Pawn(chessBoard59, color60);
        java.lang.String str62 = pawn61.toString();
        boolean boolean64 = chessBoard58.placePiece((a1.ChessPiece) pawn61, "");
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.Knight knight74 = new a1.Knight(chessBoard58, color71);
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight76 = new a1.Knight(chessBoard58, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard4, color75);
        a1.Knight knight78 = new a1.Knight(chessBoard0, color75);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass80 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265f" + "'", str14, "\u265f");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265f" + "'", str15, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265f" + "'", str62, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        boolean boolean60 = chessBoard55.placePiece((a1.ChessPiece) rook58, "\u265f");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = null;
        a1.ChessPiece.Color color63 = null;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard62, color63);
        java.lang.String str65 = pawn64.toString();
        boolean boolean67 = chessBoard61.placePiece((a1.ChessPiece) pawn64, "");
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Knight knight72 = new a1.Knight(chessBoard68, color70);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Bishop bishop76 = new a1.Bishop(chessBoard68, color74);
        a1.Knight knight77 = new a1.Knight(chessBoard61, color74);
        a1.Knight knight78 = new a1.Knight(chessBoard55, color74);
        a1.King king79 = new a1.King(chessBoard54, color74);
        java.lang.String str80 = king79.toString();
        java.util.ArrayList<java.lang.String> strList81 = king79.legalMoves();
        java.util.ArrayList<java.lang.String> strList82 = king79.legalMoves();
        java.util.ArrayList<java.lang.String> strList83 = king79.legalMoves();
        a1.ChessPiece.Color color84 = king79.getColor();
        a1.Bishop bishop85 = new a1.Bishop(chessBoard0, color84);
        java.util.ArrayList<java.lang.String> strList86 = bishop85.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265f" + "'", str65, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u265a" + "'", str80, "\u265a");
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList86);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.lang.String str4 = rook2.getPosition();
        java.lang.String str5 = rook2.toString();
        a1.ChessPiece.Color color6 = rook2.getColor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertNull(color6);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard4, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Bishop bishop12 = new a1.Bishop(chessBoard4, color10);
        a1.Rook rook13 = new a1.Rook(chessBoard1, color10);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Bishop bishop25 = new a1.Bishop(chessBoard17, color23);
        a1.Rook rook26 = new a1.Rook(chessBoard14, color23);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard1, color23);
        a1.King king28 = new a1.King(chessBoard0, color23);
        java.util.ArrayList<java.lang.String> strList29 = king28.legalMoves();
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        java.lang.String str65 = rook64.toString();
        java.lang.String str66 = rook64.getPosition();
        java.util.ArrayList<java.lang.String> strList67 = rook64.legalMoves();
        boolean boolean69 = chessBoard0.placePiece((a1.ChessPiece) rook64, "\u265a");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece71 = chessBoard0.getPiece("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265c" + "'", str65, "\u265c");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = null;
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        java.lang.String str22 = pawn21.toString();
        boolean boolean24 = chessBoard18.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        java.lang.String str29 = pawn27.toString();
        boolean boolean31 = chessBoard18.placePiece((a1.ChessPiece) pawn27, "\u265f");
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        boolean boolean37 = chessBoard32.placePiece((a1.ChessPiece) rook35, "\u265f");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard38, color44);
        boolean boolean48 = chessBoard32.placePiece((a1.ChessPiece) knight46, "");
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard56, color66);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard49, color66);
        a1.King king70 = new a1.King(chessBoard32, color66);
        a1.King king71 = new a1.King(chessBoard18, color66);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = null;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Knight knight79 = new a1.Knight(chessBoard75, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard75, color81);
        a1.King king84 = new a1.King(chessBoard72, color81);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard18, color81);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard0, color81);
        a1.ChessPiece.Color color87 = null;
        a1.King king88 = new a1.King(chessBoard0, color87);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u265f" + "'", str29, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        java.lang.Throwable[] throwableArray10 = illegalMoveException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = illegalMoveException9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = illegalMoveException9.getSuppressed();
        java.lang.Throwable throwable16 = null;
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("hi!", throwable16);
        a1.IllegalPositionException illegalPositionException18 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException17);
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException17);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException19);
        illegalMoveException6.addSuppressed((java.lang.Throwable) illegalMoveException19);
        java.lang.Throwable[] throwableArray22 = illegalMoveException19.getSuppressed();
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException32);
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException32);
        a1.IllegalPositionException illegalPositionException35 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException32);
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalPositionException37);
        java.lang.Throwable throwable42 = null;
        a1.IllegalMoveException illegalMoveException43 = new a1.IllegalMoveException("hi!", throwable42);
        a1.IllegalPositionException illegalPositionException44 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException43);
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException43);
        java.lang.Throwable[] throwableArray46 = illegalMoveException45.getSuppressed();
        illegalPositionException37.addSuppressed((java.lang.Throwable) illegalMoveException45);
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("a1.IllegalMoveException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException37);
        illegalMoveException19.addSuppressed((java.lang.Throwable) illegalPositionException48);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece22 = chessBoard0.getPiece("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable[] throwableArray8 = illegalMoveException7.getSuppressed();
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException7);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList9 = bishop8.legalMoves();
        java.lang.String str10 = bishop8.toString();
        java.util.ArrayList<java.lang.String> strList11 = bishop8.legalMoves();
        java.lang.String str12 = bishop8.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265d" + "'", str10, "\u265d");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.util.ArrayList<java.lang.String> strList15 = pawn9.legalMoves();
        java.lang.String str16 = pawn9.getPosition();
        // The following exception was thrown during execution in test generation
        try {
            pawn9.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = null;
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = null;
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        java.lang.String str22 = pawn21.toString();
        boolean boolean24 = chessBoard18.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.Knight knight34 = new a1.Knight(chessBoard18, color31);
        a1.Knight knight35 = new a1.Knight(chessBoard17, color31);
        java.util.ArrayList<java.lang.String> strList36 = knight35.legalMoves();
        java.lang.String str37 = knight35.toString();
        java.lang.String str38 = knight35.getPosition();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1.IllegalPositionException: a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        boolean boolean46 = chessBoard41.placePiece((a1.ChessPiece) rook44, "\u265f");
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard47, color53);
        boolean boolean57 = chessBoard41.placePiece((a1.ChessPiece) knight55, "");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = null;
        a1.ChessPiece.Color color60 = null;
        a1.Pawn pawn61 = new a1.Pawn(chessBoard59, color60);
        java.lang.String str62 = pawn61.toString();
        boolean boolean64 = chessBoard58.placePiece((a1.ChessPiece) pawn61, "");
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.Knight knight74 = new a1.Knight(chessBoard58, color71);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Knight knight82 = new a1.Knight(chessBoard78, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard78, color84);
        a1.ChessBoard chessBoard87 = new a1.ChessBoard();
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook89 = new a1.Rook(chessBoard87, color88);
        a1.Pawn pawn90 = new a1.Pawn(chessBoard78, color88);
        a1.Pawn pawn91 = new a1.Pawn(chessBoard75, color88);
        a1.Pawn pawn92 = new a1.Pawn(chessBoard58, color88);
        a1.Pawn pawn93 = new a1.Pawn(chessBoard41, color88);
        a1.Pawn pawn94 = new a1.Pawn(chessBoard0, color88);
        java.util.ArrayList<java.lang.String> strList95 = pawn94.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265e" + "'", str37, "\u265e");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265f" + "'", str62, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color88.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList95);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException7);
        java.lang.Throwable[] throwableArray11 = illegalPositionException7.getSuppressed();
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException21);
        java.lang.Throwable throwable25 = null;
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", throwable25);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265a", throwable25);
        java.lang.Throwable[] throwableArray28 = illegalMoveException27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = illegalMoveException27.getSuppressed();
        illegalPositionException21.addSuppressed((java.lang.Throwable) illegalMoveException27);
        illegalPositionException7.addSuppressed((java.lang.Throwable) illegalPositionException21);
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("\u265a", throwable35);
        java.lang.Throwable[] throwableArray38 = illegalMoveException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = illegalMoveException37.getSuppressed();
        java.lang.Throwable throwable43 = null;
        a1.IllegalMoveException illegalMoveException44 = new a1.IllegalMoveException("hi!", throwable43);
        java.lang.Throwable[] throwableArray45 = illegalMoveException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = illegalMoveException44.getSuppressed();
        a1.IllegalPositionException illegalPositionException47 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException44);
        java.lang.Throwable[] throwableArray48 = illegalPositionException47.getSuppressed();
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException47);
        illegalMoveException37.addSuppressed((java.lang.Throwable) illegalPositionException47);
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException37);
        illegalPositionException7.addSuppressed((java.lang.Throwable) illegalMoveException37);
        java.lang.Throwable[] throwableArray53 = illegalMoveException37.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            rook2.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        java.lang.String str33 = pawn31.toString();
        boolean boolean35 = chessBoard22.placePiece((a1.ChessPiece) pawn31, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        boolean boolean41 = chessBoard36.placePiece((a1.ChessPiece) rook39, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard36.placePiece((a1.ChessPiece) knight50, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        a1.King king74 = new a1.King(chessBoard36, color70);
        a1.King king75 = new a1.King(chessBoard22, color70);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color70);
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        java.util.ArrayList<java.lang.String> strList84 = knight83.legalMoves();
        a1.ChessPiece.Color color85 = knight83.getColor();
        a1.Rook rook86 = new a1.Rook(chessBoard0, color85);
        java.util.ArrayList<java.lang.String> strList87 = rook86.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList87);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException9);
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException14.getSuppressed();
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException22);
        illegalMoveException14.addSuppressed((java.lang.Throwable) illegalMoveException24);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException24);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException24);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException27);
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException28);
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException28);
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException36);
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException41.getSuppressed();
        java.lang.Throwable throwable48 = null;
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("hi!", throwable48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException49);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException49);
        illegalMoveException41.addSuppressed((java.lang.Throwable) illegalMoveException51);
        illegalMoveException38.addSuppressed((java.lang.Throwable) illegalMoveException51);
        a1.IllegalPositionException illegalPositionException54 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException51);
        java.lang.Throwable[] throwableArray55 = illegalMoveException51.getSuppressed();
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException51);
        a1.IllegalPositionException illegalPositionException57 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException30);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray55);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Rook rook38 = new a1.Rook(chessBoard26, color35);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Bishop bishop50 = new a1.Bishop(chessBoard42, color48);
        a1.Rook rook51 = new a1.Rook(chessBoard39, color48);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard26, color48);
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard26, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard21, color53);
        java.util.ArrayList<java.lang.String> strList56 = bishop55.legalMoves();
        java.lang.String str57 = bishop55.toString();
        a1.ChessPiece.Color color58 = bishop55.getColor();
        a1.Pawn pawn59 = new a1.Pawn(chessBoard0, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessPiece.Color color69 = bishop68.getColor();
        a1.Bishop bishop70 = new a1.Bishop(chessBoard0, color69);
        java.lang.Class<?> wildcardClass71 = bishop70.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265d" + "'", str57, "\u265d");
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        boolean boolean29 = chessBoard23.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Knight knight39 = new a1.Knight(chessBoard23, color36);
        a1.Knight knight40 = new a1.Knight(chessBoard17, color36);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard0, color36);
        java.lang.String str42 = bishop41.toString();
        java.lang.String str43 = bishop41.toString();
        java.util.ArrayList<java.lang.String> strList44 = bishop41.legalMoves();
        java.lang.String str45 = bishop41.toString();
        java.util.ArrayList<java.lang.String> strList46 = bishop41.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265d" + "'", str42, "\u265d");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265d" + "'", str43, "\u265d");
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265d" + "'", str45, "\u265d");
        org.junit.Assert.assertNotNull(strList46);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.lang.String str7 = rook2.toString();
        java.lang.String str8 = rook2.toString();
        java.lang.String str9 = rook2.getPosition();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessBoard chessBoard46 = null;
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = null;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Knight knight54 = new a1.Knight(chessBoard50, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard50, color56);
        a1.Rook rook59 = new a1.Rook(chessBoard47, color56);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = null;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard63, color69);
        a1.Rook rook72 = new a1.Rook(chessBoard60, color69);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard47, color69);
        a1.King king74 = new a1.King(chessBoard46, color69);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard45, color69);
        a1.Rook rook76 = new a1.Rook(chessBoard0, color69);
        // The following exception was thrown during execution in test generation
        try {
            rook76.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessPiece.Color color17 = pawn16.getColor();
        java.util.ArrayList<java.lang.String> strList18 = pawn16.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.lang.String str9 = bishop8.toString();
        java.lang.String str10 = bishop8.toString();
        java.util.ArrayList<java.lang.String> strList11 = bishop8.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = bishop8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265d" + "'", str9, "\u265d");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265d" + "'", str10, "\u265d");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        a1.Knight knight13 = new a1.Knight(chessBoard9, color11);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Bishop bishop17 = new a1.Bishop(chessBoard9, color15);
        a1.Rook rook18 = new a1.Rook(chessBoard6, color15);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.Rook rook31 = new a1.Rook(chessBoard19, color28);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard6, color28);
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard6, color33);
        a1.Bishop bishop35 = new a1.Bishop(chessBoard1, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = null;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.Rook rook48 = new a1.Rook(chessBoard36, color45);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = null;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.Rook rook61 = new a1.Rook(chessBoard49, color58);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard36, color58);
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard36, color63);
        a1.Rook rook65 = new a1.Rook(chessBoard1, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = null;
        a1.ChessPiece.Color color68 = null;
        a1.Pawn pawn69 = new a1.Pawn(chessBoard67, color68);
        java.lang.String str70 = pawn69.toString();
        boolean boolean72 = chessBoard66.placePiece((a1.ChessPiece) pawn69, "");
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Pawn pawn85 = new a1.Pawn(chessBoard73, color83);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard66, color83);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard1, color83);
        a1.King king88 = new a1.King(chessBoard0, color83);
        java.util.ArrayList<java.lang.String> strList89 = king88.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color11 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color11.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265f" + "'", str70, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList89);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        a1.ChessPiece.Color color22 = bishop20.getColor();
        a1.ChessPiece.Color color23 = bishop20.getColor();
        java.lang.String str24 = bishop20.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265d" + "'", str24, "\u265d");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable[] throwableArray9 = illegalPositionException8.getSuppressed();
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException10);
        java.lang.String str12 = illegalPositionException11.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece45 = chessBoard0.getPiece("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.toString();
        java.lang.String str12 = bishop10.toString();
        java.util.ArrayList<java.lang.String> strList13 = bishop10.legalMoves();
        java.lang.String str14 = bishop10.toString();
        java.util.ArrayList<java.lang.String> strList15 = bishop10.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265d" + "'", str11, "\u265d");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265d" + "'", str14, "\u265d");
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: hi!", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard0, color6);
        java.lang.String str9 = knight8.toString();
        java.util.ArrayList<java.lang.String> strList10 = knight8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265e" + "'", str9, "\u265e");
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable[] throwableArray9 = illegalPositionException8.getSuppressed();
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException8);
        java.lang.Throwable throwable15 = null;
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("hi!", throwable15);
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException16);
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException16);
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException16);
        illegalPositionException10.addSuppressed((java.lang.Throwable) illegalMoveException19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException19);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = null;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        java.lang.String str74 = rook73.toString();
        java.lang.String str75 = rook73.getPosition();
        java.util.ArrayList<java.lang.String> strList76 = rook73.legalMoves();
        java.util.ArrayList<java.lang.String> strList77 = rook73.legalMoves();
        java.util.ArrayList<java.lang.String> strList78 = rook73.legalMoves();
        java.lang.String str79 = rook73.toString();
        boolean boolean81 = chessBoard0.placePiece((a1.ChessPiece) rook73, "\u265c");
        a1.ChessPiece.Color color82 = rook73.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265c" + "'", str74, "\u265c");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265c" + "'", str79, "\u265c");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(color82);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        java.lang.String str6 = rook5.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        java.lang.String str8 = rook5.toString();
        java.lang.String str9 = rook5.toString();
        a1.ChessPiece.Color color10 = rook5.getColor();
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = null;
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard13, color19);
        a1.Knight knight22 = new a1.Knight(chessBoard12, color19);
        java.util.ArrayList<java.lang.String> strList23 = knight22.legalMoves();
        a1.ChessPiece.Color color24 = knight22.getColor();
        a1.Rook rook25 = new a1.Rook(chessBoard0, color24);
        java.lang.Class<?> wildcardClass26 = color24.getClass();
        org.junit.Assert.assertTrue("'" + color4 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color4.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        java.lang.String str17 = knight14.getPosition();
        java.util.ArrayList<java.lang.String> strList18 = knight14.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = knight14.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = null;
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = null;
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        java.lang.String str22 = pawn21.toString();
        boolean boolean24 = chessBoard18.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.Knight knight34 = new a1.Knight(chessBoard18, color31);
        a1.Knight knight35 = new a1.Knight(chessBoard17, color31);
        java.util.ArrayList<java.lang.String> strList36 = knight35.legalMoves();
        java.lang.String str37 = knight35.toString();
        java.lang.String str38 = knight35.getPosition();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1.IllegalPositionException: a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        boolean boolean46 = chessBoard41.placePiece((a1.ChessPiece) rook44, "\u265f");
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard47, color53);
        boolean boolean57 = chessBoard41.placePiece((a1.ChessPiece) knight55, "");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = null;
        a1.ChessPiece.Color color60 = null;
        a1.Pawn pawn61 = new a1.Pawn(chessBoard59, color60);
        java.lang.String str62 = pawn61.toString();
        boolean boolean64 = chessBoard58.placePiece((a1.ChessPiece) pawn61, "");
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.Knight knight74 = new a1.Knight(chessBoard58, color71);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Knight knight82 = new a1.Knight(chessBoard78, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard78, color84);
        a1.ChessBoard chessBoard87 = new a1.ChessBoard();
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook89 = new a1.Rook(chessBoard87, color88);
        a1.Pawn pawn90 = new a1.Pawn(chessBoard78, color88);
        a1.Pawn pawn91 = new a1.Pawn(chessBoard75, color88);
        a1.Pawn pawn92 = new a1.Pawn(chessBoard58, color88);
        a1.Pawn pawn93 = new a1.Pawn(chessBoard41, color88);
        a1.Pawn pawn94 = new a1.Pawn(chessBoard0, color88);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece96 = chessBoard0.getPiece("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265e" + "'", str37, "\u265e");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265f" + "'", str62, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color88.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.lang.String str6 = rook2.toString();
        java.lang.String str7 = rook2.getPosition();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece16 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        a1.ChessPiece.Color color72 = rook71.getColor();
        java.lang.String str73 = rook71.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265c" + "'", str73, "\u265c");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        java.lang.String str71 = king70.toString();
        java.lang.String str72 = king70.toString();
        java.lang.String str73 = king70.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u265a" + "'", str71, "\u265a");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265a" + "'", str72, "\u265a");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265a" + "'", str73, "\u265a");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException14);
        java.lang.Throwable[] throwableArray18 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray19 = illegalMoveException14.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException11);
        java.lang.Throwable throwable15 = null;
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("hi!", throwable15);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265a", throwable15);
        java.lang.Throwable[] throwableArray18 = illegalMoveException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = illegalMoveException17.getSuppressed();
        illegalPositionException11.addSuppressed((java.lang.Throwable) illegalMoveException17);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        a1.IllegalPositionException illegalPositionException29 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException28);
        java.lang.Throwable throwable33 = null;
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("hi!", throwable33);
        a1.IllegalPositionException illegalPositionException35 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException34);
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException35);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalPositionException35);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException28);
        a1.IllegalMoveException illegalMoveException39 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException38);
        illegalMoveException21.addSuppressed((java.lang.Throwable) illegalMoveException39);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard35, color48);
        a1.ChessPiece.Color color52 = pawn51.getColor();
        a1.Rook rook53 = new a1.Rook(chessBoard0, color52);
        java.util.ArrayList<java.lang.String> strList54 = rook53.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList54);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        boolean boolean35 = chessBoard30.placePiece((a1.ChessPiece) rook33, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard36, color38);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard36, color42);
        boolean boolean46 = chessBoard30.placePiece((a1.ChessPiece) knight44, "");
        a1.ChessPiece.Color color47 = knight44.getColor();
        a1.Bishop bishop48 = new a1.Bishop(chessBoard0, color47);
        java.lang.String str49 = bishop48.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u265d" + "'", str49, "\u265d");
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.Rook rook68 = new a1.Rook(chessBoard0, color65);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = null;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        java.util.ArrayList<java.lang.String> strList72 = rook71.legalMoves();
        java.util.ArrayList<java.lang.String> strList73 = rook71.legalMoves();
        boolean boolean75 = chessBoard0.placePiece((a1.ChessPiece) rook71, "\u265e");
        a1.ChessPiece.Color color76 = rook71.getColor();
        java.lang.String str77 = rook71.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(color76);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        a1.ChessPiece.Color color59 = null;
        a1.Knight knight60 = new a1.Knight(chessBoard0, color59);
        java.util.ArrayList<java.lang.String> strList61 = knight60.legalMoves();
        java.lang.String str62 = knight60.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265e" + "'", str62, "\u265e");
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.Rook rook29 = new a1.Rook(chessBoard17, color26);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = null;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard33, color39);
        a1.Rook rook42 = new a1.Rook(chessBoard30, color39);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard17, color39);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = null;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.King king61 = new a1.King(chessBoard49, color58);
        a1.ChessBoard chessBoard62 = null;
        a1.ChessPiece.Color color63 = null;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard62, color63);
        java.util.ArrayList<java.lang.String> strList65 = pawn64.legalMoves();
        boolean boolean67 = chessBoard49.placePiece((a1.ChessPiece) pawn64, "\u265e");
        chessBoard49.initialize();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard72, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Pawn pawn84 = new a1.Pawn(chessBoard72, color82);
        a1.Pawn pawn85 = new a1.Pawn(chessBoard69, color82);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard49, color82);
        a1.Knight knight87 = new a1.Knight(chessBoard44, color82);
        a1.Rook rook88 = new a1.Rook(chessBoard17, color82);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard0, color82);
        a1.ChessPiece.Color color90 = bishop89.getColor();
        // The following exception was thrown during execution in test generation
        try {
            bishop89.setPosition("a1.IllegalPositionException: a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.King king47 = new a1.King(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = null;
        a1.ChessPiece.Color color49 = null;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard48, color49);
        java.util.ArrayList<java.lang.String> strList51 = pawn50.legalMoves();
        boolean boolean53 = chessBoard35.placePiece((a1.ChessPiece) pawn50, "\u265e");
        chessBoard35.initialize();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard58, color68);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard55, color68);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard35, color68);
        a1.Knight knight73 = new a1.Knight(chessBoard30, color68);
        java.lang.String str74 = knight73.getPosition();
        java.util.ArrayList<java.lang.String> strList75 = knight73.legalMoves();
        a1.ChessPiece.Color color76 = knight73.getColor();
        a1.Pawn pawn77 = new a1.Pawn(chessBoard0, color76);
        java.lang.Class<?> wildcardClass78 = pawn77.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", throwable6);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable[] throwableArray12 = illegalMoveException8.getSuppressed();
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException13);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        java.lang.String str33 = pawn31.toString();
        boolean boolean35 = chessBoard22.placePiece((a1.ChessPiece) pawn31, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        boolean boolean41 = chessBoard36.placePiece((a1.ChessPiece) rook39, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard36.placePiece((a1.ChessPiece) knight50, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        a1.King king74 = new a1.King(chessBoard36, color70);
        a1.King king75 = new a1.King(chessBoard22, color70);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color70);
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        java.util.ArrayList<java.lang.String> strList84 = knight83.legalMoves();
        a1.ChessPiece.Color color85 = knight83.getColor();
        a1.Rook rook86 = new a1.Rook(chessBoard0, color85);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece88 = chessBoard0.getPiece("a1.IllegalPositionException: a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = null;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Rook rook49 = new a1.Rook(chessBoard37, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = null;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard53, color59);
        a1.Rook rook62 = new a1.Rook(chessBoard50, color59);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard37, color59);
        a1.Knight knight64 = new a1.Knight(chessBoard0, color59);
        java.lang.String str65 = knight64.toString();
        java.lang.String str66 = knight64.getPosition();
        java.util.ArrayList<java.lang.String> strList67 = knight64.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265e" + "'", str65, "\u265e");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.lang.String str7 = rook2.toString();
        java.lang.String str8 = rook2.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Pawn pawn37 = new a1.Pawn(chessBoard21, color34);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        java.util.ArrayList<java.lang.String> strList59 = bishop58.legalMoves();
        a1.ChessPiece.Color color60 = bishop58.getColor();
        a1.Knight knight61 = new a1.Knight(chessBoard21, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = null;
        a1.ChessPiece.Color color64 = null;
        a1.Pawn pawn65 = new a1.Pawn(chessBoard63, color64);
        java.lang.String str66 = pawn65.toString();
        boolean boolean68 = chessBoard62.placePiece((a1.ChessPiece) pawn65, "");
        java.lang.String str69 = pawn65.getPosition();
        java.util.ArrayList<java.lang.String> strList70 = pawn65.legalMoves();
        java.util.ArrayList<java.lang.String> strList71 = pawn65.legalMoves();
        java.util.ArrayList<java.lang.String> strList72 = pawn65.legalMoves();
        boolean boolean74 = chessBoard21.placePiece((a1.ChessPiece) pawn65, "\u265d");
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = null;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        java.lang.String str81 = rook80.toString();
        java.util.ArrayList<java.lang.String> strList82 = rook80.legalMoves();
        java.lang.String str83 = rook80.toString();
        java.lang.String str84 = rook80.toString();
        a1.ChessPiece.Color color85 = rook80.getColor();
        a1.Bishop bishop86 = new a1.Bishop(chessBoard75, color85);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard21, color85);
        a1.Pawn pawn88 = new a1.Pawn(chessBoard0, color85);
        java.util.ArrayList<java.lang.String> strList89 = pawn88.legalMoves();
        java.util.ArrayList<java.lang.String> strList90 = pawn88.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u265f" + "'", str66, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265c" + "'", str81, "\u265c");
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265c" + "'", str84, "\u265c");
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(strList90);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = null;
        a1.ChessPiece.Color color74 = null;
        a1.Pawn pawn75 = new a1.Pawn(chessBoard73, color74);
        java.lang.String str76 = pawn75.toString();
        boolean boolean78 = chessBoard72.placePiece((a1.ChessPiece) pawn75, "");
        boolean boolean80 = chessBoard0.placePiece((a1.ChessPiece) pawn75, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            pawn75.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265f" + "'", str76, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.lang.String str18 = king12.toString();
        java.lang.String str19 = king12.toString();
        java.lang.String str20 = king12.toString();
        java.util.ArrayList<java.lang.String> strList21 = king12.legalMoves();
        java.lang.String str22 = king12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265a" + "'", str18, "\u265a");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265a" + "'", str19, "\u265a");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265a" + "'", str20, "\u265a");
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265a" + "'", str22, "\u265a");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = null;
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard22, color23);
        java.lang.String str25 = pawn24.toString();
        boolean boolean27 = chessBoard21.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessBoard chessBoard28 = null;
        a1.ChessPiece.Color color29 = null;
        a1.Pawn pawn30 = new a1.Pawn(chessBoard28, color29);
        java.lang.String str31 = pawn30.toString();
        java.lang.String str32 = pawn30.toString();
        boolean boolean34 = chessBoard21.placePiece((a1.ChessPiece) pawn30, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        boolean boolean40 = chessBoard35.placePiece((a1.ChessPiece) rook38, "\u265f");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard41, color47);
        boolean boolean51 = chessBoard35.placePiece((a1.ChessPiece) knight49, "");
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = null;
        a1.ChessPiece.Color color54 = null;
        a1.Pawn pawn55 = new a1.Pawn(chessBoard53, color54);
        java.lang.String str56 = pawn55.toString();
        boolean boolean58 = chessBoard52.placePiece((a1.ChessPiece) pawn55, "");
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Knight knight63 = new a1.Knight(chessBoard59, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard59, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard59, color69);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard52, color69);
        a1.King king73 = new a1.King(chessBoard35, color69);
        a1.King king74 = new a1.King(chessBoard21, color69);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = null;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Knight knight82 = new a1.Knight(chessBoard78, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard78, color84);
        a1.King king87 = new a1.King(chessBoard75, color84);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard21, color84);
        a1.ChessPiece.Color color89 = bishop88.getColor();
        a1.Knight knight90 = new a1.Knight(chessBoard0, color89);
        a1.ChessBoard chessBoard91 = new a1.ChessBoard();
        a1.ChessPiece.Color color92 = null;
        a1.Rook rook93 = new a1.Rook(chessBoard91, color92);
        java.util.ArrayList<java.lang.String> strList94 = rook93.legalMoves();
        java.util.ArrayList<java.lang.String> strList95 = rook93.legalMoves();
        boolean boolean97 = chessBoard0.placePiece((a1.ChessPiece) rook93, "\u265d");
        java.lang.String str98 = rook93.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u265f" + "'", str25, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u265f" + "'", str31, "\u265f");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265f" + "'", str56, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "\u265c" + "'", str98, "\u265c");
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("\u265a", throwable2);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException8);
        java.lang.String str26 = illegalMoveException8.toString();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265a" + "'", str26, "\u265a");
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        java.lang.String str26 = king25.toString();
        java.util.ArrayList<java.lang.String> strList27 = king25.legalMoves();
        java.lang.String str28 = king25.toString();
        a1.ChessPiece.Color color29 = king25.getColor();
        java.lang.String str30 = king25.toString();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265a" + "'", str26, "\u265a");
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265a" + "'", str28, "\u265a");
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u265a" + "'", str30, "\u265a");
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        java.lang.String str7 = rook3.toString();
        java.util.ArrayList<java.lang.String> strList8 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook3.legalMoves();
        java.lang.String str10 = rook3.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        java.lang.String str33 = pawn31.toString();
        boolean boolean35 = chessBoard22.placePiece((a1.ChessPiece) pawn31, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        boolean boolean41 = chessBoard36.placePiece((a1.ChessPiece) rook39, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard36.placePiece((a1.ChessPiece) knight50, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        a1.King king74 = new a1.King(chessBoard36, color70);
        a1.King king75 = new a1.King(chessBoard22, color70);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color70);
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        java.util.ArrayList<java.lang.String> strList84 = knight83.legalMoves();
        a1.ChessPiece.Color color85 = knight83.getColor();
        a1.Rook rook86 = new a1.Rook(chessBoard0, color85);
        java.lang.Class<?> wildcardClass87 = rook86.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("\u2657", (java.lang.Throwable) illegalMoveException11);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        java.lang.String str28 = pawn26.toString();
        boolean boolean30 = chessBoard17.placePiece((a1.ChessPiece) pawn26, "\u265f");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        boolean boolean36 = chessBoard31.placePiece((a1.ChessPiece) rook34, "\u265f");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard37, color43);
        boolean boolean47 = chessBoard31.placePiece((a1.ChessPiece) knight45, "");
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = null;
        a1.ChessPiece.Color color50 = null;
        a1.Pawn pawn51 = new a1.Pawn(chessBoard49, color50);
        java.lang.String str52 = pawn51.toString();
        boolean boolean54 = chessBoard48.placePiece((a1.ChessPiece) pawn51, "");
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard48, color65);
        a1.King king69 = new a1.King(chessBoard31, color65);
        a1.King king70 = new a1.King(chessBoard17, color65);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = null;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.King king83 = new a1.King(chessBoard71, color80);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard17, color80);
        a1.ChessPiece.Color color85 = bishop84.getColor();
        a1.Pawn pawn86 = new a1.Pawn(chessBoard0, color85);
        a1.ChessBoard chessBoard87 = new a1.ChessBoard();
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook89 = new a1.Rook(chessBoard87, color88);
        a1.King king90 = new a1.King(chessBoard0, color88);
        // The following exception was thrown during execution in test generation
        try {
            king90.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u265f" + "'", str52, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color88.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException24);
        java.lang.Throwable throwable29 = null;
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("hi!", throwable29);
        a1.IllegalPositionException illegalPositionException31 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException30);
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException37);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalPositionException37);
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException30);
        java.lang.Throwable throwable48 = null;
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("hi!", throwable48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException49);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException49);
        java.lang.Throwable throwable53 = null;
        a1.IllegalMoveException illegalMoveException54 = new a1.IllegalMoveException("hi!", throwable53);
        java.lang.Throwable[] throwableArray55 = illegalMoveException54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = illegalMoveException54.getSuppressed();
        java.lang.Throwable[] throwableArray57 = illegalMoveException54.getSuppressed();
        java.lang.Throwable throwable61 = null;
        a1.IllegalMoveException illegalMoveException62 = new a1.IllegalMoveException("hi!", throwable61);
        a1.IllegalPositionException illegalPositionException63 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException62);
        a1.IllegalMoveException illegalMoveException64 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException62);
        illegalMoveException54.addSuppressed((java.lang.Throwable) illegalMoveException64);
        illegalMoveException51.addSuppressed((java.lang.Throwable) illegalMoveException64);
        a1.IllegalPositionException illegalPositionException67 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException64);
        a1.IllegalMoveException illegalMoveException68 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException67);
        a1.IllegalMoveException illegalMoveException69 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException68);
        java.lang.Throwable throwable72 = null;
        a1.IllegalMoveException illegalMoveException73 = new a1.IllegalMoveException("hi!", throwable72);
        a1.IllegalMoveException illegalMoveException74 = new a1.IllegalMoveException("\u265a", throwable72);
        java.lang.Throwable[] throwableArray75 = illegalMoveException74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = illegalMoveException74.getSuppressed();
        java.lang.Throwable throwable80 = null;
        a1.IllegalMoveException illegalMoveException81 = new a1.IllegalMoveException("hi!", throwable80);
        java.lang.Throwable[] throwableArray82 = illegalMoveException81.getSuppressed();
        java.lang.Throwable[] throwableArray83 = illegalMoveException81.getSuppressed();
        a1.IllegalPositionException illegalPositionException84 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException81);
        java.lang.Throwable[] throwableArray85 = illegalPositionException84.getSuppressed();
        a1.IllegalMoveException illegalMoveException86 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException84);
        illegalMoveException74.addSuppressed((java.lang.Throwable) illegalPositionException84);
        illegalMoveException68.addSuppressed((java.lang.Throwable) illegalMoveException74);
        a1.IllegalPositionException illegalPositionException89 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException74);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalPositionException89);
        illegalMoveException25.addSuppressed((java.lang.Throwable) illegalPositionException89);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList9 = knight8.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = knight8.legalMoves();
        java.util.ArrayList<java.lang.String> strList11 = knight8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece34 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        java.lang.String str17 = knight14.getPosition();
        java.util.ArrayList<java.lang.String> strList18 = knight14.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            knight14.setPosition("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard35, color48);
        a1.ChessPiece.Color color52 = pawn51.getColor();
        a1.Rook rook53 = new a1.Rook(chessBoard0, color52);
        java.lang.String str54 = rook53.toString();
        java.util.ArrayList<java.lang.String> strList55 = rook53.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265c" + "'", str54, "\u265c");
        org.junit.Assert.assertNotNull(strList55);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException9);
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException14.getSuppressed();
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException22);
        illegalMoveException14.addSuppressed((java.lang.Throwable) illegalMoveException24);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException24);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException24);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException27);
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException28);
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("\u265a", throwable32);
        java.lang.Throwable[] throwableArray35 = illegalMoveException34.getSuppressed();
        java.lang.Throwable[] throwableArray36 = illegalMoveException34.getSuppressed();
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = illegalMoveException41.getSuppressed();
        a1.IllegalPositionException illegalPositionException44 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException41);
        java.lang.Throwable[] throwableArray45 = illegalPositionException44.getSuppressed();
        a1.IllegalMoveException illegalMoveException46 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException44);
        illegalMoveException34.addSuppressed((java.lang.Throwable) illegalPositionException44);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException34);
        a1.IllegalPositionException illegalPositionException49 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException34);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("a1.IllegalMoveException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException34);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.lang.String str38 = pawn37.toString();
        boolean boolean40 = chessBoard34.placePiece((a1.ChessPiece) pawn37, "");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard41, color51);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard34, color51);
        java.util.ArrayList<java.lang.String> strList55 = bishop54.legalMoves();
        a1.ChessPiece.Color color56 = bishop54.getColor();
        a1.Knight knight57 = new a1.Knight(chessBoard17, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard0, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard62, color72);
        a1.Pawn pawn75 = new a1.Pawn(chessBoard59, color72);
        a1.King king76 = new a1.King(chessBoard0, color72);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = null;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        java.lang.String str83 = rook82.toString();
        java.util.ArrayList<java.lang.String> strList84 = rook82.legalMoves();
        java.lang.String str85 = rook82.toString();
        java.lang.String str86 = rook82.toString();
        a1.ChessPiece.Color color87 = rook82.getColor();
        a1.Bishop bishop88 = new a1.Bishop(chessBoard77, color87);
        a1.Rook rook89 = new a1.Rook(chessBoard0, color87);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265c" + "'", str85, "\u265c");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u265c" + "'", str86, "\u265c");
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        boolean boolean67 = chessBoard62.placePiece((a1.ChessPiece) rook65, "\u265f");
        boolean boolean69 = chessBoard0.placePiece((a1.ChessPiece) rook65, "\u265a");
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessPiece.Color color48 = null;
        a1.Bishop bishop49 = new a1.Bishop(chessBoard39, color48);
        java.lang.String str50 = bishop49.toString();
        java.lang.String str51 = bishop49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) bishop49, "\u265c");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard74, color84);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard71, color84);
        a1.Pawn pawn88 = new a1.Pawn(chessBoard54, color84);
        a1.Rook rook89 = new a1.Rook(chessBoard0, color84);
        // The following exception was thrown during execution in test generation
        try {
            rook89.setPosition("a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265d" + "'", str50, "\u265d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265d" + "'", str51, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        java.lang.String str6 = rook5.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        java.lang.String str8 = rook5.toString();
        java.lang.String str9 = rook5.toString();
        a1.ChessPiece.Color color10 = rook5.getColor();
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = bishop11.getPosition();
        java.util.ArrayList<java.lang.String> strList13 = bishop11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = bishop11.legalMoves();
        org.junit.Assert.assertTrue("'" + color4 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color4.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        boolean boolean20 = chessBoard15.placePiece((a1.ChessPiece) rook18, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard21, color27);
        boolean boolean31 = chessBoard15.placePiece((a1.ChessPiece) knight29, "");
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = null;
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard33, color34);
        java.lang.String str36 = pawn35.toString();
        boolean boolean38 = chessBoard32.placePiece((a1.ChessPiece) pawn35, "");
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.Knight knight48 = new a1.Knight(chessBoard32, color45);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Pawn pawn64 = new a1.Pawn(chessBoard52, color62);
        a1.Pawn pawn65 = new a1.Pawn(chessBoard49, color62);
        a1.Pawn pawn66 = new a1.Pawn(chessBoard32, color62);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard15, color62);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard0, color62);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Knight knight73 = new a1.Knight(chessBoard69, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard69, color75);
        a1.ChessPiece.Color color78 = null;
        a1.Bishop bishop79 = new a1.Bishop(chessBoard69, color78);
        java.lang.String str80 = bishop79.getPosition();
        java.lang.String str81 = bishop79.toString();
        java.util.ArrayList<java.lang.String> strList82 = bishop79.legalMoves();
        boolean boolean84 = chessBoard0.placePiece((a1.ChessPiece) bishop79, "\u265d");
        a1.ChessBoard chessBoard85 = null;
        a1.ChessBoard chessBoard86 = new a1.ChessBoard();
        a1.ChessBoard chessBoard87 = new a1.ChessBoard();
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook89 = new a1.Rook(chessBoard87, color88);
        a1.Knight knight90 = new a1.Knight(chessBoard86, color88);
        a1.ChessBoard chessBoard91 = new a1.ChessBoard();
        a1.ChessPiece.Color color92 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook93 = new a1.Rook(chessBoard91, color92);
        a1.Knight knight94 = new a1.Knight(chessBoard86, color92);
        a1.Knight knight95 = new a1.Knight(chessBoard85, color92);
        a1.Pawn pawn96 = new a1.Pawn(chessBoard0, color92);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265f" + "'", str36, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265d" + "'", str81, "\u265d");
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color88.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color92 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color92.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = null;
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard40, color41);
        java.lang.String str43 = pawn42.toString();
        boolean boolean45 = chessBoard39.placePiece((a1.ChessPiece) pawn42, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.Knight knight55 = new a1.Knight(chessBoard39, color52);
        a1.Rook rook56 = new a1.Rook(chessBoard30, color52);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard0, color52);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Pawn pawn73 = new a1.Pawn(chessBoard61, color71);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard58, color71);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = null;
        a1.ChessPiece.Color color77 = null;
        a1.Pawn pawn78 = new a1.Pawn(chessBoard76, color77);
        java.lang.String str79 = pawn78.toString();
        boolean boolean81 = chessBoard75.placePiece((a1.ChessPiece) pawn78, "");
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Knight knight86 = new a1.Knight(chessBoard82, color84);
        a1.ChessBoard chessBoard87 = new a1.ChessBoard();
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook89 = new a1.Rook(chessBoard87, color88);
        a1.Bishop bishop90 = new a1.Bishop(chessBoard82, color88);
        a1.ChessBoard chessBoard91 = new a1.ChessBoard();
        a1.ChessPiece.Color color92 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook93 = new a1.Rook(chessBoard91, color92);
        a1.Pawn pawn94 = new a1.Pawn(chessBoard82, color92);
        a1.Bishop bishop95 = new a1.Bishop(chessBoard75, color92);
        java.util.ArrayList<java.lang.String> strList96 = bishop95.legalMoves();
        a1.ChessPiece.Color color97 = bishop95.getColor();
        a1.Knight knight98 = new a1.Knight(chessBoard58, color97);
        a1.King king99 = new a1.King(chessBoard0, color97);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265f" + "'", str43, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265f" + "'", str79, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color88.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color92 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color92.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertTrue("'" + color97 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color97.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException11);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            illegalMoveException4.addSuppressed(throwable15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        chessBoard0.initialize();
        a1.ChessPiece.Color color60 = null;
        a1.Bishop bishop61 = new a1.Bishop(chessBoard0, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        java.lang.String str65 = rook64.toString();
        java.lang.String str66 = rook64.getPosition();
        java.util.ArrayList<java.lang.String> strList67 = rook64.legalMoves();
        java.util.ArrayList<java.lang.String> strList68 = rook64.legalMoves();
        boolean boolean70 = chessBoard0.placePiece((a1.ChessPiece) rook64, "\u265c");
        a1.ChessBoard chessBoard71 = null;
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Knight knight79 = new a1.Knight(chessBoard75, color77);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Bishop bishop83 = new a1.Bishop(chessBoard75, color81);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard75, color85);
        a1.Pawn pawn88 = new a1.Pawn(chessBoard72, color85);
        a1.Knight knight89 = new a1.Knight(chessBoard71, color85);
        a1.Knight knight90 = new a1.Knight(chessBoard0, color85);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265c" + "'", str65, "\u265c");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        java.lang.Throwable[] throwableArray11 = illegalMoveException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = illegalMoveException10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException10.getSuppressed();
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException18);
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException20);
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalMoveException20);
        java.lang.Throwable throwable25 = null;
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", throwable25);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException26);
        illegalMoveException20.addSuppressed((java.lang.Throwable) illegalMoveException26);
        a1.IllegalPositionException illegalPositionException29 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException26);
        java.lang.Throwable[] throwableArray30 = illegalPositionException29.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        chessBoard0.initialize();
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece64 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = null;
        a1.ChessPiece.Color color48 = null;
        a1.Pawn pawn49 = new a1.Pawn(chessBoard47, color48);
        java.lang.String str50 = pawn49.toString();
        boolean boolean52 = chessBoard46.placePiece((a1.ChessPiece) pawn49, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard53, color59);
        a1.Knight knight62 = new a1.Knight(chessBoard46, color59);
        a1.Knight knight63 = new a1.Knight(chessBoard45, color59);
        a1.ChessPiece.Color color64 = knight63.getColor();
        a1.Pawn pawn65 = new a1.Pawn(chessBoard0, color64);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("", "\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265f" + "'", str50, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable[] throwableArray7 = illegalPositionException6.getSuppressed();
        java.lang.Class<?> wildcardClass8 = throwableArray7.getClass();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable[] throwableArray11 = illegalMoveException8.getSuppressed();
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalPositionException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalPositionException12);
        java.lang.Throwable[] throwableArray15 = illegalPositionException12.getSuppressed();
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException12);
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265a", throwable21);
        java.lang.Throwable[] throwableArray24 = illegalMoveException23.getSuppressed();
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException23);
        illegalMoveException16.addSuppressed((java.lang.Throwable) illegalMoveException23);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece4 = chessBoard0.getPiece("a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.lang.String str7 = pawn2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException13.getSuppressed();
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        illegalMoveException13.addSuppressed((java.lang.Throwable) illegalMoveException23);
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException10);
        java.lang.Throwable throwable29 = null;
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("hi!", throwable29);
        java.lang.Throwable[] throwableArray31 = illegalMoveException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = illegalMoveException30.getSuppressed();
        java.lang.Throwable throwable37 = null;
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("hi!", throwable37);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException38);
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException38);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException30.getSuppressed();
        java.lang.Throwable throwable48 = null;
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("hi!", throwable48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException49);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException50);
        a1.IllegalPositionException illegalPositionException52 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException50);
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException50);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException53);
        illegalPositionException27.addSuppressed((java.lang.Throwable) illegalMoveException53);
        java.lang.Throwable throwable58 = null;
        a1.IllegalMoveException illegalMoveException59 = new a1.IllegalMoveException("hi!", throwable58);
        a1.IllegalPositionException illegalPositionException60 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException59);
        java.lang.Throwable throwable64 = null;
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("hi!", throwable64);
        a1.IllegalPositionException illegalPositionException66 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException65);
        a1.IllegalMoveException illegalMoveException67 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException66);
        illegalMoveException59.addSuppressed((java.lang.Throwable) illegalPositionException66);
        java.lang.Throwable throwable71 = null;
        a1.IllegalMoveException illegalMoveException72 = new a1.IllegalMoveException("hi!", throwable71);
        java.lang.Throwable[] throwableArray73 = illegalMoveException72.getSuppressed();
        java.lang.Throwable throwable75 = null;
        a1.IllegalMoveException illegalMoveException76 = new a1.IllegalMoveException("hi!", throwable75);
        java.lang.Throwable[] throwableArray77 = illegalMoveException76.getSuppressed();
        illegalMoveException72.addSuppressed((java.lang.Throwable) illegalMoveException76);
        a1.IllegalMoveException illegalMoveException79 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException72);
        illegalPositionException66.addSuppressed((java.lang.Throwable) illegalMoveException72);
        illegalMoveException53.addSuppressed((java.lang.Throwable) illegalPositionException66);
        a1.IllegalMoveException illegalMoveException82 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException66);
        a1.IllegalMoveException illegalMoveException83 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException82);
        java.lang.Throwable[] throwableArray84 = illegalMoveException83.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.lang.String str9 = bishop8.toString();
        java.util.ArrayList<java.lang.String> strList10 = bishop8.legalMoves();
        java.lang.String str11 = bishop8.toString();
        java.lang.String str12 = bishop8.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265d" + "'", str9, "\u265d");
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265d" + "'", str11, "\u265d");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = null;
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        java.lang.String str32 = pawn31.toString();
        java.lang.String str33 = pawn31.toString();
        boolean boolean35 = chessBoard22.placePiece((a1.ChessPiece) pawn31, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        boolean boolean41 = chessBoard36.placePiece((a1.ChessPiece) rook39, "\u265f");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard36.placePiece((a1.ChessPiece) knight50, "");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard60, color70);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard53, color70);
        a1.King king74 = new a1.King(chessBoard36, color70);
        a1.King king75 = new a1.King(chessBoard22, color70);
        a1.Knight knight76 = new a1.Knight(chessBoard0, color70);
        chessBoard0.initialize();
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece80 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265f" + "'", str33, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Rook rook69 = new a1.Rook(chessBoard57, color66);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard54, color66);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color66);
        java.lang.String str72 = rook71.toString();
        java.lang.String str73 = rook71.toString();
        java.lang.String str74 = rook71.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265c" + "'", str72, "\u265c");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265c" + "'", str73, "\u265c");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265c" + "'", str74, "\u265c");
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard30 = null;
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        boolean boolean36 = chessBoard31.placePiece((a1.ChessPiece) rook34, "\u265f");
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard37, color43);
        boolean boolean47 = chessBoard31.placePiece((a1.ChessPiece) knight45, "");
        a1.ChessPiece.Color color48 = knight45.getColor();
        a1.Knight knight49 = new a1.Knight(chessBoard30, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard0, color48);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.getPosition();
        java.lang.String str12 = bishop10.toString();
        java.lang.String str13 = bishop10.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265d" + "'", str13, "\u265d");
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        a1.ChessBoard chessBoard53 = null;
        a1.ChessPiece.Color color54 = null;
        a1.Pawn pawn55 = new a1.Pawn(chessBoard53, color54);
        java.util.ArrayList<java.lang.String> strList56 = pawn55.legalMoves();
        a1.ChessPiece.Color color57 = pawn55.getColor();
        boolean boolean59 = chessBoard0.placePiece((a1.ChessPiece) pawn55, "a1.IllegalPositionException: a1.IllegalPositionException: ");
        java.lang.String str60 = pawn55.toString();
        java.lang.String str61 = pawn55.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNull(color57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265f" + "'", str60, "\u265f");
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        java.lang.String str46 = pawn44.toString();
        boolean boolean48 = chessBoard35.placePiece((a1.ChessPiece) pawn44, "\u265f");
        chessBoard35.initialize();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = null;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard53, color59);
        a1.King king62 = new a1.King(chessBoard50, color59);
        a1.ChessBoard chessBoard63 = null;
        a1.ChessPiece.Color color64 = null;
        a1.Pawn pawn65 = new a1.Pawn(chessBoard63, color64);
        java.util.ArrayList<java.lang.String> strList66 = pawn65.legalMoves();
        boolean boolean68 = chessBoard50.placePiece((a1.ChessPiece) pawn65, "\u265e");
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Knight knight73 = new a1.Knight(chessBoard69, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard69, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Pawn pawn81 = new a1.Pawn(chessBoard69, color79);
        java.lang.String str82 = pawn81.getPosition();
        a1.ChessPiece.Color color83 = pawn81.getColor();
        a1.Pawn pawn84 = new a1.Pawn(chessBoard50, color83);
        a1.Rook rook85 = new a1.Rook(chessBoard35, color83);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard0, color83);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u265f" + "'", str46, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessBoard chessBoard6 = null;
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        java.lang.String str9 = pawn8.toString();
        boolean boolean11 = chessBoard5.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Knight knight16 = new a1.Knight(chessBoard12, color14);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.King king29 = new a1.King(chessBoard17, color26);
        a1.ChessBoard chessBoard30 = null;
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard30, color31);
        java.util.ArrayList<java.lang.String> strList33 = pawn32.legalMoves();
        boolean boolean35 = chessBoard17.placePiece((a1.ChessPiece) pawn32, "\u265e");
        chessBoard17.initialize();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard40, color50);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard37, color50);
        a1.Pawn pawn54 = new a1.Pawn(chessBoard17, color50);
        a1.Knight knight55 = new a1.Knight(chessBoard12, color50);
        a1.Rook rook56 = new a1.Rook(chessBoard5, color50);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        boolean boolean62 = chessBoard57.placePiece((a1.ChessPiece) rook60, "\u265f");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard63, color69);
        boolean boolean73 = chessBoard57.placePiece((a1.ChessPiece) knight71, "");
        a1.ChessPiece.Color color74 = knight71.getColor();
        a1.King king75 = new a1.King(chessBoard5, color74);
        a1.King king76 = new a1.King(chessBoard0, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = null;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Knight knight84 = new a1.Knight(chessBoard80, color82);
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard80, color86);
        a1.King king89 = new a1.King(chessBoard77, color86);
        a1.ChessPiece.Color color90 = king89.getColor();
        a1.Bishop bishop91 = new a1.Bishop(chessBoard0, color90);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Knight knight38 = new a1.Knight(chessBoard22, color35);
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight40 = new a1.Knight(chessBoard22, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = null;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.Rook rook61 = new a1.Rook(chessBoard49, color58);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.Rook rook74 = new a1.Rook(chessBoard62, color71);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard49, color71);
        a1.Rook rook76 = new a1.Rook(chessBoard44, color71);
        a1.Rook rook77 = new a1.Rook(chessBoard41, color71);
        java.util.ArrayList<java.lang.String> strList78 = rook77.legalMoves();
        a1.ChessPiece.Color color79 = rook77.getColor();
        a1.Pawn pawn80 = new a1.Pawn(chessBoard22, color79);
        a1.King king81 = new a1.King(chessBoard0, color79);
        java.lang.String str82 = king81.toString();
        java.util.ArrayList<java.lang.String> strList83 = king81.legalMoves();
        a1.ChessPiece.Color color84 = king81.getColor();
        java.lang.String str85 = king81.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u265a" + "'", str82, "\u265a");
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265a" + "'", str85, "\u265a");
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray10 = illegalMoveException7.getSuppressed();
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalPositionException11);
        java.lang.String str14 = illegalMoveException13.toString();
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "a1.IllegalMoveException: a1.IllegalPositionException: a1.IllegalPositionException: " + "'", str14, "a1.IllegalMoveException: a1.IllegalPositionException: a1.IllegalPositionException: ");
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard48, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = null;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Rook rook65 = new a1.Rook(chessBoard53, color62);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = null;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Knight knight73 = new a1.Knight(chessBoard69, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard69, color75);
        a1.Rook rook78 = new a1.Rook(chessBoard66, color75);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard53, color75);
        a1.Rook rook80 = new a1.Rook(chessBoard48, color75);
        a1.Rook rook81 = new a1.Rook(chessBoard45, color75);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color75);
        java.lang.String str83 = rook82.toString();
        java.util.ArrayList<java.lang.String> strList84 = rook82.legalMoves();
        java.lang.String str85 = rook82.toString();
        java.lang.String str86 = rook82.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265c" + "'", str85, "\u265c");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u265c" + "'", str86, "\u265c");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable[] throwableArray7 = illegalPositionException6.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException12);
        illegalPositionException6.addSuppressed((java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable throwable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            illegalPositionException6.addSuppressed(throwable16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Bishop bishop39 = new a1.Bishop(chessBoard31, color37);
        a1.King king40 = new a1.King(chessBoard28, color37);
        a1.ChessBoard chessBoard41 = null;
        a1.ChessPiece.Color color42 = null;
        a1.Pawn pawn43 = new a1.Pawn(chessBoard41, color42);
        java.util.ArrayList<java.lang.String> strList44 = pawn43.legalMoves();
        boolean boolean46 = chessBoard28.placePiece((a1.ChessPiece) pawn43, "\u265e");
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Pawn pawn59 = new a1.Pawn(chessBoard47, color57);
        java.lang.String str60 = pawn59.getPosition();
        a1.ChessPiece.Color color61 = pawn59.getColor();
        a1.Pawn pawn62 = new a1.Pawn(chessBoard28, color61);
        a1.King king63 = new a1.King(chessBoard0, color61);
        java.util.ArrayList<java.lang.String> strList64 = king63.legalMoves();
        java.lang.String str65 = king63.toString();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265a" + "'", str65, "\u265a");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.lang.String str15 = pawn9.toString();
        a1.ChessPiece.Color color16 = pawn9.getColor();
        java.lang.String str17 = pawn9.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265f" + "'", str15, "\u265f");
        org.junit.Assert.assertNull(color16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        java.lang.String str35 = pawn34.getPosition();
        java.lang.String str36 = pawn34.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265f" + "'", str36, "\u265f");
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.util.ArrayList<java.lang.String> strList18 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList21 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = king12.legalMoves();
        java.lang.Class<?> wildcardClass23 = king12.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException9);
        java.lang.Throwable throwable28 = null;
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("hi!", throwable28);
        java.lang.Throwable[] throwableArray30 = illegalMoveException29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = illegalMoveException29.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException29.getSuppressed();
        java.lang.Throwable throwable36 = null;
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("hi!", throwable36);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException37);
        a1.IllegalMoveException illegalMoveException39 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException37);
        illegalMoveException29.addSuppressed((java.lang.Throwable) illegalMoveException39);
        java.lang.Throwable[] throwableArray41 = illegalMoveException29.getSuppressed();
        java.lang.Throwable throwable47 = null;
        a1.IllegalMoveException illegalMoveException48 = new a1.IllegalMoveException("hi!", throwable47);
        a1.IllegalPositionException illegalPositionException49 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException48);
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException49);
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException49);
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException49);
        illegalMoveException29.addSuppressed((java.lang.Throwable) illegalMoveException52);
        illegalPositionException26.addSuppressed((java.lang.Throwable) illegalMoveException52);
        java.lang.Throwable throwable57 = null;
        a1.IllegalMoveException illegalMoveException58 = new a1.IllegalMoveException("hi!", throwable57);
        a1.IllegalPositionException illegalPositionException59 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException58);
        java.lang.Throwable throwable63 = null;
        a1.IllegalMoveException illegalMoveException64 = new a1.IllegalMoveException("hi!", throwable63);
        a1.IllegalPositionException illegalPositionException65 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException64);
        a1.IllegalMoveException illegalMoveException66 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException65);
        illegalMoveException58.addSuppressed((java.lang.Throwable) illegalPositionException65);
        java.lang.Throwable throwable70 = null;
        a1.IllegalMoveException illegalMoveException71 = new a1.IllegalMoveException("hi!", throwable70);
        java.lang.Throwable[] throwableArray72 = illegalMoveException71.getSuppressed();
        java.lang.Throwable throwable74 = null;
        a1.IllegalMoveException illegalMoveException75 = new a1.IllegalMoveException("hi!", throwable74);
        java.lang.Throwable[] throwableArray76 = illegalMoveException75.getSuppressed();
        illegalMoveException71.addSuppressed((java.lang.Throwable) illegalMoveException75);
        a1.IllegalMoveException illegalMoveException78 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException71);
        illegalPositionException65.addSuppressed((java.lang.Throwable) illegalMoveException71);
        illegalMoveException52.addSuppressed((java.lang.Throwable) illegalPositionException65);
        java.lang.Throwable[] throwableArray81 = illegalMoveException52.getSuppressed();
        a1.IllegalPositionException illegalPositionException82 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException52);
        java.lang.Throwable throwable83 = null;
        // The following exception was thrown during execution in test generation
        try {
            illegalPositionException82.addSuppressed(throwable83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray81);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList9 = bishop8.legalMoves();
        java.lang.String str10 = bishop8.toString();
        java.util.ArrayList<java.lang.String> strList11 = bishop8.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = bishop8.legalMoves();
        a1.ChessPiece.Color color13 = bishop8.getColor();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265d" + "'", str10, "\u265d");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.lang.String str18 = king12.toString();
        java.lang.String str19 = king12.toString();
        java.lang.String str20 = king12.toString();
        java.util.ArrayList<java.lang.String> strList21 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265a" + "'", str18, "\u265a");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265a" + "'", str19, "\u265a");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265a" + "'", str20, "\u265a");
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.lang.String str15 = pawn9.toString();
        java.util.ArrayList<java.lang.String> strList16 = pawn9.legalMoves();
        java.lang.String str17 = pawn9.toString();
        java.util.ArrayList<java.lang.String> strList18 = pawn9.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265f" + "'", str15, "\u265f");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard18, color24);
        a1.King king27 = new a1.King(chessBoard15, color24);
        a1.ChessBoard chessBoard28 = null;
        a1.ChessPiece.Color color29 = null;
        a1.Pawn pawn30 = new a1.Pawn(chessBoard28, color29);
        java.util.ArrayList<java.lang.String> strList31 = pawn30.legalMoves();
        boolean boolean33 = chessBoard15.placePiece((a1.ChessPiece) pawn30, "\u265e");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Bishop bishop42 = new a1.Bishop(chessBoard34, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Pawn pawn46 = new a1.Pawn(chessBoard34, color44);
        java.lang.String str47 = pawn46.getPosition();
        a1.ChessPiece.Color color48 = pawn46.getColor();
        a1.Pawn pawn49 = new a1.Pawn(chessBoard15, color48);
        a1.Rook rook50 = new a1.Rook(chessBoard0, color48);
        java.lang.String str51 = rook50.toString();
        java.util.ArrayList<java.lang.String> strList52 = rook50.legalMoves();
        java.util.ArrayList<java.lang.String> strList53 = rook50.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265c" + "'", str51, "\u265c");
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList53);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: ", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.lang.String str38 = pawn37.toString();
        boolean boolean40 = chessBoard34.placePiece((a1.ChessPiece) pawn37, "");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard41, color51);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard34, color51);
        java.util.ArrayList<java.lang.String> strList55 = bishop54.legalMoves();
        a1.ChessPiece.Color color56 = bishop54.getColor();
        a1.Knight knight57 = new a1.Knight(chessBoard17, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard0, color56);
        java.lang.String str59 = knight58.toString();
        java.lang.Class<?> wildcardClass60 = knight58.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265e" + "'", str59, "\u265e");
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        // The following exception was thrown during execution in test generation
        try {
            king53.setPosition("a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Rook rook69 = new a1.Rook(chessBoard57, color66);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard54, color66);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color66);
        java.lang.String str72 = rook71.toString();
        a1.ChessPiece.Color color73 = rook71.getColor();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265c" + "'", str72, "\u265c");
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException16);
        java.lang.Class<?> wildcardClass18 = illegalPositionException16.getClass();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.Rook rook29 = new a1.Rook(chessBoard17, color26);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = null;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard33, color39);
        a1.Rook rook42 = new a1.Rook(chessBoard30, color39);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard17, color39);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = null;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.King king61 = new a1.King(chessBoard49, color58);
        a1.ChessBoard chessBoard62 = null;
        a1.ChessPiece.Color color63 = null;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard62, color63);
        java.util.ArrayList<java.lang.String> strList65 = pawn64.legalMoves();
        boolean boolean67 = chessBoard49.placePiece((a1.ChessPiece) pawn64, "\u265e");
        chessBoard49.initialize();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard72, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Pawn pawn84 = new a1.Pawn(chessBoard72, color82);
        a1.Pawn pawn85 = new a1.Pawn(chessBoard69, color82);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard49, color82);
        a1.Knight knight87 = new a1.Knight(chessBoard44, color82);
        a1.Rook rook88 = new a1.Rook(chessBoard17, color82);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard0, color82);
        java.util.ArrayList<java.lang.String> strList90 = bishop89.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList90);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard48, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = null;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Rook rook65 = new a1.Rook(chessBoard53, color62);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = null;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Knight knight73 = new a1.Knight(chessBoard69, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard69, color75);
        a1.Rook rook78 = new a1.Rook(chessBoard66, color75);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard53, color75);
        a1.Rook rook80 = new a1.Rook(chessBoard48, color75);
        a1.Rook rook81 = new a1.Rook(chessBoard45, color75);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color75);
        java.util.ArrayList<java.lang.String> strList83 = rook82.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList83);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        java.lang.String str44 = knight43.getPosition();
        java.lang.String str45 = knight43.toString();
        java.util.ArrayList<java.lang.String> strList46 = knight43.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265e" + "'", str45, "\u265e");
        org.junit.Assert.assertNotNull(strList46);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.util.ArrayList<java.lang.String> strList15 = pawn9.legalMoves();
        java.lang.String str16 = pawn9.getPosition();
        java.lang.String str17 = pawn9.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        chessBoard35.initialize();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        java.util.ArrayList<java.lang.String> strList42 = rook41.legalMoves();
        java.util.ArrayList<java.lang.String> strList43 = rook41.legalMoves();
        boolean boolean45 = chessBoard35.placePiece((a1.ChessPiece) rook41, "\u265e");
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) rook41, "a1.IllegalMoveException: ");
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = null;
        a1.ChessPiece.Color color50 = null;
        a1.Pawn pawn51 = new a1.Pawn(chessBoard49, color50);
        java.lang.String str52 = pawn51.toString();
        boolean boolean54 = chessBoard48.placePiece((a1.ChessPiece) pawn51, "");
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        java.lang.String str59 = pawn57.toString();
        boolean boolean61 = chessBoard48.placePiece((a1.ChessPiece) pawn57, "\u265f");
        chessBoard48.initialize();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Knight knight70 = new a1.Knight(chessBoard66, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard66, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Pawn pawn78 = new a1.Pawn(chessBoard66, color76);
        a1.Pawn pawn79 = new a1.Pawn(chessBoard63, color76);
        a1.ChessPiece.Color color80 = pawn79.getColor();
        a1.Bishop bishop81 = new a1.Bishop(chessBoard48, color80);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color80);
        java.lang.String str83 = rook82.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u265f" + "'", str52, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265f" + "'", str59, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265c" + "'", str83, "\u265c");
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable[] throwableArray8 = illegalPositionException7.getSuppressed();
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException7);
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException15);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException15);
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException15);
        illegalPositionException9.addSuppressed((java.lang.Throwable) illegalMoveException18);
        java.lang.Throwable throwable24 = null;
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("hi!", throwable24);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException25);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException26);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException27);
        illegalMoveException18.addSuppressed((java.lang.Throwable) illegalMoveException27);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        java.lang.String str7 = rook3.toString();
        java.lang.String str8 = rook3.toString();
        a1.ChessPiece.Color color9 = rook3.getColor();
        java.lang.String str10 = rook3.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException14);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException14);
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        java.lang.Throwable[] throwableArray23 = illegalMoveException22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = illegalMoveException22.getSuppressed();
        java.lang.Throwable[] throwableArray25 = illegalMoveException22.getSuppressed();
        java.lang.Throwable throwable29 = null;
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("hi!", throwable29);
        a1.IllegalPositionException illegalPositionException31 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException30);
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException30);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalMoveException32);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException32);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException32);
        illegalMoveException14.addSuppressed((java.lang.Throwable) illegalMoveException32);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.lang.String str4 = rook2.getPosition();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.getPosition();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        a1.IllegalPositionException illegalPositionException29 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException28);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalMoveException28);
        a1.IllegalPositionException illegalPositionException31 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException28);
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException28);
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException32);
        java.lang.Throwable throwable39 = null;
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("hi!", throwable39);
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("\u265a", throwable39);
        java.lang.Throwable[] throwableArray42 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = illegalMoveException41.getSuppressed();
        java.lang.Throwable throwable47 = null;
        a1.IllegalMoveException illegalMoveException48 = new a1.IllegalMoveException("hi!", throwable47);
        java.lang.Throwable[] throwableArray49 = illegalMoveException48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = illegalMoveException48.getSuppressed();
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException48);
        java.lang.Throwable[] throwableArray52 = illegalPositionException51.getSuppressed();
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException51);
        illegalMoveException41.addSuppressed((java.lang.Throwable) illegalPositionException51);
        a1.IllegalPositionException illegalPositionException55 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException41);
        a1.IllegalMoveException illegalMoveException56 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException55);
        a1.IllegalPositionException illegalPositionException57 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalPositionException55);
        illegalMoveException32.addSuppressed((java.lang.Throwable) illegalPositionException57);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        java.lang.String str17 = pawn16.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        java.util.ArrayList<java.lang.String> strList59 = pawn58.legalMoves();
        java.util.ArrayList<java.lang.String> strList60 = pawn58.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            pawn58.setPosition("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(strList60);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        java.lang.String str52 = rook51.toString();
        java.lang.String str53 = rook51.toString();
        java.lang.String str54 = rook51.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u265c" + "'", str52, "\u265c");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265c" + "'", str53, "\u265c");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265c" + "'", str54, "\u265c");
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        java.lang.String str24 = pawn20.getPosition();
        boolean boolean26 = chessBoard0.placePiece((a1.ChessPiece) pawn20, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard27 = null;
        a1.ChessPiece.Color color28 = null;
        a1.Pawn pawn29 = new a1.Pawn(chessBoard27, color28);
        java.lang.String str30 = pawn29.toString();
        java.util.ArrayList<java.lang.String> strList31 = pawn29.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = pawn29.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = pawn29.legalMoves();
        java.lang.String str34 = pawn29.toString();
        java.util.ArrayList<java.lang.String> strList35 = pawn29.legalMoves();
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn29, "\u265d");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.util.ArrayList<java.lang.String> strList42 = pawn41.legalMoves();
        java.util.ArrayList<java.lang.String> strList43 = pawn41.legalMoves();
        boolean boolean45 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "\u265d");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.King king63 = new a1.King(chessBoard51, color60);
        a1.ChessBoard chessBoard64 = null;
        a1.ChessPiece.Color color65 = null;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard64, color65);
        java.util.ArrayList<java.lang.String> strList67 = pawn66.legalMoves();
        boolean boolean69 = chessBoard51.placePiece((a1.ChessPiece) pawn66, "\u265e");
        chessBoard51.initialize();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard74, color84);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard71, color84);
        a1.Pawn pawn88 = new a1.Pawn(chessBoard51, color84);
        a1.Knight knight89 = new a1.Knight(chessBoard46, color84);
        a1.King king90 = new a1.King(chessBoard38, color84);
        a1.Bishop bishop91 = new a1.Bishop(chessBoard0, color84);
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u265f" + "'", str30, "\u265f");
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265f" + "'", str34, "\u265f");
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList9 = knight8.legalMoves();
        java.lang.String str10 = knight8.getPosition();
        java.util.ArrayList<java.lang.String> strList11 = knight8.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = knight8.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = knight8.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            knight8.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        boolean boolean33 = chessBoard28.placePiece((a1.ChessPiece) rook31, "\u265f");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard34, color40);
        boolean boolean44 = chessBoard28.placePiece((a1.ChessPiece) knight42, "");
        chessBoard28.initialize();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = null;
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.Knight knight66 = new a1.Knight(chessBoard50, color63);
        a1.Knight knight67 = new a1.Knight(chessBoard49, color63);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard46, color63);
        a1.King king69 = new a1.King(chessBoard28, color63);
        a1.Knight knight70 = new a1.Knight(chessBoard0, color63);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece72 = chessBoard0.getPiece("a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.lang.String str7 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList8 = pawn2.legalMoves();
        java.lang.String str9 = pawn2.toString();
        java.lang.String str10 = pawn2.toString();
        java.lang.Class<?> wildcardClass11 = pawn2.getClass();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece chessPiece19 = null;
        boolean boolean21 = chessBoard0.placePiece(chessPiece19, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.King king34 = new a1.King(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = null;
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        java.util.ArrayList<java.lang.String> strList38 = pawn37.legalMoves();
        boolean boolean40 = chessBoard22.placePiece((a1.ChessPiece) pawn37, "\u265e");
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard22, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = null;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Knight knight68 = new a1.Knight(chessBoard64, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard64, color70);
        a1.Rook rook73 = new a1.Rook(chessBoard61, color70);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard48, color70);
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn76 = new a1.Pawn(chessBoard48, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard43, color75);
        java.util.ArrayList<java.lang.String> strList78 = bishop77.legalMoves();
        java.lang.String str79 = bishop77.toString();
        a1.ChessPiece.Color color80 = bishop77.getColor();
        a1.Pawn pawn81 = new a1.Pawn(chessBoard22, color80);
        a1.Rook rook82 = new a1.Rook(chessBoard0, color80);
        // The following exception was thrown during execution in test generation
        try {
            rook82.setPosition("a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265d" + "'", str79, "\u265d");
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.lang.String str15 = rook14.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard48 = null;
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard48, color62);
        a1.King king67 = new a1.King(chessBoard0, color62);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        boolean boolean73 = chessBoard68.placePiece((a1.ChessPiece) rook71, "\u265f");
        java.util.ArrayList<java.lang.String> strList74 = rook71.legalMoves();
        java.lang.String str75 = rook71.toString();
        java.lang.String str76 = rook71.toString();
        a1.ChessPiece.Color color77 = rook71.getColor();
        a1.Pawn pawn78 = new a1.Pawn(chessBoard0, color77);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: hi!", "\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u265c" + "'", str75, "\u265c");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265c" + "'", str76, "\u265c");
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        java.lang.String str58 = knight57.toString();
        java.lang.String str59 = knight57.toString();
        java.lang.String str60 = knight57.toString();
        java.lang.String str61 = knight57.toString();
        boolean boolean63 = chessBoard0.placePiece((a1.ChessPiece) knight57, "\u265c");
        java.lang.String str64 = knight57.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265e" + "'", str58, "\u265e");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265e" + "'", str59, "\u265e");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265e" + "'", str60, "\u265e");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265e" + "'", str64, "\u265e");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.getPosition();
        java.lang.String str12 = bishop10.toString();
        java.util.ArrayList<java.lang.String> strList13 = bishop10.legalMoves();
        java.lang.String str14 = bishop10.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265d" + "'", str12, "\u265d");
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265d" + "'", str14, "\u265d");
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard74, color84);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard0, color84);
        chessBoard0.initialize();
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.WHITE;
        a1.Bishop bishop90 = new a1.Bishop(chessBoard0, color89);
        java.lang.String str91 = bishop90.toString();
        a1.ChessPiece.Color color92 = bishop90.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.WHITE + "'", color89.equals(a1.ChessPiece.Color.WHITE));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u2657" + "'", str91, "\u2657");
        org.junit.Assert.assertTrue("'" + color92 + "' != '" + a1.ChessPiece.Color.WHITE + "'", color92.equals(a1.ChessPiece.Color.WHITE));
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = null;
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = null;
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        java.lang.String str22 = pawn21.toString();
        boolean boolean24 = chessBoard18.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.Knight knight34 = new a1.Knight(chessBoard18, color31);
        a1.Knight knight35 = new a1.Knight(chessBoard17, color31);
        java.util.ArrayList<java.lang.String> strList36 = knight35.legalMoves();
        java.lang.String str37 = knight35.toString();
        java.lang.String str38 = knight35.getPosition();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1.IllegalPositionException: a1.IllegalPositionException: ");
        java.lang.String str41 = knight35.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265e" + "'", str37, "\u265e");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265e" + "'", str41, "\u265e");
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessBoard chessBoard20 = null;
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        java.lang.String str23 = pawn22.toString();
        java.lang.String str24 = pawn22.toString();
        boolean boolean26 = chessBoard13.placePiece((a1.ChessPiece) pawn22, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        boolean boolean32 = chessBoard27.placePiece((a1.ChessPiece) rook30, "\u265f");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard33, color39);
        boolean boolean43 = chessBoard27.placePiece((a1.ChessPiece) knight41, "");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.lang.String str48 = pawn47.toString();
        boolean boolean50 = chessBoard44.placePiece((a1.ChessPiece) pawn47, "");
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Pawn pawn63 = new a1.Pawn(chessBoard51, color61);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard44, color61);
        a1.King king65 = new a1.King(chessBoard27, color61);
        a1.King king66 = new a1.King(chessBoard13, color61);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = null;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Knight knight74 = new a1.Knight(chessBoard70, color72);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Bishop bishop78 = new a1.Bishop(chessBoard70, color76);
        a1.King king79 = new a1.King(chessBoard67, color76);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard13, color76);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard0, color76);
        a1.ChessPiece.Color color82 = null;
        a1.Knight knight83 = new a1.Knight(chessBoard0, color82);
        chessBoard0.initialize();
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265f" + "'", str23, "\u265f");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265f" + "'", str24, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265f" + "'", str48, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = bishop20.legalMoves();
        java.lang.String str23 = bishop20.getPosition();
        java.lang.String str24 = bishop20.toString();
        java.lang.String str25 = bishop20.getPosition();
        java.lang.String str26 = bishop20.toString();
        java.lang.String str27 = bishop20.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265d" + "'", str24, "\u265d");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265d" + "'", str26, "\u265d");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265d" + "'", str27, "\u265d");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessBoard chessBoard6 = null;
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        java.lang.String str9 = pawn8.toString();
        boolean boolean11 = chessBoard5.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Knight knight16 = new a1.Knight(chessBoard12, color14);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.King king29 = new a1.King(chessBoard17, color26);
        a1.ChessBoard chessBoard30 = null;
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard30, color31);
        java.util.ArrayList<java.lang.String> strList33 = pawn32.legalMoves();
        boolean boolean35 = chessBoard17.placePiece((a1.ChessPiece) pawn32, "\u265e");
        chessBoard17.initialize();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard40, color50);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard37, color50);
        a1.Pawn pawn54 = new a1.Pawn(chessBoard17, color50);
        a1.Knight knight55 = new a1.Knight(chessBoard12, color50);
        a1.Rook rook56 = new a1.Rook(chessBoard5, color50);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        boolean boolean62 = chessBoard57.placePiece((a1.ChessPiece) rook60, "\u265f");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard63, color69);
        boolean boolean73 = chessBoard57.placePiece((a1.ChessPiece) knight71, "");
        a1.ChessPiece.Color color74 = knight71.getColor();
        a1.King king75 = new a1.King(chessBoard5, color74);
        a1.King king76 = new a1.King(chessBoard0, color74);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "a1.IllegalMoveException: a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException11);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException3.getSuppressed();
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Knight knight38 = new a1.Knight(chessBoard22, color35);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = null;
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard40, color41);
        java.lang.String str43 = pawn42.toString();
        boolean boolean45 = chessBoard39.placePiece((a1.ChessPiece) pawn42, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Pawn pawn58 = new a1.Pawn(chessBoard46, color56);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard39, color56);
        a1.King king60 = new a1.King(chessBoard22, color56);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard0, color56);
        java.lang.String str62 = bishop61.toString();
        java.util.ArrayList<java.lang.String> strList63 = bishop61.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265f" + "'", str43, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265d" + "'", str62, "\u265d");
        org.junit.Assert.assertNotNull(strList63);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        java.lang.String str41 = rook40.toString();
        java.util.ArrayList<java.lang.String> strList42 = rook40.legalMoves();
        java.lang.String str43 = rook40.toString();
        java.lang.String str44 = rook40.toString();
        a1.ChessPiece.Color color45 = rook40.getColor();
        a1.Bishop bishop46 = new a1.Bishop(chessBoard35, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard0, color45);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265c" + "'", str41, "\u265c");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265c" + "'", str43, "\u265c");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265c" + "'", str44, "\u265c");
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException11);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException13);
        java.lang.Throwable[] throwableArray16 = illegalMoveException13.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        java.lang.String str58 = knight57.toString();
        java.lang.String str59 = knight57.toString();
        java.lang.String str60 = knight57.toString();
        java.lang.String str61 = knight57.toString();
        boolean boolean63 = chessBoard0.placePiece((a1.ChessPiece) knight57, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265e" + "'", str58, "\u265e");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265e" + "'", str59, "\u265e");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265e" + "'", str60, "\u265e");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.util.ArrayList<java.lang.String> strList18 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList21 = king12.legalMoves();
        java.lang.String str22 = king12.toString();
        java.util.ArrayList<java.lang.String> strList23 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265a" + "'", str22, "\u265a");
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        java.util.ArrayList<java.lang.String> strList19 = pawn15.legalMoves();
        java.lang.String str20 = pawn15.getPosition();
        java.lang.String str21 = pawn15.getPosition();
        java.lang.String str22 = pawn15.getPosition();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException21);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable27 = null;
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", throwable27);
        java.lang.Throwable[] throwableArray29 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = illegalMoveException28.getSuppressed();
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException36);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException38);
        java.lang.Throwable[] throwableArray40 = illegalMoveException28.getSuppressed();
        java.lang.Throwable throwable46 = null;
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("hi!", throwable46);
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException47);
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException48);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException48);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException51);
        illegalPositionException25.addSuppressed((java.lang.Throwable) illegalMoveException51);
        java.lang.Throwable throwable56 = null;
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("hi!", throwable56);
        a1.IllegalPositionException illegalPositionException58 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException57);
        java.lang.Throwable throwable62 = null;
        a1.IllegalMoveException illegalMoveException63 = new a1.IllegalMoveException("hi!", throwable62);
        a1.IllegalPositionException illegalPositionException64 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException63);
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException64);
        illegalMoveException57.addSuppressed((java.lang.Throwable) illegalPositionException64);
        java.lang.Throwable throwable69 = null;
        a1.IllegalMoveException illegalMoveException70 = new a1.IllegalMoveException("hi!", throwable69);
        java.lang.Throwable[] throwableArray71 = illegalMoveException70.getSuppressed();
        java.lang.Throwable throwable73 = null;
        a1.IllegalMoveException illegalMoveException74 = new a1.IllegalMoveException("hi!", throwable73);
        java.lang.Throwable[] throwableArray75 = illegalMoveException74.getSuppressed();
        illegalMoveException70.addSuppressed((java.lang.Throwable) illegalMoveException74);
        a1.IllegalMoveException illegalMoveException77 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException70);
        illegalPositionException64.addSuppressed((java.lang.Throwable) illegalMoveException70);
        illegalMoveException51.addSuppressed((java.lang.Throwable) illegalPositionException64);
        java.lang.Throwable[] throwableArray80 = illegalMoveException51.getSuppressed();
        java.lang.String str81 = illegalMoveException51.toString();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265a" + "'", str81, "\u265a");
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException7);
        java.lang.String str11 = illegalPositionException7.toString();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "a1.IllegalPositionException: hi!" + "'", str11, "a1.IllegalPositionException: hi!");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.lang.String str14 = king12.toString();
        java.util.ArrayList<java.lang.String> strList15 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265a" + "'", str14, "\u265a");
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        java.lang.String str22 = bishop20.toString();
        java.util.ArrayList<java.lang.String> strList23 = bishop20.legalMoves();
        java.lang.String str24 = bishop20.toString();
        java.lang.String str25 = bishop20.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265d" + "'", str22, "\u265d");
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265d" + "'", str24, "\u265d");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u265d" + "'", str25, "\u265d");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Bishop bishop21 = new a1.Bishop(chessBoard13, color19);
        a1.Knight knight22 = new a1.Knight(chessBoard6, color19);
        a1.Knight knight23 = new a1.Knight(chessBoard0, color19);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        boolean boolean20 = chessBoard15.placePiece((a1.ChessPiece) rook18, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard21, color27);
        boolean boolean31 = chessBoard15.placePiece((a1.ChessPiece) knight29, "");
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = null;
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard33, color34);
        java.lang.String str36 = pawn35.toString();
        boolean boolean38 = chessBoard32.placePiece((a1.ChessPiece) pawn35, "");
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.Knight knight48 = new a1.Knight(chessBoard32, color45);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Pawn pawn64 = new a1.Pawn(chessBoard52, color62);
        a1.Pawn pawn65 = new a1.Pawn(chessBoard49, color62);
        a1.Pawn pawn66 = new a1.Pawn(chessBoard32, color62);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard15, color62);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard0, color62);
        a1.ChessPiece.Color color69 = null;
        a1.Bishop bishop70 = new a1.Bishop(chessBoard0, color69);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessBoard chessBoard72 = null;
        a1.ChessPiece.Color color73 = null;
        a1.Pawn pawn74 = new a1.Pawn(chessBoard72, color73);
        java.lang.String str75 = pawn74.toString();
        boolean boolean77 = chessBoard71.placePiece((a1.ChessPiece) pawn74, "");
        a1.ChessBoard chessBoard78 = null;
        a1.ChessPiece.Color color79 = null;
        a1.Pawn pawn80 = new a1.Pawn(chessBoard78, color79);
        java.lang.String str81 = pawn80.toString();
        java.lang.String str82 = pawn80.toString();
        boolean boolean84 = chessBoard71.placePiece((a1.ChessPiece) pawn80, "\u265f");
        java.util.ArrayList<java.lang.String> strList85 = pawn80.legalMoves();
        java.lang.String str86 = pawn80.toString();
        java.lang.String str87 = pawn80.getPosition();
        boolean boolean89 = chessBoard0.placePiece((a1.ChessPiece) pawn80, "\u265d");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265f" + "'", str36, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u265f" + "'", str75, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265f" + "'", str81, "\u265f");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u265f" + "'", str82, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u265f" + "'", str86, "\u265f");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList35 = pawn34.legalMoves();
        java.util.ArrayList<java.lang.String> strList36 = pawn34.legalMoves();
        java.util.ArrayList<java.lang.String> strList37 = pawn34.legalMoves();
        java.lang.String str38 = pawn34.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265f" + "'", str38, "\u265f");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        boolean boolean33 = chessBoard28.placePiece((a1.ChessPiece) rook31, "\u265f");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard34, color40);
        boolean boolean44 = chessBoard28.placePiece((a1.ChessPiece) knight42, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = null;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard48, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Bishop bishop56 = new a1.Bishop(chessBoard48, color54);
        a1.Rook rook57 = new a1.Rook(chessBoard45, color54);
        a1.King king58 = new a1.King(chessBoard28, color54);
        a1.King king59 = new a1.King(chessBoard0, color54);
        java.lang.String str60 = king59.toString();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u265a" + "'", str60, "\u265a");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException9);
        java.lang.Throwable[] throwableArray11 = illegalMoveException9.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Knight knight81 = new a1.Knight(chessBoard73, color79);
        a1.Knight knight82 = new a1.Knight(chessBoard0, color79);
        java.lang.String str83 = knight82.toString();
        java.lang.String str84 = knight82.toString();
        java.lang.String str85 = knight82.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u265e" + "'", str83, "\u265e");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265e" + "'", str84, "\u265e");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265e" + "'", str85, "\u265e");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Bishop bishop21 = new a1.Bishop(chessBoard13, color19);
        a1.Knight knight22 = new a1.Knight(chessBoard6, color19);
        a1.Knight knight23 = new a1.Knight(chessBoard0, color19);
        a1.ChessPiece.Color color24 = knight23.getColor();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece22 = chessBoard0.getPiece("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Bishop bishop39 = new a1.Bishop(chessBoard31, color37);
        a1.King king40 = new a1.King(chessBoard28, color37);
        a1.ChessBoard chessBoard41 = null;
        a1.ChessPiece.Color color42 = null;
        a1.Pawn pawn43 = new a1.Pawn(chessBoard41, color42);
        java.util.ArrayList<java.lang.String> strList44 = pawn43.legalMoves();
        boolean boolean46 = chessBoard28.placePiece((a1.ChessPiece) pawn43, "\u265e");
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Knight knight51 = new a1.Knight(chessBoard47, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Bishop bishop55 = new a1.Bishop(chessBoard47, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Pawn pawn59 = new a1.Pawn(chessBoard47, color57);
        java.lang.String str60 = pawn59.getPosition();
        a1.ChessPiece.Color color61 = pawn59.getColor();
        a1.Pawn pawn62 = new a1.Pawn(chessBoard28, color61);
        a1.King king63 = new a1.King(chessBoard0, color61);
        java.lang.String str64 = king63.toString();
        java.lang.String str65 = king63.toString();
        java.lang.String str66 = king63.toString();
        // The following exception was thrown during execution in test generation
        try {
            king63.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265a" + "'", str64, "\u265a");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265a" + "'", str65, "\u265a");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u265a" + "'", str66, "\u265a");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.lang.Throwable throwable1 = null;
        a1.IllegalPositionException illegalPositionException2 = new a1.IllegalPositionException("\u265c", throwable1);
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = illegalMoveException8.getSuppressed();
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable[] throwableArray12 = illegalPositionException11.getSuppressed();
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalPositionException illegalPositionException14 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException13);
        illegalPositionException2.addSuppressed((java.lang.Throwable) illegalPositionException14);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.King king33 = new a1.King(chessBoard21, color30);
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.util.ArrayList<java.lang.String> strList37 = pawn36.legalMoves();
        boolean boolean39 = chessBoard21.placePiece((a1.ChessPiece) pawn36, "\u265e");
        chessBoard21.initialize();
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard21, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = null;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.Rook rook55 = new a1.Rook(chessBoard43, color52);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = null;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Knight knight63 = new a1.Knight(chessBoard59, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard59, color65);
        a1.Rook rook68 = new a1.Rook(chessBoard56, color65);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard43, color65);
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn71 = new a1.Pawn(chessBoard43, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard21, color70);
        a1.King king73 = new a1.King(chessBoard0, color70);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece75 = chessBoard0.getPiece("a1.IllegalMoveException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.ChessBoard chessBoard23 = null;
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        boolean boolean30 = chessBoard24.placePiece((a1.ChessPiece) pawn27, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Bishop bishop39 = new a1.Bishop(chessBoard31, color37);
        a1.Knight knight40 = new a1.Knight(chessBoard24, color37);
        a1.Knight knight41 = new a1.Knight(chessBoard23, color37);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard20, color37);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard0, color37);
        a1.ChessPiece.Color color44 = bishop43.getColor();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.King king44 = new a1.King(chessBoard32, color41);
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.util.ArrayList<java.lang.String> strList48 = pawn47.legalMoves();
        boolean boolean50 = chessBoard32.placePiece((a1.ChessPiece) pawn47, "\u265e");
        chessBoard32.initialize();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard52, color65);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard32, color65);
        a1.Knight knight70 = new a1.Knight(chessBoard27, color65);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color65);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = null;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Knight knight80 = new a1.Knight(chessBoard76, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard76, color82);
        a1.King king85 = new a1.King(chessBoard73, color82);
        a1.ChessPiece.Color color86 = king85.getColor();
        a1.Knight knight87 = new a1.Knight(chessBoard0, color86);
        java.util.ArrayList<java.lang.String> strList88 = knight87.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList88);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece38 = chessBoard0.getPiece("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = null;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        java.lang.String str74 = rook73.toString();
        java.lang.String str75 = rook73.getPosition();
        java.util.ArrayList<java.lang.String> strList76 = rook73.legalMoves();
        java.util.ArrayList<java.lang.String> strList77 = rook73.legalMoves();
        java.util.ArrayList<java.lang.String> strList78 = rook73.legalMoves();
        java.lang.String str79 = rook73.toString();
        boolean boolean81 = chessBoard0.placePiece((a1.ChessPiece) rook73, "\u265c");
        java.lang.String str82 = rook73.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265c" + "'", str74, "\u265c");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265c" + "'", str79, "\u265c");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u265c" + "'", str82, "\u265c");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = null;
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard2, color3);
        java.lang.String str5 = pawn4.toString();
        boolean boolean7 = chessBoard1.placePiece((a1.ChessPiece) pawn4, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Knight knight17 = new a1.Knight(chessBoard1, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard1, color20);
        a1.Rook rook24 = new a1.Rook(chessBoard0, color20);
        java.util.ArrayList<java.lang.String> strList25 = rook24.legalMoves();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        java.lang.String str35 = bishop34.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265d" + "'", str35, "\u265d");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        java.lang.String str17 = knight16.toString();
        java.util.ArrayList<java.lang.String> strList18 = knight16.legalMoves();
        java.lang.String str19 = knight16.toString();
        java.lang.String str20 = knight16.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265e" + "'", str17, "\u265e");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265e" + "'", str19, "\u265e");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265e" + "'", str20, "\u265e");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        a1.ChessPiece.Color color9 = pawn3.getColor();
        java.lang.String str10 = pawn3.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(color9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = null;
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = null;
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        java.lang.String str8 = pawn7.toString();
        boolean boolean10 = chessBoard4.placePiece((a1.ChessPiece) pawn7, "");
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Knight knight20 = new a1.Knight(chessBoard4, color17);
        a1.Knight knight21 = new a1.Knight(chessBoard3, color17);
        a1.Pawn pawn22 = new a1.Pawn(chessBoard0, color17);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color25);
        // The following exception was thrown during execution in test generation
        try {
            bishop26.setPosition("a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        a1.ChessPiece.Color color17 = king12.getColor();
        java.lang.Class<?> wildcardClass18 = color17.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        java.lang.String str65 = rook64.toString();
        java.lang.String str66 = rook64.getPosition();
        java.util.ArrayList<java.lang.String> strList67 = rook64.legalMoves();
        boolean boolean69 = chessBoard0.placePiece((a1.ChessPiece) rook64, "\u265a");
        java.lang.String str70 = rook64.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265c" + "'", str65, "\u265c");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265c" + "'", str70, "\u265c");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        chessBoard19.initialize();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        boolean boolean62 = chessBoard57.placePiece((a1.ChessPiece) rook60, "\u265f");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard63, color69);
        boolean boolean73 = chessBoard57.placePiece((a1.ChessPiece) knight71, "");
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = null;
        a1.ChessPiece.Color color76 = null;
        a1.Pawn pawn77 = new a1.Pawn(chessBoard75, color76);
        java.lang.String str78 = pawn77.toString();
        boolean boolean80 = chessBoard74.placePiece((a1.ChessPiece) pawn77, "");
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Knight knight85 = new a1.Knight(chessBoard81, color83);
        a1.ChessBoard chessBoard86 = new a1.ChessBoard();
        a1.ChessPiece.Color color87 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook88 = new a1.Rook(chessBoard86, color87);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard81, color87);
        a1.ChessBoard chessBoard90 = new a1.ChessBoard();
        a1.ChessPiece.Color color91 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook92 = new a1.Rook(chessBoard90, color91);
        a1.Pawn pawn93 = new a1.Pawn(chessBoard81, color91);
        a1.Bishop bishop94 = new a1.Bishop(chessBoard74, color91);
        a1.King king95 = new a1.King(chessBoard57, color91);
        a1.Knight knight96 = new a1.Knight(chessBoard19, color91);
        a1.Bishop bishop97 = new a1.Bishop(chessBoard0, color91);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece99 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265f" + "'", str78, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color91 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color91.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.King king47 = new a1.King(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = null;
        a1.ChessPiece.Color color49 = null;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard48, color49);
        java.util.ArrayList<java.lang.String> strList51 = pawn50.legalMoves();
        boolean boolean53 = chessBoard35.placePiece((a1.ChessPiece) pawn50, "\u265e");
        chessBoard35.initialize();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard58, color68);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard55, color68);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard35, color68);
        a1.Knight knight73 = new a1.Knight(chessBoard30, color68);
        java.lang.String str74 = knight73.getPosition();
        java.util.ArrayList<java.lang.String> strList75 = knight73.legalMoves();
        a1.ChessPiece.Color color76 = knight73.getColor();
        a1.Pawn pawn77 = new a1.Pawn(chessBoard0, color76);
        java.lang.String str78 = pawn77.toString();
        java.lang.String str79 = pawn77.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265f" + "'", str78, "\u265f");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265f" + "'", str79, "\u265f");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.Rook rook31 = new a1.Rook(chessBoard19, color28);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.Rook rook44 = new a1.Rook(chessBoard32, color41);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard19, color41);
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard19, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard14, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard0, color46);
        java.lang.String str50 = knight49.getPosition();
        java.lang.String str51 = knight49.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265e" + "'", str51, "\u265e");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException11);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException23);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException23);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException23);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException26);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException3);
        java.lang.Throwable throwable33 = null;
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("hi!", throwable33);
        a1.IllegalPositionException illegalPositionException35 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException34);
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException34);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException34);
        java.lang.Throwable throwable41 = null;
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("hi!", throwable41);
        a1.IllegalMoveException illegalMoveException43 = new a1.IllegalMoveException("\u265a", throwable41);
        java.lang.Throwable[] throwableArray44 = illegalMoveException43.getSuppressed();
        a1.IllegalPositionException illegalPositionException45 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException43);
        illegalMoveException34.addSuppressed((java.lang.Throwable) illegalMoveException43);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException34);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = null;
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Bishop bishop21 = new a1.Bishop(chessBoard13, color19);
        a1.Rook rook22 = new a1.Rook(chessBoard10, color19);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = null;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard26, color32);
        a1.Rook rook35 = new a1.Rook(chessBoard23, color32);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard10, color32);
        a1.King king37 = new a1.King(chessBoard9, color32);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = null;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.Rook rook54 = new a1.Rook(chessBoard42, color51);
        a1.Pawn pawn55 = new a1.Pawn(chessBoard39, color51);
        a1.ChessPiece.Color color56 = pawn55.getColor();
        a1.King king57 = new a1.King(chessBoard0, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Pawn pawn73 = new a1.Pawn(chessBoard61, color71);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard58, color71);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessBoard chessBoard76 = null;
        a1.ChessPiece.Color color77 = null;
        a1.Pawn pawn78 = new a1.Pawn(chessBoard76, color77);
        java.lang.String str79 = pawn78.toString();
        boolean boolean81 = chessBoard75.placePiece((a1.ChessPiece) pawn78, "");
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Knight knight86 = new a1.Knight(chessBoard82, color84);
        a1.ChessBoard chessBoard87 = new a1.ChessBoard();
        a1.ChessPiece.Color color88 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook89 = new a1.Rook(chessBoard87, color88);
        a1.Bishop bishop90 = new a1.Bishop(chessBoard82, color88);
        a1.ChessBoard chessBoard91 = new a1.ChessBoard();
        a1.ChessPiece.Color color92 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook93 = new a1.Rook(chessBoard91, color92);
        a1.Pawn pawn94 = new a1.Pawn(chessBoard82, color92);
        a1.Bishop bishop95 = new a1.Bishop(chessBoard75, color92);
        java.util.ArrayList<java.lang.String> strList96 = bishop95.legalMoves();
        a1.ChessPiece.Color color97 = bishop95.getColor();
        a1.Knight knight98 = new a1.Knight(chessBoard58, color97);
        a1.Knight knight99 = new a1.Knight(chessBoard0, color97);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u265f" + "'", str79, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color88 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color88.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color92 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color92.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertTrue("'" + color97 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color97.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard35, color57);
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard35, color62);
        a1.Rook rook64 = new a1.Rook(chessBoard0, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = null;
        a1.ChessPiece.Color color67 = null;
        a1.Pawn pawn68 = new a1.Pawn(chessBoard66, color67);
        java.lang.String str69 = pawn68.toString();
        boolean boolean71 = chessBoard65.placePiece((a1.ChessPiece) pawn68, "");
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard72, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Pawn pawn84 = new a1.Pawn(chessBoard72, color82);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard65, color82);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard0, color82);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265f" + "'", str69, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Bishop bishop9 = new a1.Bishop(chessBoard1, color7);
        a1.ChessPiece.Color color10 = bishop9.getColor();
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        java.lang.String str35 = pawn34.toString();
        java.lang.String str36 = pawn34.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265f" + "'", str36, "\u265f");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        boolean boolean14 = chessBoard9.placePiece((a1.ChessPiece) rook12, "\u265f");
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = null;
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        java.lang.String str19 = pawn18.toString();
        boolean boolean21 = chessBoard15.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.Knight knight31 = new a1.Knight(chessBoard15, color28);
        a1.Knight knight32 = new a1.Knight(chessBoard9, color28);
        a1.King king33 = new a1.King(chessBoard8, color28);
        java.lang.String str34 = king33.toString();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) king33, "\u265a");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color11 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color11.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265f" + "'", str19, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u265a" + "'", str34, "\u265a");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Bishop bishop52 = new a1.Bishop(chessBoard44, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Pawn pawn56 = new a1.Pawn(chessBoard44, color54);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard41, color54);
        a1.ChessPiece.Color color58 = pawn57.getColor();
        a1.Rook rook59 = new a1.Rook(chessBoard0, color58);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = null;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Knight knight68 = new a1.Knight(chessBoard64, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard64, color70);
        a1.Rook rook73 = new a1.Rook(chessBoard61, color70);
        a1.King king74 = new a1.King(chessBoard0, color70);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = null;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Knight knight82 = new a1.Knight(chessBoard78, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard78, color84);
        a1.King king87 = new a1.King(chessBoard75, color84);
        java.util.ArrayList<java.lang.String> strList88 = king87.legalMoves();
        java.util.ArrayList<java.lang.String> strList89 = king87.legalMoves();
        java.lang.String str90 = king87.toString();
        java.util.ArrayList<java.lang.String> strList91 = king87.legalMoves();
        java.lang.String str92 = king87.toString();
        java.util.ArrayList<java.lang.String> strList93 = king87.legalMoves();
        java.lang.String str94 = king87.toString();
        java.lang.String str95 = king87.getPosition();
        java.lang.String str96 = king87.toString();
        boolean boolean98 = chessBoard0.placePiece((a1.ChessPiece) king87, "");
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u265a" + "'", str90, "\u265a");
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "\u265a" + "'", str92, "\u265a");
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\u265a" + "'", str94, "\u265a");
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "\u265a" + "'", str96, "\u265a");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        java.lang.Class<?> wildcardClass48 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        java.lang.String str54 = king53.toString();
        java.util.ArrayList<java.lang.String> strList55 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList56 = king53.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            king53.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = pawn3.legalMoves();
        java.lang.Class<?> wildcardClass11 = strList10.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = illegalMoveException5.getSuppressed();
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265a", throwable12);
        java.lang.Throwable[] throwableArray15 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException14.getSuppressed();
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        java.lang.Throwable[] throwableArray22 = illegalMoveException21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = illegalMoveException21.getSuppressed();
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable[] throwableArray25 = illegalPositionException24.getSuppressed();
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException24);
        illegalMoveException14.addSuppressed((java.lang.Throwable) illegalPositionException24);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalPositionException24);
        java.lang.Throwable throwable36 = null;
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("hi!", throwable36);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException37);
        a1.IllegalMoveException illegalMoveException39 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException37);
        a1.IllegalPositionException illegalPositionException40 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException37);
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException40);
        a1.IllegalPositionException illegalPositionException42 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException41);
        a1.IllegalPositionException illegalPositionException43 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalPositionException42);
        java.lang.Throwable throwable47 = null;
        a1.IllegalMoveException illegalMoveException48 = new a1.IllegalMoveException("hi!", throwable47);
        a1.IllegalPositionException illegalPositionException49 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException48);
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException48);
        java.lang.Throwable[] throwableArray51 = illegalMoveException50.getSuppressed();
        illegalPositionException42.addSuppressed((java.lang.Throwable) illegalMoveException50);
        illegalPositionException24.addSuppressed((java.lang.Throwable) illegalPositionException42);
        a1.IllegalMoveException illegalMoveException54 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException24);
        a1.IllegalPositionException illegalPositionException55 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException54);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray51);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        java.lang.Throwable[] throwableArray11 = illegalMoveException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = illegalMoveException10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException10.getSuppressed();
        java.lang.Throwable throwable17 = null;
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("hi!", throwable17);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException18);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException18);
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException20);
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalMoveException20);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException20);
        java.lang.Throwable[] throwableArray24 = illegalMoveException20.getSuppressed();
        java.lang.Throwable throwable30 = null;
        a1.IllegalMoveException illegalMoveException31 = new a1.IllegalMoveException("hi!", throwable30);
        a1.IllegalPositionException illegalPositionException32 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException31);
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException32);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException32);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException32);
        illegalMoveException20.addSuppressed((java.lang.Throwable) illegalMoveException35);
        java.lang.Throwable throwable39 = null;
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("hi!", throwable39);
        java.lang.Throwable[] throwableArray41 = illegalMoveException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = illegalMoveException40.getSuppressed();
        java.lang.Throwable[] throwableArray43 = illegalMoveException40.getSuppressed();
        a1.IllegalMoveException illegalMoveException44 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException40);
        illegalMoveException35.addSuppressed((java.lang.Throwable) illegalMoveException44);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.lang.String str7 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList8 = pawn2.legalMoves();
        java.lang.String str9 = pawn2.toString();
        java.lang.String str10 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList11 = pawn2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard52, color58);
        a1.Pawn pawn61 = new a1.Pawn(chessBoard0, color58);
        java.util.ArrayList<java.lang.String> strList62 = pawn61.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList62);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException24);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException25);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException25);
        java.lang.Throwable[] throwableArray28 = illegalMoveException25.getSuppressed();
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException25);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard18, color20);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard18, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Pawn pawn30 = new a1.Pawn(chessBoard18, color28);
        a1.Pawn pawn31 = new a1.Pawn(chessBoard15, color28);
        a1.ChessPiece.Color color32 = pawn31.getColor();
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard34 = null;
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        a1.Knight knight44 = new a1.Knight(chessBoard34, color41);
        java.lang.String str45 = knight44.toString();
        java.util.ArrayList<java.lang.String> strList46 = knight44.legalMoves();
        java.lang.String str47 = knight44.toString();
        java.lang.String str48 = knight44.toString();
        a1.ChessPiece.Color color49 = knight44.getColor();
        a1.Rook rook50 = new a1.Rook(chessBoard0, color49);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265e" + "'", str45, "\u265e");
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u265e" + "'", str47, "\u265e");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265e" + "'", str48, "\u265e");
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        java.util.ArrayList<java.lang.String> strList35 = bishop34.legalMoves();
        java.lang.String str36 = bishop34.toString();
        java.lang.String str37 = bishop34.toString();
        java.lang.String str38 = bishop34.getPosition();
        java.lang.String str39 = bishop34.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265d" + "'", str37, "\u265d");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265d" + "'", str39, "\u265d");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.King king44 = new a1.King(chessBoard32, color41);
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.util.ArrayList<java.lang.String> strList48 = pawn47.legalMoves();
        boolean boolean50 = chessBoard32.placePiece((a1.ChessPiece) pawn47, "\u265e");
        chessBoard32.initialize();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard52, color65);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard32, color65);
        a1.Knight knight70 = new a1.Knight(chessBoard27, color65);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color65);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        java.lang.String str77 = knight76.toString();
        boolean boolean79 = chessBoard0.placePiece((a1.ChessPiece) knight76, "\u265d");
        java.lang.String str80 = knight76.toString();
        java.lang.String str81 = knight76.getPosition();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265e" + "'", str77, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u265e" + "'", str80, "\u265e");
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265a", throwable5);
        java.lang.Throwable[] throwableArray8 = illegalMoveException7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = illegalMoveException7.getSuppressed();
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException14.getSuppressed();
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException14);
        java.lang.Throwable[] throwableArray18 = illegalPositionException17.getSuppressed();
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException17);
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalPositionException17);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException21);
        java.lang.Throwable throwable29 = null;
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("hi!", throwable29);
        a1.IllegalPositionException illegalPositionException31 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException30);
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException30);
        java.lang.Throwable[] throwableArray33 = illegalMoveException30.getSuppressed();
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException30);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException34);
        illegalPositionException21.addSuppressed((java.lang.Throwable) illegalMoveException35);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str21 = bishop20.toString();
        java.lang.String str22 = bishop20.getPosition();
        a1.ChessPiece.Color color23 = bishop20.getColor();
        java.lang.Class<?> wildcardClass24 = color23.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265d" + "'", str21, "\u265d");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            pawn20.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        a1.ChessPiece.Color color6 = rook2.getColor();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertNull(color6);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard4, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Bishop bishop12 = new a1.Bishop(chessBoard4, color10);
        a1.King king13 = new a1.King(chessBoard1, color10);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Bishop bishop25 = new a1.Bishop(chessBoard17, color23);
        a1.King king26 = new a1.King(chessBoard14, color23);
        a1.ChessBoard chessBoard27 = null;
        a1.ChessPiece.Color color28 = null;
        a1.Pawn pawn29 = new a1.Pawn(chessBoard27, color28);
        java.util.ArrayList<java.lang.String> strList30 = pawn29.legalMoves();
        boolean boolean32 = chessBoard14.placePiece((a1.ChessPiece) pawn29, "\u265e");
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard14, color33);
        a1.Rook rook35 = new a1.Rook(chessBoard1, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = null;
        a1.ChessPiece.Color color38 = null;
        a1.Pawn pawn39 = new a1.Pawn(chessBoard37, color38);
        java.lang.String str40 = pawn39.toString();
        boolean boolean42 = chessBoard36.placePiece((a1.ChessPiece) pawn39, "");
        java.lang.String str43 = pawn39.getPosition();
        java.util.ArrayList<java.lang.String> strList44 = pawn39.legalMoves();
        java.lang.String str45 = pawn39.toString();
        java.lang.String str46 = pawn39.toString();
        boolean boolean48 = chessBoard1.placePiece((a1.ChessPiece) pawn39, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard49 = null;
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.Knight knight66 = new a1.Knight(chessBoard50, color63);
        a1.Knight knight67 = new a1.Knight(chessBoard49, color63);
        a1.King king68 = new a1.King(chessBoard1, color63);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        boolean boolean74 = chessBoard69.placePiece((a1.ChessPiece) rook72, "\u265f");
        java.util.ArrayList<java.lang.String> strList75 = rook72.legalMoves();
        java.lang.String str76 = rook72.toString();
        java.lang.String str77 = rook72.toString();
        a1.ChessPiece.Color color78 = rook72.getColor();
        a1.Pawn pawn79 = new a1.Pawn(chessBoard1, color78);
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Knight knight84 = new a1.Knight(chessBoard80, color82);
        a1.Knight knight85 = new a1.Knight(chessBoard1, color82);
        a1.King king86 = new a1.King(chessBoard0, color82);
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u265f" + "'", str40, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u265f" + "'", str46, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265c" + "'", str76, "\u265c");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265c" + "'", str77, "\u265c");
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException11);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException11);
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException20);
        java.lang.Throwable throwable24 = null;
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("hi!", throwable24);
        java.lang.Throwable[] throwableArray26 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = illegalMoveException25.getSuppressed();
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException33);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException33);
        illegalMoveException25.addSuppressed((java.lang.Throwable) illegalMoveException35);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalMoveException35);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException22);
        java.lang.Throwable throwable41 = null;
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("hi!", throwable41);
        java.lang.Throwable[] throwableArray43 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray45 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable49 = null;
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("hi!", throwable49);
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException50);
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException50);
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalMoveException52);
        java.lang.Throwable[] throwableArray54 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable60 = null;
        a1.IllegalMoveException illegalMoveException61 = new a1.IllegalMoveException("hi!", throwable60);
        a1.IllegalPositionException illegalPositionException62 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException61);
        a1.IllegalMoveException illegalMoveException63 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException62);
        a1.IllegalPositionException illegalPositionException64 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException62);
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException62);
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalMoveException65);
        illegalPositionException39.addSuppressed((java.lang.Throwable) illegalMoveException65);
        illegalPositionException11.addSuppressed((java.lang.Throwable) illegalMoveException65);
        a1.IllegalPositionException illegalPositionException69 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException65);
        java.lang.Throwable[] throwableArray70 = illegalPositionException69.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray70);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard11, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard11.placePiece((a1.ChessPiece) knight30, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard33, color39);
        boolean boolean43 = chessBoard11.placePiece((a1.ChessPiece) knight41, "\u265e");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.lang.String str48 = pawn47.toString();
        boolean boolean50 = chessBoard44.placePiece((a1.ChessPiece) pawn47, "");
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Knight knight60 = new a1.Knight(chessBoard44, color57);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = null;
        a1.ChessPiece.Color color63 = null;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard62, color63);
        java.lang.String str65 = pawn64.toString();
        boolean boolean67 = chessBoard61.placePiece((a1.ChessPiece) pawn64, "");
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Knight knight72 = new a1.Knight(chessBoard68, color70);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Bishop bishop76 = new a1.Bishop(chessBoard68, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Pawn pawn80 = new a1.Pawn(chessBoard68, color78);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard61, color78);
        a1.King king82 = new a1.King(chessBoard44, color78);
        a1.Rook rook83 = new a1.Rook(chessBoard11, color78);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Knight knight88 = new a1.Knight(chessBoard84, color86);
        a1.ChessBoard chessBoard89 = new a1.ChessBoard();
        a1.ChessPiece.Color color90 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook91 = new a1.Rook(chessBoard89, color90);
        a1.Knight knight92 = new a1.Knight(chessBoard84, color90);
        a1.Knight knight93 = new a1.Knight(chessBoard11, color90);
        a1.Rook rook94 = new a1.Rook(chessBoard0, color90);
        java.util.ArrayList<java.lang.String> strList95 = rook94.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265f" + "'", str48, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265f" + "'", str65, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList95);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        a1.Knight knight13 = new a1.Knight(chessBoard9, color11);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Bishop bishop17 = new a1.Bishop(chessBoard9, color15);
        a1.King king18 = new a1.King(chessBoard6, color15);
        a1.ChessBoard chessBoard19 = null;
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        java.util.ArrayList<java.lang.String> strList22 = pawn21.legalMoves();
        boolean boolean24 = chessBoard6.placePiece((a1.ChessPiece) pawn21, "\u265e");
        chessBoard6.initialize();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard29, color39);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard26, color39);
        a1.Pawn pawn43 = new a1.Pawn(chessBoard6, color39);
        a1.Knight knight44 = new a1.Knight(chessBoard1, color39);
        chessBoard1.initialize();
        a1.ChessBoard chessBoard46 = null;
        a1.ChessBoard chessBoard47 = null;
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = null;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Knight knight68 = new a1.Knight(chessBoard64, color66);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard64, color70);
        a1.Rook rook73 = new a1.Rook(chessBoard61, color70);
        a1.Bishop bishop74 = new a1.Bishop(chessBoard48, color70);
        a1.King king75 = new a1.King(chessBoard47, color70);
        a1.Bishop bishop76 = new a1.Bishop(chessBoard46, color70);
        a1.Rook rook77 = new a1.Rook(chessBoard1, color70);
        a1.ChessBoard chessBoard78 = null;
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Knight knight87 = new a1.Knight(chessBoard79, color85);
        a1.Knight knight88 = new a1.Knight(chessBoard78, color85);
        java.util.ArrayList<java.lang.String> strList89 = knight88.legalMoves();
        a1.ChessPiece.Color color90 = knight88.getColor();
        a1.Rook rook91 = new a1.Rook(chessBoard1, color90);
        a1.King king92 = new a1.King(chessBoard0, color90);
        java.lang.String str93 = king92.toString();
        java.lang.String str94 = king92.getPosition();
        java.util.ArrayList<java.lang.String> strList95 = king92.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color11 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color11.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\u265a" + "'", str93, "\u265a");
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(strList95);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard4, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Bishop bishop12 = new a1.Bishop(chessBoard4, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard4, color14);
        a1.Pawn pawn17 = new a1.Pawn(chessBoard1, color14);
        a1.Knight knight18 = new a1.Knight(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList19 = knight18.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = knight18.legalMoves();
        java.util.ArrayList<java.lang.String> strList21 = knight18.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook5 = new a1.Rook(chessBoard3, color4);
        boolean boolean7 = chessBoard2.placePiece((a1.ChessPiece) rook5, "\u265f");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = null;
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        java.lang.String str12 = pawn11.toString();
        boolean boolean14 = chessBoard8.placePiece((a1.ChessPiece) pawn11, "");
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.Knight knight24 = new a1.Knight(chessBoard8, color21);
        a1.Knight knight25 = new a1.Knight(chessBoard2, color21);
        a1.King king26 = new a1.King(chessBoard1, color21);
        a1.ChessPiece.Color color27 = null;
        a1.Bishop bishop28 = new a1.Bishop(chessBoard1, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = null;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Knight knight36 = new a1.Knight(chessBoard32, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Bishop bishop40 = new a1.Bishop(chessBoard32, color38);
        a1.King king41 = new a1.King(chessBoard29, color38);
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.util.ArrayList<java.lang.String> strList45 = pawn44.legalMoves();
        boolean boolean47 = chessBoard29.placePiece((a1.ChessPiece) pawn44, "\u265e");
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard48, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Bishop bishop56 = new a1.Bishop(chessBoard48, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Pawn pawn60 = new a1.Pawn(chessBoard48, color58);
        java.lang.String str61 = pawn60.getPosition();
        a1.ChessPiece.Color color62 = pawn60.getColor();
        a1.Pawn pawn63 = new a1.Pawn(chessBoard29, color62);
        a1.King king64 = new a1.King(chessBoard1, color62);
        a1.ChessPiece.Color color65 = king64.getColor();
        a1.Pawn pawn66 = new a1.Pawn(chessBoard0, color65);
        java.util.ArrayList<java.lang.String> strList67 = pawn66.legalMoves();
        org.junit.Assert.assertTrue("'" + color4 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color4.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265f" + "'", str12, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList67);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard20, color29);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard31, color37);
        boolean boolean41 = chessBoard20.placePiece((a1.ChessPiece) knight39, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Knight knight46 = new a1.Knight(chessBoard42, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard42, color48);
        boolean boolean52 = chessBoard20.placePiece((a1.ChessPiece) knight50, "\u265e");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Pawn pawn56 = new a1.Pawn(chessBoard54, color55);
        java.lang.String str57 = pawn56.toString();
        boolean boolean59 = chessBoard53.placePiece((a1.ChessPiece) pawn56, "");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Knight knight69 = new a1.Knight(chessBoard53, color66);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessBoard chessBoard71 = null;
        a1.ChessPiece.Color color72 = null;
        a1.Pawn pawn73 = new a1.Pawn(chessBoard71, color72);
        java.lang.String str74 = pawn73.toString();
        boolean boolean76 = chessBoard70.placePiece((a1.ChessPiece) pawn73, "");
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Knight knight81 = new a1.Knight(chessBoard77, color79);
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard77, color83);
        a1.ChessBoard chessBoard86 = new a1.ChessBoard();
        a1.ChessPiece.Color color87 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook88 = new a1.Rook(chessBoard86, color87);
        a1.Pawn pawn89 = new a1.Pawn(chessBoard77, color87);
        a1.Bishop bishop90 = new a1.Bishop(chessBoard70, color87);
        a1.King king91 = new a1.King(chessBoard53, color87);
        a1.Rook rook92 = new a1.Rook(chessBoard20, color87);
        a1.King king93 = new a1.King(chessBoard0, color87);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: a1.IllegalPositionException: ", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265f" + "'", str57, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265f" + "'", str74, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.lang.Throwable throwable2 = null;
        a1.IllegalPositionException illegalPositionException3 = new a1.IllegalPositionException("\u265c", throwable2);
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("a1.IllegalPositionException: hi!", (java.lang.Throwable) illegalPositionException3);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.King king44 = new a1.King(chessBoard32, color41);
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.util.ArrayList<java.lang.String> strList48 = pawn47.legalMoves();
        boolean boolean50 = chessBoard32.placePiece((a1.ChessPiece) pawn47, "\u265e");
        chessBoard32.initialize();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Knight knight59 = new a1.Knight(chessBoard55, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Bishop bishop63 = new a1.Bishop(chessBoard55, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard55, color65);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard52, color65);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard32, color65);
        a1.Knight knight70 = new a1.Knight(chessBoard27, color65);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color65);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        java.lang.String str77 = knight76.toString();
        boolean boolean79 = chessBoard0.placePiece((a1.ChessPiece) knight76, "\u265d");
        java.lang.String str80 = knight76.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265e" + "'", str77, "\u265e");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u265e" + "'", str80, "\u265e");
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.util.ArrayList<java.lang.String> strList7 = pawn3.legalMoves();
        a1.ChessPiece.Color color8 = pawn3.getColor();
        a1.ChessPiece.Color color9 = pawn3.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertNull(color9);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        a1.ChessPiece chessPiece24 = null;
        boolean boolean26 = chessBoard5.placePiece(chessPiece24, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.King king39 = new a1.King(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = null;
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard40, color41);
        java.util.ArrayList<java.lang.String> strList43 = pawn42.legalMoves();
        boolean boolean45 = chessBoard27.placePiece((a1.ChessPiece) pawn42, "\u265e");
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard27, color46);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard48, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = null;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Rook rook65 = new a1.Rook(chessBoard53, color62);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = null;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Knight knight73 = new a1.Knight(chessBoard69, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard69, color75);
        a1.Rook rook78 = new a1.Rook(chessBoard66, color75);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard53, color75);
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn81 = new a1.Pawn(chessBoard53, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard48, color80);
        java.util.ArrayList<java.lang.String> strList83 = bishop82.legalMoves();
        java.lang.String str84 = bishop82.toString();
        a1.ChessPiece.Color color85 = bishop82.getColor();
        a1.Pawn pawn86 = new a1.Pawn(chessBoard27, color85);
        a1.Rook rook87 = new a1.Rook(chessBoard5, color85);
        a1.Pawn pawn88 = new a1.Pawn(chessBoard0, color85);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265d" + "'", str84, "\u265d");
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        java.util.ArrayList<java.lang.String> strList72 = rook71.legalMoves();
        a1.ChessPiece.Color color73 = rook71.getColor();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.lang.String str13 = king12.toString();
        java.lang.String str14 = king12.toString();
        java.lang.String str15 = king12.toString();
        // The following exception was thrown during execution in test generation
        try {
            king12.setPosition("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265a" + "'", str13, "\u265a");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u265a" + "'", str14, "\u265a");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.Rook rook31 = new a1.Rook(chessBoard19, color28);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.Rook rook44 = new a1.Rook(chessBoard32, color41);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard19, color41);
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard19, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard14, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard0, color46);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "\u2657");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.util.ArrayList<java.lang.String> strList7 = pawn3.legalMoves();
        a1.ChessPiece.Color color8 = pawn3.getColor();
        java.util.ArrayList<java.lang.String> strList9 = pawn3.legalMoves();
        java.lang.Class<?> wildcardClass10 = pawn3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard9, color28);
        a1.Knight knight32 = new a1.Knight(chessBoard0, color28);
        java.lang.String str33 = knight32.toString();
        java.util.ArrayList<java.lang.String> strList34 = knight32.legalMoves();
        java.lang.String str35 = knight32.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u265e" + "'", str33, "\u265e");
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265e" + "'", str35, "\u265e");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.lang.String str6 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList7 = knight4.legalMoves();
        java.lang.String str8 = knight4.toString();
        java.lang.String str9 = knight4.getPosition();
        java.util.ArrayList<java.lang.String> strList10 = knight4.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            knight4.setPosition("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265e" + "'", str6, "\u265e");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException13);
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalPositionException15);
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        java.lang.Throwable[] throwableArray24 = illegalMoveException23.getSuppressed();
        illegalPositionException15.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("a1.IllegalMoveException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException15);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalPositionException15);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard35, color57);
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard35, color62);
        a1.Rook rook64 = new a1.Rook(chessBoard0, color62);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard66 = null;
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = null;
        a1.ChessPiece.Color color69 = null;
        a1.Pawn pawn70 = new a1.Pawn(chessBoard68, color69);
        java.lang.String str71 = pawn70.toString();
        boolean boolean73 = chessBoard67.placePiece((a1.ChessPiece) pawn70, "");
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.Knight knight83 = new a1.Knight(chessBoard67, color80);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Knight knight88 = new a1.Knight(chessBoard84, color86);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard67, color86);
        a1.Rook rook90 = new a1.Rook(chessBoard66, color86);
        a1.Bishop bishop91 = new a1.Bishop(chessBoard0, color86);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265c", "a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u265f" + "'", str71, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException6);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.lang.String str9 = bishop8.toString();
        java.lang.String str10 = bishop8.toString();
        // The following exception was thrown during execution in test generation
        try {
            bishop8.setPosition("\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265d" + "'", str9, "\u265d");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265d" + "'", str10, "\u265d");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color30);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard35, color48);
        a1.ChessPiece.Color color52 = pawn51.getColor();
        a1.Rook rook53 = new a1.Rook(chessBoard0, color52);
        java.util.ArrayList<java.lang.String> strList54 = rook53.legalMoves();
        java.util.ArrayList<java.lang.String> strList55 = rook53.legalMoves();
        java.lang.String str56 = rook53.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265c" + "'", str56, "\u265c");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = null;
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard2, color3);
        java.lang.String str5 = pawn4.toString();
        boolean boolean7 = chessBoard1.placePiece((a1.ChessPiece) pawn4, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Knight knight17 = new a1.Knight(chessBoard1, color14);
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight19 = new a1.Knight(chessBoard1, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = null;
        a1.ChessPiece.Color color22 = null;
        a1.Pawn pawn23 = new a1.Pawn(chessBoard21, color22);
        java.lang.String str24 = pawn23.toString();
        boolean boolean26 = chessBoard20.placePiece((a1.ChessPiece) pawn23, "");
        a1.ChessBoard chessBoard27 = null;
        a1.ChessPiece.Color color28 = null;
        a1.Pawn pawn29 = new a1.Pawn(chessBoard27, color28);
        java.lang.String str30 = pawn29.toString();
        java.lang.String str31 = pawn29.toString();
        boolean boolean33 = chessBoard20.placePiece((a1.ChessPiece) pawn29, "\u265f");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        boolean boolean39 = chessBoard34.placePiece((a1.ChessPiece) rook37, "\u265f");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard40, color46);
        boolean boolean50 = chessBoard34.placePiece((a1.ChessPiece) knight48, "");
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = null;
        a1.ChessPiece.Color color53 = null;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard52, color53);
        java.lang.String str55 = pawn54.toString();
        boolean boolean57 = chessBoard51.placePiece((a1.ChessPiece) pawn54, "");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard58, color68);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard51, color68);
        a1.King king72 = new a1.King(chessBoard34, color68);
        a1.King king73 = new a1.King(chessBoard20, color68);
        java.lang.String str74 = king73.toString();
        java.util.ArrayList<java.lang.String> strList75 = king73.legalMoves();
        java.util.ArrayList<java.lang.String> strList76 = king73.legalMoves();
        a1.ChessPiece.Color color77 = king73.getColor();
        a1.Knight knight78 = new a1.Knight(chessBoard1, color77);
        a1.King king79 = new a1.King(chessBoard0, color77);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265f" + "'", str24, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u265f" + "'", str30, "\u265f");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u265f" + "'", str31, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265f" + "'", str55, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265a" + "'", str74, "\u265a");
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        java.lang.String str23 = bishop22.toString();
        a1.ChessPiece.Color color24 = bishop22.getColor();
        java.lang.String str25 = bishop22.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265d" + "'", str23, "\u265d");
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u265d" + "'", str25, "\u265d");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard52, color58);
        a1.Pawn pawn61 = new a1.Pawn(chessBoard0, color58);
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard0, color62);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265a", "\u265e");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException6);
        java.lang.Throwable[] throwableArray9 = illegalPositionException6.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray17 = illegalMoveException12.getSuppressed();
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException12);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList11 = pawn3.legalMoves();
        java.lang.Class<?> wildcardClass12 = strList11.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException11);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException11);
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException20);
        java.lang.Throwable throwable24 = null;
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("hi!", throwable24);
        java.lang.Throwable[] throwableArray26 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = illegalMoveException25.getSuppressed();
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException33);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException33);
        illegalMoveException25.addSuppressed((java.lang.Throwable) illegalMoveException35);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalMoveException35);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException22);
        java.lang.Throwable throwable41 = null;
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("hi!", throwable41);
        java.lang.Throwable[] throwableArray43 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray45 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable49 = null;
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("hi!", throwable49);
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException50);
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException50);
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalMoveException52);
        java.lang.Throwable[] throwableArray54 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable60 = null;
        a1.IllegalMoveException illegalMoveException61 = new a1.IllegalMoveException("hi!", throwable60);
        a1.IllegalPositionException illegalPositionException62 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException61);
        a1.IllegalMoveException illegalMoveException63 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException62);
        a1.IllegalPositionException illegalPositionException64 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException62);
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException62);
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalMoveException65);
        illegalPositionException39.addSuppressed((java.lang.Throwable) illegalMoveException65);
        illegalPositionException11.addSuppressed((java.lang.Throwable) illegalMoveException65);
        a1.IllegalMoveException illegalMoveException69 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException65);
        java.lang.Throwable[] throwableArray70 = illegalMoveException69.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray70);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Rook rook69 = new a1.Rook(chessBoard57, color66);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard54, color66);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color66);
        java.lang.String str72 = rook71.toString();
        java.lang.String str73 = rook71.getPosition();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265c" + "'", str72, "\u265c");
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        java.lang.String str22 = bishop20.toString();
        java.util.ArrayList<java.lang.String> strList23 = bishop20.legalMoves();
        java.lang.String str24 = bishop20.toString();
        java.util.ArrayList<java.lang.String> strList25 = bishop20.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265d" + "'", str22, "\u265d");
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265d" + "'", str24, "\u265d");
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = pawn2.legalMoves();
        java.lang.String str8 = pawn2.toString();
        java.lang.String str9 = pawn2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.lang.String str4 = pawn2.toString();
        a1.ChessPiece.Color color5 = pawn2.getColor();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.lang.String str7 = pawn2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertNull(color5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        java.util.ArrayList<java.lang.String> strList35 = bishop34.legalMoves();
        java.lang.String str36 = bishop34.toString();
        a1.ChessPiece.Color color37 = bishop34.getColor();
        java.lang.String str38 = bishop34.toString();
        java.lang.String str39 = bishop34.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265d" + "'", str36, "\u265d");
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265d" + "'", str38, "\u265d");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265d" + "'", str39, "\u265d");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        chessBoard0.initialize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        boolean boolean10 = chessBoard0.placePiece((a1.ChessPiece) rook6, "\u265e");
        a1.ChessPiece.Color color11 = null;
        a1.Rook rook12 = new a1.Rook(chessBoard0, color11);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Knight knight22 = new a1.Knight(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard13, color20);
        java.util.ArrayList<java.lang.String> strList24 = knight23.legalMoves();
        a1.ChessPiece.Color color25 = knight23.getColor();
        a1.Knight knight26 = new a1.Knight(chessBoard0, color25);
        java.lang.String str27 = knight26.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265e" + "'", str27, "\u265e");
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.ChessPiece.Color color48 = null;
        a1.Bishop bishop49 = new a1.Bishop(chessBoard39, color48);
        java.lang.String str50 = bishop49.toString();
        java.lang.String str51 = bishop49.toString();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) bishop49, "\u265c");
        java.util.ArrayList<java.lang.String> strList54 = bishop49.legalMoves();
        java.lang.String str55 = bishop49.toString();
        java.lang.String str56 = bishop49.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265d" + "'", str50, "\u265d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u265d" + "'", str51, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265d" + "'", str55, "\u265d");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265d" + "'", str56, "\u265d");
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList7 = rook2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable[] throwableArray6 = illegalPositionException5.getSuppressed();
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException17);
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException18);
        illegalPositionException5.addSuppressed((java.lang.Throwable) illegalMoveException19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException5);
        java.lang.Throwable[] throwableArray22 = illegalPositionException5.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Knight knight57 = new a1.Knight(chessBoard53, color55);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = null;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Rook rook70 = new a1.Rook(chessBoard58, color67);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = null;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.Rook rook83 = new a1.Rook(chessBoard71, color80);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard58, color80);
        a1.Rook rook85 = new a1.Rook(chessBoard53, color80);
        a1.Rook rook86 = new a1.Rook(chessBoard50, color80);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard0, color80);
        java.lang.String str88 = pawn87.toString();
        java.util.ArrayList<java.lang.String> strList89 = pawn87.legalMoves();
        java.util.ArrayList<java.lang.String> strList90 = pawn87.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u265f" + "'", str88, "\u265f");
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(strList90);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException13.getSuppressed();
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        illegalMoveException13.addSuppressed((java.lang.Throwable) illegalMoveException23);
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException10);
        java.lang.Throwable throwable29 = null;
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("hi!", throwable29);
        java.lang.Throwable[] throwableArray31 = illegalMoveException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = illegalMoveException30.getSuppressed();
        java.lang.Throwable throwable37 = null;
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("hi!", throwable37);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException38);
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException38);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException30.getSuppressed();
        java.lang.Throwable throwable48 = null;
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("hi!", throwable48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException49);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException50);
        a1.IllegalPositionException illegalPositionException52 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException50);
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException50);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException53);
        illegalPositionException27.addSuppressed((java.lang.Throwable) illegalMoveException53);
        java.lang.Throwable throwable58 = null;
        a1.IllegalMoveException illegalMoveException59 = new a1.IllegalMoveException("hi!", throwable58);
        a1.IllegalPositionException illegalPositionException60 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException59);
        java.lang.Throwable throwable64 = null;
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("hi!", throwable64);
        a1.IllegalPositionException illegalPositionException66 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException65);
        a1.IllegalMoveException illegalMoveException67 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException66);
        illegalMoveException59.addSuppressed((java.lang.Throwable) illegalPositionException66);
        java.lang.Throwable throwable71 = null;
        a1.IllegalMoveException illegalMoveException72 = new a1.IllegalMoveException("hi!", throwable71);
        java.lang.Throwable[] throwableArray73 = illegalMoveException72.getSuppressed();
        java.lang.Throwable throwable75 = null;
        a1.IllegalMoveException illegalMoveException76 = new a1.IllegalMoveException("hi!", throwable75);
        java.lang.Throwable[] throwableArray77 = illegalMoveException76.getSuppressed();
        illegalMoveException72.addSuppressed((java.lang.Throwable) illegalMoveException76);
        a1.IllegalMoveException illegalMoveException79 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException72);
        illegalPositionException66.addSuppressed((java.lang.Throwable) illegalMoveException72);
        illegalMoveException53.addSuppressed((java.lang.Throwable) illegalPositionException66);
        a1.IllegalMoveException illegalMoveException82 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException66);
        a1.IllegalPositionException illegalPositionException83 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalPositionException66);
        java.lang.Throwable[] throwableArray84 = illegalPositionException83.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessPiece.Color color82 = null;
        a1.Bishop bishop83 = new a1.Bishop(chessBoard73, color82);
        java.lang.String str84 = bishop83.toString();
        java.lang.String str85 = bishop83.toString();
        java.util.ArrayList<java.lang.String> strList86 = bishop83.legalMoves();
        boolean boolean88 = chessBoard0.placePiece((a1.ChessPiece) bishop83, "a1.IllegalPositionException: ");
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.WHITE;
        a1.Knight knight90 = new a1.Knight(chessBoard0, color89);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece92 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265d" + "'", str84, "\u265d");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u265d" + "'", str85, "\u265d");
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.WHITE + "'", color89.equals(a1.ChessPiece.Color.WHITE));
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.lang.Throwable throwable2 = null;
        a1.IllegalMoveException illegalMoveException3 = new a1.IllegalMoveException("hi!", throwable2);
        java.lang.Throwable[] throwableArray4 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException11);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException3.getSuppressed();
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException23);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException23);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException23);
        illegalMoveException3.addSuppressed((java.lang.Throwable) illegalMoveException26);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException26);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard35, color57);
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard35, color62);
        a1.Rook rook64 = new a1.Rook(chessBoard0, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = null;
        a1.ChessPiece.Color color67 = null;
        a1.Pawn pawn68 = new a1.Pawn(chessBoard66, color67);
        java.lang.String str69 = pawn68.toString();
        boolean boolean71 = chessBoard65.placePiece((a1.ChessPiece) pawn68, "");
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Knight knight76 = new a1.Knight(chessBoard72, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Bishop bishop80 = new a1.Bishop(chessBoard72, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Pawn pawn84 = new a1.Pawn(chessBoard72, color82);
        a1.Bishop bishop85 = new a1.Bishop(chessBoard65, color82);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard0, color82);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265f", "\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265f" + "'", str69, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessBoard chessBoard6 = null;
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        java.lang.String str9 = pawn8.toString();
        boolean boolean11 = chessBoard5.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Knight knight16 = new a1.Knight(chessBoard12, color14);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.King king29 = new a1.King(chessBoard17, color26);
        a1.ChessBoard chessBoard30 = null;
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard30, color31);
        java.util.ArrayList<java.lang.String> strList33 = pawn32.legalMoves();
        boolean boolean35 = chessBoard17.placePiece((a1.ChessPiece) pawn32, "\u265e");
        chessBoard17.initialize();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard40, color50);
        a1.Pawn pawn53 = new a1.Pawn(chessBoard37, color50);
        a1.Pawn pawn54 = new a1.Pawn(chessBoard17, color50);
        a1.Knight knight55 = new a1.Knight(chessBoard12, color50);
        a1.Rook rook56 = new a1.Rook(chessBoard5, color50);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        boolean boolean62 = chessBoard57.placePiece((a1.ChessPiece) rook60, "\u265f");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard63, color69);
        boolean boolean73 = chessBoard57.placePiece((a1.ChessPiece) knight71, "");
        a1.ChessPiece.Color color74 = knight71.getColor();
        a1.King king75 = new a1.King(chessBoard5, color74);
        a1.King king76 = new a1.King(chessBoard0, color74);
        java.lang.String str77 = king76.toString();
        java.util.ArrayList<java.lang.String> strList78 = king76.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u265a" + "'", str77, "\u265a");
        org.junit.Assert.assertNotNull(strList78);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray9 = illegalMoveException7.getSuppressed();
        illegalMoveException2.addSuppressed((java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable16 = null;
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("hi!", throwable16);
        a1.IllegalPositionException illegalPositionException18 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException17);
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException17);
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        java.lang.Throwable[] throwableArray23 = illegalMoveException22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = illegalMoveException22.getSuppressed();
        java.lang.Throwable[] throwableArray25 = illegalMoveException22.getSuppressed();
        java.lang.Throwable throwable29 = null;
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("hi!", throwable29);
        a1.IllegalPositionException illegalPositionException31 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException30);
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException30);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalMoveException32);
        illegalMoveException19.addSuppressed((java.lang.Throwable) illegalMoveException32);
        a1.IllegalPositionException illegalPositionException35 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException32);
        java.lang.Throwable[] throwableArray36 = illegalMoveException32.getSuppressed();
        java.lang.Throwable throwable42 = null;
        a1.IllegalMoveException illegalMoveException43 = new a1.IllegalMoveException("hi!", throwable42);
        a1.IllegalPositionException illegalPositionException44 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException43);
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException44);
        a1.IllegalPositionException illegalPositionException46 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException44);
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException44);
        illegalMoveException32.addSuppressed((java.lang.Throwable) illegalMoveException47);
        java.lang.Throwable throwable51 = null;
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("hi!", throwable51);
        java.lang.Throwable[] throwableArray53 = illegalMoveException52.getSuppressed();
        java.lang.Throwable throwable56 = null;
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("hi!", throwable56);
        a1.IllegalPositionException illegalPositionException58 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException57);
        java.lang.Throwable[] throwableArray59 = illegalMoveException57.getSuppressed();
        illegalMoveException52.addSuppressed((java.lang.Throwable) illegalMoveException57);
        a1.IllegalMoveException illegalMoveException61 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException52);
        illegalMoveException47.addSuppressed((java.lang.Throwable) illegalMoveException52);
        a1.IllegalPositionException illegalPositionException63 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException47);
        illegalMoveException7.addSuppressed((java.lang.Throwable) illegalMoveException47);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray59);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        chessBoard0.initialize();
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Knight knight23 = new a1.Knight(chessBoard19, color21);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Pawn pawn31 = new a1.Pawn(chessBoard19, color29);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard16, color29);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        java.lang.String str40 = pawn36.getPosition();
        boolean boolean42 = chessBoard16.placePiece((a1.ChessPiece) pawn36, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Pawn pawn55 = new a1.Pawn(chessBoard43, color53);
        java.lang.String str56 = pawn55.getPosition();
        a1.ChessPiece.Color color57 = pawn55.getColor();
        a1.Rook rook58 = new a1.Rook(chessBoard16, color57);
        a1.ChessBoard chessBoard59 = null;
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = null;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard63, color69);
        a1.Rook rook72 = new a1.Rook(chessBoard60, color69);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = null;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Knight knight80 = new a1.Knight(chessBoard76, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard76, color82);
        a1.Rook rook85 = new a1.Rook(chessBoard73, color82);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard60, color82);
        a1.King king87 = new a1.King(chessBoard59, color82);
        a1.King king88 = new a1.King(chessBoard16, color82);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard0, color82);
        java.util.ArrayList<java.lang.String> strList90 = bishop89.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList90);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalMoveException: a1.IllegalPositionException: a1.IllegalPositionException: ", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        boolean boolean29 = chessBoard23.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Knight knight39 = new a1.Knight(chessBoard23, color36);
        a1.Knight knight40 = new a1.Knight(chessBoard17, color36);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard0, color36);
        java.lang.String str42 = bishop41.toString();
        java.lang.String str43 = bishop41.toString();
        java.util.ArrayList<java.lang.String> strList44 = bishop41.legalMoves();
        java.util.ArrayList<java.lang.String> strList45 = bishop41.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265d" + "'", str42, "\u265d");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265d" + "'", str43, "\u265d");
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strList45);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard5, color32);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.Rook rook60 = new a1.Rook(chessBoard48, color57);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard35, color57);
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn63 = new a1.Pawn(chessBoard35, color62);
        a1.Rook rook64 = new a1.Rook(chessBoard0, color62);
        java.lang.String str65 = rook64.toString();
        java.util.ArrayList<java.lang.String> strList66 = rook64.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265c" + "'", str65, "\u265c");
        org.junit.Assert.assertNotNull(strList66);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.util.ArrayList<java.lang.String> strList18 = king12.legalMoves();
        java.lang.String str19 = king12.toString();
        java.lang.String str20 = king12.getPosition();
        java.util.ArrayList<java.lang.String> strList21 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265a" + "'", str19, "\u265a");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.toString();
        java.lang.String str7 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList8 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        java.lang.String str72 = rook71.toString();
        java.util.ArrayList<java.lang.String> strList73 = rook71.legalMoves();
        java.util.ArrayList<java.lang.String> strList74 = rook71.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265c" + "'", str72, "\u265c");
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strList74);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.King king47 = new a1.King(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = null;
        a1.ChessPiece.Color color49 = null;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard48, color49);
        java.util.ArrayList<java.lang.String> strList51 = pawn50.legalMoves();
        boolean boolean53 = chessBoard35.placePiece((a1.ChessPiece) pawn50, "\u265e");
        chessBoard35.initialize();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard58, color68);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard55, color68);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard35, color68);
        a1.Knight knight73 = new a1.Knight(chessBoard30, color68);
        java.lang.String str74 = knight73.getPosition();
        java.util.ArrayList<java.lang.String> strList75 = knight73.legalMoves();
        a1.ChessPiece.Color color76 = knight73.getColor();
        a1.Pawn pawn77 = new a1.Pawn(chessBoard0, color76);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece79 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Knight knight33 = new a1.Knight(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard17, color47);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard0, color47);
        a1.ChessBoard chessBoard53 = null;
        a1.ChessPiece.Color color54 = null;
        a1.Pawn pawn55 = new a1.Pawn(chessBoard53, color54);
        java.util.ArrayList<java.lang.String> strList56 = pawn55.legalMoves();
        a1.ChessPiece.Color color57 = pawn55.getColor();
        boolean boolean59 = chessBoard0.placePiece((a1.ChessPiece) pawn55, "a1.IllegalPositionException: a1.IllegalPositionException: ");
        a1.ChessPiece chessPiece60 = null;
        boolean boolean62 = chessBoard0.placePiece(chessPiece60, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece64 = chessBoard0.getPiece("a1.IllegalMoveException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNull(color57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        java.lang.String str71 = king70.toString();
        java.util.ArrayList<java.lang.String> strList72 = king70.legalMoves();
        java.lang.String str73 = king70.toString();
        java.util.ArrayList<java.lang.String> strList74 = king70.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u265a" + "'", str71, "\u265a");
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265a" + "'", str73, "\u265a");
        org.junit.Assert.assertNotNull(strList74);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        java.lang.String str7 = rook2.toString();
        java.lang.String str8 = rook2.toString();
        java.lang.String str9 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList10 = rook2.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265c" + "'", str8, "\u265c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable[] throwableArray9 = illegalMoveException6.getSuppressed();
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException10);
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265a", throwable14);
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        java.lang.Throwable[] throwableArray23 = illegalMoveException22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = illegalMoveException22.getSuppressed();
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException22);
        java.lang.Throwable[] throwableArray26 = illegalPositionException25.getSuppressed();
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException25);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException27);
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        java.lang.Throwable[] throwableArray34 = illegalMoveException33.getSuppressed();
        java.lang.Throwable[] throwableArray35 = illegalMoveException33.getSuppressed();
        java.lang.Throwable[] throwableArray36 = illegalMoveException33.getSuppressed();
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        a1.IllegalPositionException illegalPositionException42 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException41);
        a1.IllegalMoveException illegalMoveException43 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException41);
        illegalMoveException33.addSuppressed((java.lang.Throwable) illegalMoveException43);
        a1.IllegalPositionException illegalPositionException45 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException43);
        java.lang.Throwable throwable51 = null;
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("hi!", throwable51);
        a1.IllegalPositionException illegalPositionException53 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException52);
        a1.IllegalMoveException illegalMoveException54 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException52);
        a1.IllegalPositionException illegalPositionException55 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException52);
        a1.IllegalMoveException illegalMoveException56 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException55);
        java.lang.Throwable throwable59 = null;
        a1.IllegalMoveException illegalMoveException60 = new a1.IllegalMoveException("hi!", throwable59);
        a1.IllegalMoveException illegalMoveException61 = new a1.IllegalMoveException("\u265a", throwable59);
        java.lang.Throwable[] throwableArray62 = illegalMoveException61.getSuppressed();
        java.lang.Throwable[] throwableArray63 = illegalMoveException61.getSuppressed();
        illegalPositionException55.addSuppressed((java.lang.Throwable) illegalMoveException61);
        illegalMoveException43.addSuppressed((java.lang.Throwable) illegalPositionException55);
        a1.IllegalMoveException illegalMoveException66 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException43);
        illegalMoveException28.addSuppressed((java.lang.Throwable) illegalMoveException43);
        illegalMoveException16.addSuppressed((java.lang.Throwable) illegalMoveException43);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException16);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList9 = knight8.legalMoves();
        java.lang.String str10 = knight8.toString();
        java.lang.String str11 = knight8.getPosition();
        java.util.ArrayList<java.lang.String> strList12 = knight8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265e" + "'", str10, "\u265e");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard48 = null;
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard48, color62);
        a1.King king67 = new a1.King(chessBoard0, color62);
        java.util.ArrayList<java.lang.String> strList68 = king67.legalMoves();
        java.lang.String str69 = king67.getPosition();
        java.util.ArrayList<java.lang.String> strList70 = king67.legalMoves();
        java.util.ArrayList<java.lang.String> strList71 = king67.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strList71);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265a", throwable6);
        java.lang.Throwable[] throwableArray9 = illegalMoveException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = illegalMoveException8.getSuppressed();
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        java.lang.Throwable[] throwableArray16 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException15.getSuppressed();
        a1.IllegalPositionException illegalPositionException18 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException15);
        java.lang.Throwable[] throwableArray19 = illegalPositionException18.getSuppressed();
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException18);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalPositionException18);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException22);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalPositionException22);
        java.lang.Throwable[] throwableArray25 = illegalPositionException22.getSuppressed();
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException22);
        java.lang.String str27 = illegalPositionException22.toString();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265d" + "'", str27, "\u265d");
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.King king33 = new a1.King(chessBoard21, color30);
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.util.ArrayList<java.lang.String> strList37 = pawn36.legalMoves();
        boolean boolean39 = chessBoard21.placePiece((a1.ChessPiece) pawn36, "\u265e");
        chessBoard21.initialize();
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard21, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = null;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.Rook rook55 = new a1.Rook(chessBoard43, color52);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = null;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Knight knight63 = new a1.Knight(chessBoard59, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard59, color65);
        a1.Rook rook68 = new a1.Rook(chessBoard56, color65);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard43, color65);
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn71 = new a1.Pawn(chessBoard43, color70);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard21, color70);
        a1.King king73 = new a1.King(chessBoard0, color70);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece75 = chessBoard0.getPiece("\u265f");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable[] throwableArray9 = illegalMoveException6.getSuppressed();
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalPositionException10);
        java.lang.Throwable[] throwableArray12 = illegalPositionException10.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException14);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable23 = null;
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("hi!", throwable23);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException24);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException24);
        java.lang.Throwable throwable28 = null;
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("hi!", throwable28);
        java.lang.Throwable[] throwableArray30 = illegalMoveException29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = illegalMoveException29.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException29.getSuppressed();
        java.lang.Throwable throwable36 = null;
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("hi!", throwable36);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException37);
        a1.IllegalMoveException illegalMoveException39 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException37);
        illegalMoveException29.addSuppressed((java.lang.Throwable) illegalMoveException39);
        illegalMoveException26.addSuppressed((java.lang.Throwable) illegalMoveException39);
        a1.IllegalPositionException illegalPositionException42 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException39);
        java.lang.Throwable[] throwableArray43 = illegalMoveException39.getSuppressed();
        java.lang.Throwable throwable49 = null;
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("hi!", throwable49);
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException50);
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException51);
        a1.IllegalPositionException illegalPositionException53 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException51);
        a1.IllegalMoveException illegalMoveException54 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException51);
        illegalMoveException39.addSuppressed((java.lang.Throwable) illegalMoveException54);
        java.lang.Throwable throwable58 = null;
        a1.IllegalMoveException illegalMoveException59 = new a1.IllegalMoveException("hi!", throwable58);
        java.lang.Throwable[] throwableArray60 = illegalMoveException59.getSuppressed();
        java.lang.Throwable throwable63 = null;
        a1.IllegalMoveException illegalMoveException64 = new a1.IllegalMoveException("hi!", throwable63);
        a1.IllegalPositionException illegalPositionException65 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException64);
        java.lang.Throwable[] throwableArray66 = illegalMoveException64.getSuppressed();
        illegalMoveException59.addSuppressed((java.lang.Throwable) illegalMoveException64);
        a1.IllegalMoveException illegalMoveException68 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException59);
        illegalMoveException54.addSuppressed((java.lang.Throwable) illegalMoveException59);
        a1.IllegalPositionException illegalPositionException70 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException54);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException54);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray66);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece30 = chessBoard0.getPiece("\u2657");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        chessBoard19.initialize();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        boolean boolean62 = chessBoard57.placePiece((a1.ChessPiece) rook60, "\u265f");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard63, color69);
        boolean boolean73 = chessBoard57.placePiece((a1.ChessPiece) knight71, "");
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = null;
        a1.ChessPiece.Color color76 = null;
        a1.Pawn pawn77 = new a1.Pawn(chessBoard75, color76);
        java.lang.String str78 = pawn77.toString();
        boolean boolean80 = chessBoard74.placePiece((a1.ChessPiece) pawn77, "");
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Knight knight85 = new a1.Knight(chessBoard81, color83);
        a1.ChessBoard chessBoard86 = new a1.ChessBoard();
        a1.ChessPiece.Color color87 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook88 = new a1.Rook(chessBoard86, color87);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard81, color87);
        a1.ChessBoard chessBoard90 = new a1.ChessBoard();
        a1.ChessPiece.Color color91 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook92 = new a1.Rook(chessBoard90, color91);
        a1.Pawn pawn93 = new a1.Pawn(chessBoard81, color91);
        a1.Bishop bishop94 = new a1.Bishop(chessBoard74, color91);
        a1.King king95 = new a1.King(chessBoard57, color91);
        a1.Knight knight96 = new a1.Knight(chessBoard19, color91);
        a1.Bishop bishop97 = new a1.Bishop(chessBoard0, color91);
        java.lang.String str98 = bishop97.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265f" + "'", str78, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color91 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color91.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "\u265d" + "'", str98, "\u265d");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        java.lang.Throwable[] throwableArray7 = illegalMoveException6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = illegalMoveException6.getSuppressed();
        java.lang.Throwable[] throwableArray9 = illegalMoveException6.getSuppressed();
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("\u265a", throwable13);
        java.lang.Throwable[] throwableArray16 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException15.getSuppressed();
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException15);
        a1.IllegalPositionException illegalPositionException19 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException15);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("\u265f", (java.lang.Throwable) illegalMoveException15);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalPositionException20);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        a1.ChessPiece.Color color59 = null;
        a1.Knight knight60 = new a1.Knight(chessBoard0, color59);
        java.lang.String str61 = knight60.toString();
        java.lang.String str62 = knight60.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u265e" + "'", str61, "\u265e");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265e" + "'", str62, "\u265e");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessBoard chessBoard46 = null;
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = null;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Knight knight54 = new a1.Knight(chessBoard50, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard50, color56);
        a1.Rook rook59 = new a1.Rook(chessBoard47, color56);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = null;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard63, color69);
        a1.Rook rook72 = new a1.Rook(chessBoard60, color69);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard47, color69);
        a1.King king74 = new a1.King(chessBoard46, color69);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard45, color69);
        a1.Rook rook76 = new a1.Rook(chessBoard0, color69);
        a1.ChessBoard chessBoard77 = null;
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Knight knight82 = new a1.Knight(chessBoard78, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Knight knight86 = new a1.Knight(chessBoard78, color84);
        a1.Knight knight87 = new a1.Knight(chessBoard77, color84);
        java.util.ArrayList<java.lang.String> strList88 = knight87.legalMoves();
        a1.ChessPiece.Color color89 = knight87.getColor();
        a1.Rook rook90 = new a1.Rook(chessBoard0, color89);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece92 = chessBoard0.getPiece("\u265a");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.Bishop bishop40 = new a1.Bishop(chessBoard0, color36);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException8);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Bishop bishop21 = new a1.Bishop(chessBoard13, color19);
        a1.Knight knight22 = new a1.Knight(chessBoard6, color19);
        a1.Knight knight23 = new a1.Knight(chessBoard0, color19);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        boolean boolean30 = chessBoard24.placePiece((a1.ChessPiece) pawn27, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Bishop bishop39 = new a1.Bishop(chessBoard31, color37);
        a1.Knight knight40 = new a1.Knight(chessBoard24, color37);
        a1.Rook rook41 = new a1.Rook(chessBoard0, color37);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: a1.IllegalPositionException: a1.IllegalMoveException: hi!", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        a1.ChessPiece.Color color71 = null;
        a1.Knight knight72 = new a1.Knight(chessBoard0, color71);
        // The following exception was thrown during execution in test generation
        try {
            knight72.setPosition("a1.IllegalMoveException: a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException13.getSuppressed();
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        illegalMoveException13.addSuppressed((java.lang.Throwable) illegalMoveException23);
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException10);
        java.lang.Throwable throwable29 = null;
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("hi!", throwable29);
        java.lang.Throwable[] throwableArray31 = illegalMoveException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = illegalMoveException30.getSuppressed();
        java.lang.Throwable throwable37 = null;
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("hi!", throwable37);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException38);
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException38);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException30.getSuppressed();
        java.lang.Throwable throwable48 = null;
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("hi!", throwable48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException49);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException50);
        a1.IllegalPositionException illegalPositionException52 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException50);
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException50);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException53);
        illegalPositionException27.addSuppressed((java.lang.Throwable) illegalMoveException53);
        java.lang.Throwable throwable58 = null;
        a1.IllegalMoveException illegalMoveException59 = new a1.IllegalMoveException("hi!", throwable58);
        a1.IllegalPositionException illegalPositionException60 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException59);
        java.lang.Throwable throwable64 = null;
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("hi!", throwable64);
        a1.IllegalPositionException illegalPositionException66 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException65);
        a1.IllegalMoveException illegalMoveException67 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException66);
        illegalMoveException59.addSuppressed((java.lang.Throwable) illegalPositionException66);
        java.lang.Throwable throwable71 = null;
        a1.IllegalMoveException illegalMoveException72 = new a1.IllegalMoveException("hi!", throwable71);
        java.lang.Throwable[] throwableArray73 = illegalMoveException72.getSuppressed();
        java.lang.Throwable throwable75 = null;
        a1.IllegalMoveException illegalMoveException76 = new a1.IllegalMoveException("hi!", throwable75);
        java.lang.Throwable[] throwableArray77 = illegalMoveException76.getSuppressed();
        illegalMoveException72.addSuppressed((java.lang.Throwable) illegalMoveException76);
        a1.IllegalMoveException illegalMoveException79 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException72);
        illegalPositionException66.addSuppressed((java.lang.Throwable) illegalMoveException72);
        illegalMoveException53.addSuppressed((java.lang.Throwable) illegalPositionException66);
        a1.IllegalMoveException illegalMoveException82 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException66);
        a1.IllegalPositionException illegalPositionException83 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalPositionException66);
        java.lang.String str84 = illegalPositionException66.toString();
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "a1.IllegalPositionException: hi!" + "'", str84, "a1.IllegalPositionException: hi!");
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Knight knight21 = new a1.Knight(chessBoard17, color19);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color19);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        boolean boolean30 = chessBoard24.placePiece((a1.ChessPiece) pawn27, "");
        java.lang.String str31 = pawn27.getPosition();
        boolean boolean33 = chessBoard0.placePiece((a1.ChessPiece) pawn27, "\u265c");
        java.util.ArrayList<java.lang.String> strList34 = pawn27.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strList34);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        illegalPositionException9.addSuppressed((java.lang.Throwable) illegalMoveException12);
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalPositionException9);
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        java.lang.Throwable[] throwableArray23 = illegalMoveException22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = illegalMoveException22.getSuppressed();
        java.lang.Throwable[] throwableArray25 = illegalMoveException22.getSuppressed();
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException22);
        java.lang.Throwable throwable29 = null;
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("hi!", throwable29);
        a1.IllegalMoveException illegalMoveException31 = new a1.IllegalMoveException("\u265a", throwable29);
        java.lang.Throwable[] throwableArray32 = illegalMoveException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = illegalMoveException31.getSuppressed();
        illegalMoveException26.addSuppressed((java.lang.Throwable) illegalMoveException31);
        a1.IllegalPositionException illegalPositionException35 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException31);
        java.lang.Throwable[] throwableArray36 = illegalMoveException31.getSuppressed();
        illegalPositionException17.addSuppressed((java.lang.Throwable) illegalMoveException31);
        java.lang.Throwable[] throwableArray38 = illegalPositionException17.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.lang.String str4 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.lang.String str6 = rook2.toString();
        java.lang.String str7 = rook2.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265c" + "'", str4, "\u265c");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265c" + "'", str7, "\u265c");
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = bishop18.legalMoves();
        java.lang.Class<?> wildcardClass20 = strList19.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Knight knight8 = new a1.Knight(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList9 = knight8.legalMoves();
        java.lang.String str10 = knight8.toString();
        java.util.ArrayList<java.lang.String> strList11 = knight8.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = knight8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265e" + "'", str10, "\u265e");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.toString();
        a1.ChessPiece.Color color7 = rook2.getColor();
        java.util.ArrayList<java.lang.String> strList8 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook2.legalMoves();
        java.lang.Class<?> wildcardClass10 = rook2.getClass();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException8);
        java.lang.Throwable[] throwableArray12 = illegalPositionException8.getSuppressed();
        java.lang.Throwable throwable18 = null;
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("hi!", throwable18);
        a1.IllegalPositionException illegalPositionException20 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException19);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException22);
        java.lang.Throwable throwable26 = null;
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("hi!", throwable26);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("\u265a", throwable26);
        java.lang.Throwable[] throwableArray29 = illegalMoveException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = illegalMoveException28.getSuppressed();
        illegalPositionException22.addSuppressed((java.lang.Throwable) illegalMoveException28);
        illegalPositionException8.addSuppressed((java.lang.Throwable) illegalPositionException22);
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalPositionException22);
        java.lang.Throwable[] throwableArray34 = illegalPositionException22.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        java.lang.Throwable[] throwableArray13 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException20);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException22);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException25 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException25);
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException32);
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException32);
        java.lang.Throwable throwable36 = null;
        a1.IllegalMoveException illegalMoveException37 = new a1.IllegalMoveException("hi!", throwable36);
        java.lang.Throwable[] throwableArray38 = illegalMoveException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = illegalMoveException37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = illegalMoveException37.getSuppressed();
        java.lang.Throwable throwable44 = null;
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("hi!", throwable44);
        a1.IllegalPositionException illegalPositionException46 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException45);
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException45);
        illegalMoveException37.addSuppressed((java.lang.Throwable) illegalMoveException47);
        illegalMoveException34.addSuppressed((java.lang.Throwable) illegalMoveException47);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException47);
        java.lang.Throwable[] throwableArray51 = illegalMoveException47.getSuppressed();
        illegalMoveException26.addSuppressed((java.lang.Throwable) illegalMoveException47);
        a1.IllegalPositionException illegalPositionException53 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException47);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray51);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Rook rook69 = new a1.Rook(chessBoard57, color66);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard54, color66);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color66);
        chessBoard0.initialize();
        a1.ChessPiece.Color color73 = null;
        a1.King king74 = new a1.King(chessBoard0, color73);
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Pawn pawn19 = new a1.Pawn(chessBoard7, color17);
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = null;
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard22, color23);
        java.lang.String str25 = pawn24.toString();
        boolean boolean27 = chessBoard21.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessBoard chessBoard28 = null;
        a1.ChessPiece.Color color29 = null;
        a1.Pawn pawn30 = new a1.Pawn(chessBoard28, color29);
        java.lang.String str31 = pawn30.toString();
        java.lang.String str32 = pawn30.toString();
        boolean boolean34 = chessBoard21.placePiece((a1.ChessPiece) pawn30, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        boolean boolean40 = chessBoard35.placePiece((a1.ChessPiece) rook38, "\u265f");
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard41, color47);
        boolean boolean51 = chessBoard35.placePiece((a1.ChessPiece) knight49, "");
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = null;
        a1.ChessPiece.Color color54 = null;
        a1.Pawn pawn55 = new a1.Pawn(chessBoard53, color54);
        java.lang.String str56 = pawn55.toString();
        boolean boolean58 = chessBoard52.placePiece((a1.ChessPiece) pawn55, "");
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Knight knight63 = new a1.Knight(chessBoard59, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard59, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard59, color69);
        a1.Bishop bishop72 = new a1.Bishop(chessBoard52, color69);
        a1.King king73 = new a1.King(chessBoard35, color69);
        a1.King king74 = new a1.King(chessBoard21, color69);
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = null;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Knight knight82 = new a1.Knight(chessBoard78, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard78, color84);
        a1.King king87 = new a1.King(chessBoard75, color84);
        a1.Bishop bishop88 = new a1.Bishop(chessBoard21, color84);
        a1.ChessPiece.Color color89 = bishop88.getColor();
        a1.Knight knight90 = new a1.Knight(chessBoard0, color89);
        a1.ChessBoard chessBoard91 = new a1.ChessBoard();
        a1.ChessPiece.Color color92 = null;
        a1.Rook rook93 = new a1.Rook(chessBoard91, color92);
        java.util.ArrayList<java.lang.String> strList94 = rook93.legalMoves();
        java.util.ArrayList<java.lang.String> strList95 = rook93.legalMoves();
        boolean boolean97 = chessBoard0.placePiece((a1.ChessPiece) rook93, "\u265d");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece99 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u265f" + "'", str25, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u265f" + "'", str31, "\u265f");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u265f" + "'", str32, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265f" + "'", str56, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        java.util.ArrayList<java.lang.String> strList22 = knight19.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            knight19.setPosition("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        java.lang.String str26 = king25.toString();
        java.util.ArrayList<java.lang.String> strList27 = king25.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = king25.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = king25.legalMoves();
        a1.ChessPiece.Color color30 = king25.getColor();
        a1.ChessPiece.Color color31 = king25.getColor();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265a" + "'", str26, "\u265a");
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.King king50 = new a1.King(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.util.ArrayList<java.lang.String> strList54 = pawn53.legalMoves();
        boolean boolean56 = chessBoard38.placePiece((a1.ChessPiece) pawn53, "\u265e");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.King king69 = new a1.King(chessBoard57, color66);
        a1.ChessBoard chessBoard70 = null;
        a1.ChessPiece.Color color71 = null;
        a1.Pawn pawn72 = new a1.Pawn(chessBoard70, color71);
        java.util.ArrayList<java.lang.String> strList73 = pawn72.legalMoves();
        boolean boolean75 = chessBoard57.placePiece((a1.ChessPiece) pawn72, "\u265e");
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook79 = new a1.Rook(chessBoard77, color78);
        a1.Knight knight80 = new a1.Knight(chessBoard76, color78);
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessPiece.Color color82 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook83 = new a1.Rook(chessBoard81, color82);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard76, color82);
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Pawn pawn88 = new a1.Pawn(chessBoard76, color86);
        java.lang.String str89 = pawn88.getPosition();
        a1.ChessPiece.Color color90 = pawn88.getColor();
        a1.Pawn pawn91 = new a1.Pawn(chessBoard57, color90);
        a1.Knight knight92 = new a1.Knight(chessBoard38, color90);
        a1.King king93 = new a1.King(chessBoard0, color90);
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color82 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color82.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        java.lang.Throwable[] throwableArray7 = illegalMoveException6.getSuppressed();
        illegalMoveException2.addSuppressed((java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable[] throwableArray9 = illegalMoveException2.getSuppressed();
        java.lang.Class<?> wildcardClass10 = throwableArray9.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException10);
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        java.lang.Throwable[] throwableArray16 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = illegalMoveException15.getSuppressed();
        java.lang.Throwable throwable22 = null;
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("hi!", throwable22);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException23);
        illegalMoveException15.addSuppressed((java.lang.Throwable) illegalMoveException25);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException25);
        a1.IllegalPositionException illegalPositionException28 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalPositionException illegalPositionException29 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        java.lang.Throwable[] throwableArray33 = illegalMoveException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = illegalMoveException32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = illegalMoveException32.getSuppressed();
        java.lang.Throwable throwable39 = null;
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("hi!", throwable39);
        a1.IllegalPositionException illegalPositionException41 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException40);
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException40);
        illegalMoveException32.addSuppressed((java.lang.Throwable) illegalMoveException42);
        java.lang.Throwable[] throwableArray44 = illegalMoveException32.getSuppressed();
        java.lang.Throwable throwable50 = null;
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("hi!", throwable50);
        a1.IllegalPositionException illegalPositionException52 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException51);
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException52);
        a1.IllegalPositionException illegalPositionException54 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException52);
        a1.IllegalMoveException illegalMoveException55 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException52);
        illegalMoveException32.addSuppressed((java.lang.Throwable) illegalMoveException55);
        illegalPositionException29.addSuppressed((java.lang.Throwable) illegalMoveException55);
        java.lang.Throwable throwable60 = null;
        a1.IllegalMoveException illegalMoveException61 = new a1.IllegalMoveException("hi!", throwable60);
        a1.IllegalPositionException illegalPositionException62 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException61);
        java.lang.Throwable throwable66 = null;
        a1.IllegalMoveException illegalMoveException67 = new a1.IllegalMoveException("hi!", throwable66);
        a1.IllegalPositionException illegalPositionException68 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException67);
        a1.IllegalMoveException illegalMoveException69 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException68);
        illegalMoveException61.addSuppressed((java.lang.Throwable) illegalPositionException68);
        java.lang.Throwable throwable73 = null;
        a1.IllegalMoveException illegalMoveException74 = new a1.IllegalMoveException("hi!", throwable73);
        java.lang.Throwable[] throwableArray75 = illegalMoveException74.getSuppressed();
        java.lang.Throwable throwable77 = null;
        a1.IllegalMoveException illegalMoveException78 = new a1.IllegalMoveException("hi!", throwable77);
        java.lang.Throwable[] throwableArray79 = illegalMoveException78.getSuppressed();
        illegalMoveException74.addSuppressed((java.lang.Throwable) illegalMoveException78);
        a1.IllegalMoveException illegalMoveException81 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException74);
        illegalPositionException68.addSuppressed((java.lang.Throwable) illegalMoveException74);
        illegalMoveException55.addSuppressed((java.lang.Throwable) illegalPositionException68);
        a1.IllegalMoveException illegalMoveException84 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException68);
        a1.IllegalMoveException illegalMoveException85 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException84);
        a1.IllegalMoveException illegalMoveException86 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException84);
        a1.IllegalPositionException illegalPositionException87 = new a1.IllegalPositionException("a1.IllegalMoveException: a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException84);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        boolean boolean19 = chessBoard13.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessBoard chessBoard20 = null;
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        java.lang.String str23 = pawn22.toString();
        java.lang.String str24 = pawn22.toString();
        boolean boolean26 = chessBoard13.placePiece((a1.ChessPiece) pawn22, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        boolean boolean32 = chessBoard27.placePiece((a1.ChessPiece) rook30, "\u265f");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard33, color39);
        boolean boolean43 = chessBoard27.placePiece((a1.ChessPiece) knight41, "");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = null;
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        java.lang.String str48 = pawn47.toString();
        boolean boolean50 = chessBoard44.placePiece((a1.ChessPiece) pawn47, "");
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        a1.Knight knight55 = new a1.Knight(chessBoard51, color53);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook58 = new a1.Rook(chessBoard56, color57);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard51, color57);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook62 = new a1.Rook(chessBoard60, color61);
        a1.Pawn pawn63 = new a1.Pawn(chessBoard51, color61);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard44, color61);
        a1.King king65 = new a1.King(chessBoard27, color61);
        a1.King king66 = new a1.King(chessBoard13, color61);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard0, color61);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessPiece.Color color70 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook71 = new a1.Rook(chessBoard69, color70);
        a1.Knight knight72 = new a1.Knight(chessBoard68, color70);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        a1.Bishop bishop76 = new a1.Bishop(chessBoard68, color74);
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessBoard chessBoard78 = null;
        a1.ChessPiece.Color color79 = null;
        a1.Pawn pawn80 = new a1.Pawn(chessBoard78, color79);
        java.lang.String str81 = pawn80.toString();
        boolean boolean83 = chessBoard77.placePiece((a1.ChessPiece) pawn80, "");
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Knight knight88 = new a1.Knight(chessBoard84, color86);
        a1.ChessBoard chessBoard89 = new a1.ChessBoard();
        a1.ChessPiece.Color color90 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook91 = new a1.Rook(chessBoard89, color90);
        a1.Bishop bishop92 = new a1.Bishop(chessBoard84, color90);
        a1.Knight knight93 = new a1.Knight(chessBoard77, color90);
        a1.Rook rook94 = new a1.Rook(chessBoard68, color90);
        a1.Knight knight95 = new a1.Knight(chessBoard0, color90);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265f" + "'", str23, "\u265f");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u265f" + "'", str24, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u265f" + "'", str48, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265f" + "'", str81, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        java.util.ArrayList<java.lang.String> strList54 = king53.legalMoves();
        java.lang.String str55 = king53.getPosition();
        java.util.ArrayList<java.lang.String> strList56 = king53.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strList56);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = null;
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        java.lang.String str58 = pawn57.toString();
        boolean boolean60 = chessBoard54.placePiece((a1.ChessPiece) pawn57, "");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Knight knight65 = new a1.Knight(chessBoard61, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Bishop bishop69 = new a1.Bishop(chessBoard61, color67);
        a1.Knight knight70 = new a1.Knight(chessBoard54, color67);
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight72 = new a1.Knight(chessBoard54, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard0, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = new a1.ChessBoard();
        a1.ChessPiece.Color color76 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook77 = new a1.Rook(chessBoard75, color76);
        a1.Knight knight78 = new a1.Knight(chessBoard74, color76);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard74, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Pawn pawn86 = new a1.Pawn(chessBoard74, color84);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard0, color84);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece89 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265f" + "'", str58, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessPiece.Color color41 = knight40.getColor();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        boolean boolean29 = chessBoard23.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Knight knight39 = new a1.Knight(chessBoard23, color36);
        a1.Knight knight40 = new a1.Knight(chessBoard17, color36);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard0, color36);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        boolean boolean48 = chessBoard43.placePiece((a1.ChessPiece) rook46, "\u265f");
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard43, color62);
        a1.King king67 = new a1.King(chessBoard42, color62);
        a1.Knight knight68 = new a1.Knight(chessBoard0, color62);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece70 = chessBoard0.getPiece("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        java.lang.String str6 = rook2.toString();
        a1.ChessPiece.Color color7 = rook2.getColor();
        java.util.ArrayList<java.lang.String> strList8 = rook2.legalMoves();
        java.lang.String str9 = rook2.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265c" + "'", str9, "\u265c");
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Knight knight38 = new a1.Knight(chessBoard22, color35);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = null;
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard40, color41);
        java.lang.String str43 = pawn42.toString();
        boolean boolean45 = chessBoard39.placePiece((a1.ChessPiece) pawn42, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Pawn pawn58 = new a1.Pawn(chessBoard46, color56);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard39, color56);
        a1.King king60 = new a1.King(chessBoard22, color56);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard0, color56);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = null;
        a1.ChessPiece.Color color64 = null;
        a1.Pawn pawn65 = new a1.Pawn(chessBoard63, color64);
        java.lang.String str66 = pawn65.toString();
        boolean boolean68 = chessBoard62.placePiece((a1.ChessPiece) pawn65, "");
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Knight knight73 = new a1.Knight(chessBoard69, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard69, color75);
        a1.Knight knight78 = new a1.Knight(chessBoard62, color75);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        a1.Bishop bishop84 = new a1.Bishop(chessBoard62, color81);
        a1.Rook rook85 = new a1.Rook(chessBoard0, color81);
        java.util.ArrayList<java.lang.String> strList86 = rook85.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265f" + "'", str43, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u265f" + "'", str66, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList86);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard9, color28);
        a1.Knight knight32 = new a1.Knight(chessBoard0, color28);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Pawn pawn52 = new a1.Pawn(chessBoard40, color50);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard33, color50);
        java.util.ArrayList<java.lang.String> strList54 = bishop53.legalMoves();
        java.lang.String str55 = bishop53.toString();
        boolean boolean57 = chessBoard0.placePiece((a1.ChessPiece) bishop53, "\u265f");
        java.lang.String str58 = bishop53.toString();
        java.lang.String str59 = bishop53.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265d" + "'", str55, "\u265d");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u265d" + "'", str58, "\u265d");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265d" + "'", str59, "\u265d");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        boolean boolean34 = chessBoard29.placePiece((a1.ChessPiece) rook32, "\u265f");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        boolean boolean45 = chessBoard29.placePiece((a1.ChessPiece) knight43, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Knight knight53 = new a1.Knight(chessBoard49, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Bishop bishop57 = new a1.Bishop(chessBoard49, color55);
        a1.Rook rook58 = new a1.Rook(chessBoard46, color55);
        a1.King king59 = new a1.King(chessBoard29, color55);
        a1.Knight knight60 = new a1.Knight(chessBoard0, color55);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        java.lang.String str65 = rook64.toString();
        java.lang.String str66 = rook64.getPosition();
        java.util.ArrayList<java.lang.String> strList67 = rook64.legalMoves();
        boolean boolean69 = chessBoard0.placePiece((a1.ChessPiece) rook64, "\u265a");
        java.util.ArrayList<java.lang.String> strList70 = rook64.legalMoves();
        java.util.ArrayList<java.lang.String> strList71 = rook64.legalMoves();
        a1.ChessPiece.Color color72 = rook64.getColor();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265c" + "'", str65, "\u265c");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNull(color72);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = illegalMoveException5.getSuppressed();
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException10);
        java.lang.String str12 = illegalPositionException10.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265c" + "'", str12, "\u265c");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        a1.ChessBoard chessBoard48 = null;
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessBoard chessBoard50 = null;
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard50, color51);
        java.lang.String str53 = pawn52.toString();
        boolean boolean55 = chessBoard49.placePiece((a1.ChessPiece) pawn52, "");
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Knight knight65 = new a1.Knight(chessBoard49, color62);
        a1.Knight knight66 = new a1.Knight(chessBoard48, color62);
        a1.King king67 = new a1.King(chessBoard0, color62);
        java.lang.String str68 = king67.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265f" + "'", str53, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u265a" + "'", str68, "\u265a");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException20);
        java.lang.Throwable throwable24 = null;
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("hi!", throwable24);
        java.lang.Throwable[] throwableArray26 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = illegalMoveException25.getSuppressed();
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException33);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException33);
        illegalMoveException25.addSuppressed((java.lang.Throwable) illegalMoveException35);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalMoveException35);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException22);
        java.lang.Throwable throwable41 = null;
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("hi!", throwable41);
        java.lang.Throwable[] throwableArray43 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray45 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable49 = null;
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("hi!", throwable49);
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException50);
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException50);
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalMoveException52);
        java.lang.Throwable[] throwableArray54 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable60 = null;
        a1.IllegalMoveException illegalMoveException61 = new a1.IllegalMoveException("hi!", throwable60);
        a1.IllegalPositionException illegalPositionException62 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException61);
        a1.IllegalMoveException illegalMoveException63 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException62);
        a1.IllegalPositionException illegalPositionException64 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException62);
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException62);
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalMoveException65);
        illegalPositionException39.addSuppressed((java.lang.Throwable) illegalMoveException65);
        java.lang.Throwable throwable70 = null;
        a1.IllegalMoveException illegalMoveException71 = new a1.IllegalMoveException("hi!", throwable70);
        a1.IllegalPositionException illegalPositionException72 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException71);
        java.lang.Throwable throwable76 = null;
        a1.IllegalMoveException illegalMoveException77 = new a1.IllegalMoveException("hi!", throwable76);
        a1.IllegalPositionException illegalPositionException78 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException77);
        a1.IllegalMoveException illegalMoveException79 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException78);
        illegalMoveException71.addSuppressed((java.lang.Throwable) illegalPositionException78);
        java.lang.Throwable throwable83 = null;
        a1.IllegalMoveException illegalMoveException84 = new a1.IllegalMoveException("hi!", throwable83);
        java.lang.Throwable[] throwableArray85 = illegalMoveException84.getSuppressed();
        java.lang.Throwable throwable87 = null;
        a1.IllegalMoveException illegalMoveException88 = new a1.IllegalMoveException("hi!", throwable87);
        java.lang.Throwable[] throwableArray89 = illegalMoveException88.getSuppressed();
        illegalMoveException84.addSuppressed((java.lang.Throwable) illegalMoveException88);
        a1.IllegalMoveException illegalMoveException91 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException84);
        illegalPositionException78.addSuppressed((java.lang.Throwable) illegalMoveException84);
        illegalMoveException65.addSuppressed((java.lang.Throwable) illegalPositionException78);
        illegalMoveException13.addSuppressed((java.lang.Throwable) illegalPositionException78);
        a1.IllegalPositionException illegalPositionException95 = new a1.IllegalPositionException("\u2657", (java.lang.Throwable) illegalPositionException78);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray89);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        java.util.ArrayList<java.lang.String> strList17 = knight14.legalMoves();
        a1.ChessPiece.Color color18 = knight14.getColor();
        java.util.ArrayList<java.lang.String> strList19 = knight14.legalMoves();
        java.lang.Class<?> wildcardClass20 = knight14.getClass();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        boolean boolean43 = chessBoard38.placePiece((a1.ChessPiece) rook41, "\u265f");
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Knight knight48 = new a1.Knight(chessBoard44, color46);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard44, color50);
        boolean boolean54 = chessBoard38.placePiece((a1.ChessPiece) knight52, "");
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessBoard chessBoard56 = null;
        a1.ChessPiece.Color color57 = null;
        a1.Pawn pawn58 = new a1.Pawn(chessBoard56, color57);
        java.lang.String str59 = pawn58.toString();
        boolean boolean61 = chessBoard55.placePiece((a1.ChessPiece) pawn58, "");
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard62, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard62, color68);
        a1.ChessBoard chessBoard71 = new a1.ChessBoard();
        a1.ChessPiece.Color color72 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook73 = new a1.Rook(chessBoard71, color72);
        a1.Pawn pawn74 = new a1.Pawn(chessBoard62, color72);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard55, color72);
        a1.King king76 = new a1.King(chessBoard38, color72);
        a1.Knight knight77 = new a1.Knight(chessBoard0, color72);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u265f" + "'", str59, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color72 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color72.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException14);
        java.lang.Throwable[] throwableArray16 = illegalMoveException4.getSuppressed();
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException18 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException17);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException11);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalPositionException11);
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException20);
        java.lang.Throwable throwable24 = null;
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("hi!", throwable24);
        java.lang.Throwable[] throwableArray26 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = illegalMoveException25.getSuppressed();
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException33);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException33);
        illegalMoveException25.addSuppressed((java.lang.Throwable) illegalMoveException35);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalMoveException35);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException22);
        java.lang.Throwable throwable41 = null;
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("hi!", throwable41);
        java.lang.Throwable[] throwableArray43 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException42.getSuppressed();
        java.lang.Throwable[] throwableArray45 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable49 = null;
        a1.IllegalMoveException illegalMoveException50 = new a1.IllegalMoveException("hi!", throwable49);
        a1.IllegalPositionException illegalPositionException51 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException50);
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException50);
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalMoveException52);
        java.lang.Throwable[] throwableArray54 = illegalMoveException42.getSuppressed();
        java.lang.Throwable throwable60 = null;
        a1.IllegalMoveException illegalMoveException61 = new a1.IllegalMoveException("hi!", throwable60);
        a1.IllegalPositionException illegalPositionException62 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException61);
        a1.IllegalMoveException illegalMoveException63 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException62);
        a1.IllegalPositionException illegalPositionException64 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException62);
        a1.IllegalMoveException illegalMoveException65 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException62);
        illegalMoveException42.addSuppressed((java.lang.Throwable) illegalMoveException65);
        illegalPositionException39.addSuppressed((java.lang.Throwable) illegalMoveException65);
        illegalPositionException11.addSuppressed((java.lang.Throwable) illegalMoveException65);
        a1.IllegalMoveException illegalMoveException69 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException65);
        java.lang.String str70 = illegalMoveException65.toString();
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray54);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265a" + "'", str70, "\u265a");
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = null;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Knight knight38 = new a1.Knight(chessBoard34, color36);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Bishop bishop42 = new a1.Bishop(chessBoard34, color40);
        a1.King king43 = new a1.King(chessBoard31, color40);
        a1.ChessBoard chessBoard44 = null;
        a1.ChessPiece.Color color45 = null;
        a1.Pawn pawn46 = new a1.Pawn(chessBoard44, color45);
        java.util.ArrayList<java.lang.String> strList47 = pawn46.legalMoves();
        boolean boolean49 = chessBoard31.placePiece((a1.ChessPiece) pawn46, "\u265e");
        chessBoard31.initialize();
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Pawn pawn66 = new a1.Pawn(chessBoard54, color64);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard51, color64);
        a1.Pawn pawn68 = new a1.Pawn(chessBoard31, color64);
        a1.Knight knight69 = new a1.Knight(chessBoard26, color64);
        chessBoard26.initialize();
        a1.ChessBoard chessBoard71 = null;
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessPiece.Color color74 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook75 = new a1.Rook(chessBoard73, color74);
        boolean boolean77 = chessBoard72.placePiece((a1.ChessPiece) rook75, "\u265f");
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook81 = new a1.Rook(chessBoard79, color80);
        a1.Knight knight82 = new a1.Knight(chessBoard78, color80);
        a1.ChessBoard chessBoard83 = new a1.ChessBoard();
        a1.ChessPiece.Color color84 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook85 = new a1.Rook(chessBoard83, color84);
        a1.Knight knight86 = new a1.Knight(chessBoard78, color84);
        boolean boolean88 = chessBoard72.placePiece((a1.ChessPiece) knight86, "");
        a1.ChessPiece.Color color89 = knight86.getColor();
        a1.Knight knight90 = new a1.Knight(chessBoard71, color89);
        a1.Knight knight91 = new a1.Knight(chessBoard26, color89);
        boolean boolean93 = chessBoard0.placePiece((a1.ChessPiece) knight91, "\u265f");
        java.util.ArrayList<java.lang.String> strList94 = knight91.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color74 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color74.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color84 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color84.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strList94);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException5);
        java.lang.String str9 = illegalMoveException5.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str9, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException13);
        illegalMoveException6.addSuppressed((java.lang.Throwable) illegalPositionException13);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable[] throwableArray18 = illegalMoveException17.getSuppressed();
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException17);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        java.lang.String str22 = pawn21.toString();
        java.util.ArrayList<java.lang.String> strList23 = pawn21.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265f" + "'", str22, "\u265f");
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook2.legalMoves();
        java.lang.String str6 = rook2.toString();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265c" + "'", str6, "\u265c");
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece60 = chessBoard0.getPiece("\u265d");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        java.lang.String str28 = rook27.toString();
        java.util.ArrayList<java.lang.String> strList29 = rook27.legalMoves();
        java.lang.String str30 = rook27.toString();
        java.lang.String str31 = rook27.toString();
        a1.ChessPiece.Color color32 = rook27.getColor();
        a1.Bishop bishop33 = new a1.Bishop(chessBoard22, color32);
        a1.ChessBoard chessBoard34 = null;
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard35, color41);
        a1.Knight knight44 = new a1.Knight(chessBoard34, color41);
        java.util.ArrayList<java.lang.String> strList45 = knight44.legalMoves();
        a1.ChessPiece.Color color46 = knight44.getColor();
        a1.Rook rook47 = new a1.Rook(chessBoard22, color46);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard0, color46);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265c" + "'", str28, "\u265c");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u265c" + "'", str30, "\u265c");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u265c" + "'", str31, "\u265c");
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = knight18.legalMoves();
        java.lang.String str20 = knight18.toString();
        a1.ChessPiece.Color color21 = knight18.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265e" + "'", str20, "\u265e");
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        a1.King king38 = new a1.King(chessBoard0, color34);
        java.lang.String str39 = king38.toString();
        java.lang.String str40 = king38.toString();
        java.lang.String str41 = king38.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265a" + "'", str39, "\u265a");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u265a" + "'", str40, "\u265a");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u265a" + "'", str41, "\u265a");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.lang.String str6 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList7 = knight4.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = knight4.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = knight4.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265e" + "'", str6, "\u265e");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard11, color17);
        boolean boolean21 = chessBoard0.placePiece((a1.ChessPiece) knight19, "a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard22, color28);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) knight30, "\u265e");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = null;
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        java.lang.String str37 = pawn36.toString();
        boolean boolean39 = chessBoard33.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard40, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard40, color46);
        a1.Knight knight49 = new a1.Knight(chessBoard33, color46);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.Rook rook72 = new a1.Rook(chessBoard0, color67);
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessPiece.Color color82 = null;
        a1.Bishop bishop83 = new a1.Bishop(chessBoard73, color82);
        java.util.ArrayList<java.lang.String> strList84 = bishop83.legalMoves();
        java.util.ArrayList<java.lang.String> strList85 = bishop83.legalMoves();
        boolean boolean87 = chessBoard0.placePiece((a1.ChessPiece) bishop83, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            bishop83.setPosition("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u265f" + "'", str37, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException4);
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        java.lang.Throwable[] throwableArray10 = illegalMoveException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = illegalMoveException9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = illegalMoveException9.getSuppressed();
        java.lang.Throwable throwable16 = null;
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("hi!", throwable16);
        a1.IllegalPositionException illegalPositionException18 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException17);
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException17);
        illegalMoveException9.addSuppressed((java.lang.Throwable) illegalMoveException19);
        illegalMoveException6.addSuppressed((java.lang.Throwable) illegalMoveException19);
        java.lang.Throwable[] throwableArray22 = illegalMoveException19.getSuppressed();
        java.lang.Throwable throwable25 = null;
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", throwable25);
        java.lang.Throwable[] throwableArray27 = illegalMoveException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = illegalMoveException26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = illegalMoveException26.getSuppressed();
        java.lang.Throwable throwable33 = null;
        a1.IllegalMoveException illegalMoveException34 = new a1.IllegalMoveException("hi!", throwable33);
        a1.IllegalPositionException illegalPositionException35 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException34);
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException34);
        illegalMoveException26.addSuppressed((java.lang.Throwable) illegalMoveException36);
        a1.IllegalPositionException illegalPositionException38 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException36);
        java.lang.Throwable throwable44 = null;
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("hi!", throwable44);
        a1.IllegalPositionException illegalPositionException46 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException45);
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException45);
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException45);
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException48);
        java.lang.Throwable throwable52 = null;
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("hi!", throwable52);
        a1.IllegalMoveException illegalMoveException54 = new a1.IllegalMoveException("\u265a", throwable52);
        java.lang.Throwable[] throwableArray55 = illegalMoveException54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = illegalMoveException54.getSuppressed();
        illegalPositionException48.addSuppressed((java.lang.Throwable) illegalMoveException54);
        illegalMoveException36.addSuppressed((java.lang.Throwable) illegalPositionException48);
        illegalMoveException19.addSuppressed((java.lang.Throwable) illegalMoveException36);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessBoard chessBoard20 = null;
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        java.lang.String str23 = pawn22.toString();
        boolean boolean25 = chessBoard19.placePiece((a1.ChessPiece) pawn22, "");
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.lang.String str29 = pawn28.toString();
        java.lang.String str30 = pawn28.toString();
        boolean boolean32 = chessBoard19.placePiece((a1.ChessPiece) pawn28, "\u265f");
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        boolean boolean38 = chessBoard33.placePiece((a1.ChessPiece) rook36, "\u265f");
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard39, color45);
        boolean boolean49 = chessBoard33.placePiece((a1.ChessPiece) knight47, "");
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessBoard chessBoard51 = null;
        a1.ChessPiece.Color color52 = null;
        a1.Pawn pawn53 = new a1.Pawn(chessBoard51, color52);
        java.lang.String str54 = pawn53.toString();
        boolean boolean56 = chessBoard50.placePiece((a1.ChessPiece) pawn53, "");
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        a1.Knight knight61 = new a1.Knight(chessBoard57, color59);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.Bishop bishop65 = new a1.Bishop(chessBoard57, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Pawn pawn69 = new a1.Pawn(chessBoard57, color67);
        a1.Bishop bishop70 = new a1.Bishop(chessBoard50, color67);
        a1.King king71 = new a1.King(chessBoard33, color67);
        a1.King king72 = new a1.King(chessBoard19, color67);
        java.lang.String str73 = king72.toString();
        java.util.ArrayList<java.lang.String> strList74 = king72.legalMoves();
        java.util.ArrayList<java.lang.String> strList75 = king72.legalMoves();
        a1.ChessPiece.Color color76 = king72.getColor();
        a1.Knight knight77 = new a1.Knight(chessBoard0, color76);
        java.lang.String str78 = knight77.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265f" + "'", str23, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u265f" + "'", str29, "\u265f");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u265f" + "'", str30, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265f" + "'", str54, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265a" + "'", str73, "\u265a");
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265e" + "'", str78, "\u265e");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        chessBoard13.initialize();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard36, color38);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Bishop bishop44 = new a1.Bishop(chessBoard36, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard36, color46);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard33, color46);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard13, color46);
        a1.Knight knight51 = new a1.Knight(chessBoard8, color46);
        a1.King king52 = new a1.King(chessBoard0, color46);
        java.lang.String str53 = king52.toString();
        a1.ChessPiece.Color color54 = king52.getColor();
        java.lang.String str55 = king52.toString();
        java.lang.String str56 = king52.toString();
        java.util.ArrayList<java.lang.String> strList57 = king52.legalMoves();
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265a" + "'", str53, "\u265a");
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265a" + "'", str55, "\u265a");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u265a" + "'", str56, "\u265a");
        org.junit.Assert.assertNotNull(strList57);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList9 = bishop8.legalMoves();
        java.lang.String str10 = bishop8.toString();
        java.util.ArrayList<java.lang.String> strList11 = bishop8.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = bishop8.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = bishop8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265d" + "'", str10, "\u265d");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        java.lang.String str17 = knight16.toString();
        java.util.ArrayList<java.lang.String> strList18 = knight16.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = knight16.legalMoves();
        java.lang.String str20 = knight16.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265e" + "'", str17, "\u265e");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265e" + "'", str20, "\u265e");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        chessBoard19.initialize();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook60 = new a1.Rook(chessBoard58, color59);
        boolean boolean62 = chessBoard57.placePiece((a1.ChessPiece) rook60, "\u265f");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard63, color69);
        boolean boolean73 = chessBoard57.placePiece((a1.ChessPiece) knight71, "");
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessBoard chessBoard75 = null;
        a1.ChessPiece.Color color76 = null;
        a1.Pawn pawn77 = new a1.Pawn(chessBoard75, color76);
        java.lang.String str78 = pawn77.toString();
        boolean boolean80 = chessBoard74.placePiece((a1.ChessPiece) pawn77, "");
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Knight knight85 = new a1.Knight(chessBoard81, color83);
        a1.ChessBoard chessBoard86 = new a1.ChessBoard();
        a1.ChessPiece.Color color87 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook88 = new a1.Rook(chessBoard86, color87);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard81, color87);
        a1.ChessBoard chessBoard90 = new a1.ChessBoard();
        a1.ChessPiece.Color color91 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook92 = new a1.Rook(chessBoard90, color91);
        a1.Pawn pawn93 = new a1.Pawn(chessBoard81, color91);
        a1.Bishop bishop94 = new a1.Bishop(chessBoard74, color91);
        a1.King king95 = new a1.King(chessBoard57, color91);
        a1.Knight knight96 = new a1.Knight(chessBoard19, color91);
        a1.Bishop bishop97 = new a1.Bishop(chessBoard0, color91);
        java.lang.String str98 = bishop97.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color59 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color59.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u265f" + "'", str78, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color91 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color91.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "\u265d" + "'", str98, "\u265d");
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessPiece.Color color14 = pawn9.getColor();
        java.util.ArrayList<java.lang.String> strList15 = pawn9.legalMoves();
        java.util.ArrayList<java.lang.String> strList16 = pawn9.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            pawn9.setPosition("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = null;
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        java.lang.String str27 = pawn26.toString();
        boolean boolean29 = chessBoard23.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Knight knight39 = new a1.Knight(chessBoard23, color36);
        a1.Knight knight40 = new a1.Knight(chessBoard17, color36);
        a1.Bishop bishop41 = new a1.Bishop(chessBoard0, color36);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: a1.IllegalMoveException: hi!", "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265f" + "'", str27, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        boolean boolean10 = chessBoard0.placePiece((a1.ChessPiece) rook6, "\u265e");
        java.util.ArrayList<java.lang.String> strList11 = rook6.legalMoves();
        java.lang.String str12 = rook6.toString();
        java.util.ArrayList<java.lang.String> strList13 = rook6.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265c" + "'", str12, "\u265c");
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException7);
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException14.getSuppressed();
        a1.IllegalPositionException illegalPositionException17 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException14);
        java.lang.Throwable[] throwableArray18 = illegalPositionException17.getSuppressed();
        a1.IllegalMoveException illegalMoveException19 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException17);
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalMoveException19);
        java.lang.Throwable throwable24 = null;
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("hi!", throwable24);
        java.lang.Throwable[] throwableArray26 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = illegalMoveException25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = illegalMoveException25.getSuppressed();
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException33);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException33);
        illegalMoveException25.addSuppressed((java.lang.Throwable) illegalMoveException35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException35);
        java.lang.Throwable throwable43 = null;
        a1.IllegalMoveException illegalMoveException44 = new a1.IllegalMoveException("hi!", throwable43);
        a1.IllegalPositionException illegalPositionException45 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException44);
        a1.IllegalMoveException illegalMoveException46 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException44);
        a1.IllegalPositionException illegalPositionException47 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException44);
        a1.IllegalMoveException illegalMoveException48 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException47);
        java.lang.Throwable throwable51 = null;
        a1.IllegalMoveException illegalMoveException52 = new a1.IllegalMoveException("hi!", throwable51);
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("\u265a", throwable51);
        java.lang.Throwable[] throwableArray54 = illegalMoveException53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = illegalMoveException53.getSuppressed();
        illegalPositionException47.addSuppressed((java.lang.Throwable) illegalMoveException53);
        illegalMoveException35.addSuppressed((java.lang.Throwable) illegalPositionException47);
        a1.IllegalMoveException illegalMoveException58 = new a1.IllegalMoveException("\u265f", (java.lang.Throwable) illegalMoveException35);
        illegalMoveException20.addSuppressed((java.lang.Throwable) illegalMoveException35);
        illegalMoveException8.addSuppressed((java.lang.Throwable) illegalMoveException35);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color10);
        java.util.ArrayList<java.lang.String> strList13 = pawn12.legalMoves();
        a1.ChessPiece.Color color14 = pawn12.getColor();
        java.util.ArrayList<java.lang.String> strList15 = pawn12.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException10);
        java.lang.Throwable throwable14 = null;
        a1.IllegalMoveException illegalMoveException15 = new a1.IllegalMoveException("hi!", throwable14);
        java.lang.Throwable[] throwableArray16 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = illegalMoveException15.getSuppressed();
        java.lang.Throwable throwable22 = null;
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("hi!", throwable22);
        a1.IllegalPositionException illegalPositionException24 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException25 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException23);
        illegalMoveException15.addSuppressed((java.lang.Throwable) illegalMoveException25);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalMoveException25);
        a1.IllegalPositionException illegalPositionException28 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalPositionException illegalPositionException29 = new a1.IllegalPositionException("a1.IllegalPositionException: a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        java.lang.Throwable[] throwableArray33 = illegalMoveException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = illegalMoveException32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = illegalMoveException32.getSuppressed();
        java.lang.Throwable throwable39 = null;
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("hi!", throwable39);
        a1.IllegalPositionException illegalPositionException41 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException40);
        a1.IllegalMoveException illegalMoveException42 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException40);
        illegalMoveException32.addSuppressed((java.lang.Throwable) illegalMoveException42);
        java.lang.Throwable[] throwableArray44 = illegalMoveException32.getSuppressed();
        java.lang.Throwable throwable50 = null;
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("hi!", throwable50);
        a1.IllegalPositionException illegalPositionException52 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException51);
        a1.IllegalMoveException illegalMoveException53 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException52);
        a1.IllegalPositionException illegalPositionException54 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException52);
        a1.IllegalMoveException illegalMoveException55 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException52);
        illegalMoveException32.addSuppressed((java.lang.Throwable) illegalMoveException55);
        illegalPositionException29.addSuppressed((java.lang.Throwable) illegalMoveException55);
        java.lang.Throwable throwable60 = null;
        a1.IllegalMoveException illegalMoveException61 = new a1.IllegalMoveException("hi!", throwable60);
        a1.IllegalPositionException illegalPositionException62 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException61);
        java.lang.Throwable throwable66 = null;
        a1.IllegalMoveException illegalMoveException67 = new a1.IllegalMoveException("hi!", throwable66);
        a1.IllegalPositionException illegalPositionException68 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException67);
        a1.IllegalMoveException illegalMoveException69 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException68);
        illegalMoveException61.addSuppressed((java.lang.Throwable) illegalPositionException68);
        java.lang.Throwable throwable73 = null;
        a1.IllegalMoveException illegalMoveException74 = new a1.IllegalMoveException("hi!", throwable73);
        java.lang.Throwable[] throwableArray75 = illegalMoveException74.getSuppressed();
        java.lang.Throwable throwable77 = null;
        a1.IllegalMoveException illegalMoveException78 = new a1.IllegalMoveException("hi!", throwable77);
        java.lang.Throwable[] throwableArray79 = illegalMoveException78.getSuppressed();
        illegalMoveException74.addSuppressed((java.lang.Throwable) illegalMoveException78);
        a1.IllegalMoveException illegalMoveException81 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException74);
        illegalPositionException68.addSuppressed((java.lang.Throwable) illegalMoveException74);
        illegalMoveException55.addSuppressed((java.lang.Throwable) illegalPositionException68);
        a1.IllegalMoveException illegalMoveException84 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException55);
        a1.IllegalPositionException illegalPositionException85 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException84);
        a1.IllegalMoveException illegalMoveException86 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException85);
        a1.IllegalMoveException illegalMoveException87 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException86);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable throwable12 = null;
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("hi!", throwable12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = illegalMoveException13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException13.getSuppressed();
        java.lang.Throwable throwable20 = null;
        a1.IllegalMoveException illegalMoveException21 = new a1.IllegalMoveException("hi!", throwable20);
        a1.IllegalPositionException illegalPositionException22 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException21);
        illegalMoveException13.addSuppressed((java.lang.Throwable) illegalMoveException23);
        illegalMoveException10.addSuppressed((java.lang.Throwable) illegalMoveException23);
        a1.IllegalPositionException illegalPositionException26 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException27 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException26);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException27);
        java.lang.Throwable throwable31 = null;
        a1.IllegalMoveException illegalMoveException32 = new a1.IllegalMoveException("hi!", throwable31);
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("\u265a", throwable31);
        java.lang.Throwable[] throwableArray34 = illegalMoveException33.getSuppressed();
        java.lang.Throwable[] throwableArray35 = illegalMoveException33.getSuppressed();
        java.lang.Throwable throwable39 = null;
        a1.IllegalMoveException illegalMoveException40 = new a1.IllegalMoveException("hi!", throwable39);
        java.lang.Throwable[] throwableArray41 = illegalMoveException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = illegalMoveException40.getSuppressed();
        a1.IllegalPositionException illegalPositionException43 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException40);
        java.lang.Throwable[] throwableArray44 = illegalPositionException43.getSuppressed();
        a1.IllegalMoveException illegalMoveException45 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException43);
        illegalMoveException33.addSuppressed((java.lang.Throwable) illegalPositionException43);
        illegalMoveException27.addSuppressed((java.lang.Throwable) illegalMoveException33);
        a1.IllegalPositionException illegalPositionException48 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException33);
        java.lang.Throwable[] throwableArray49 = illegalMoveException33.getSuppressed();
        java.lang.Throwable[] throwableArray50 = illegalMoveException33.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalPositionException illegalPositionException7 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException6);
        java.lang.Throwable[] throwableArray9 = illegalMoveException6.getSuppressed();
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException6);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("a1.IllegalMoveException: ", (java.lang.Throwable) illegalPositionException10);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            king60.setPosition("a1.IllegalMoveException: a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.Rook rook17 = new a1.Rook(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Bishop bishop29 = new a1.Bishop(chessBoard21, color27);
        a1.Rook rook30 = new a1.Rook(chessBoard18, color27);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard5, color27);
        a1.Rook rook32 = new a1.Rook(chessBoard0, color27);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Knight knight37 = new a1.Knight(chessBoard33, color35);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Knight knight45 = new a1.Knight(chessBoard41, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Bishop bishop49 = new a1.Bishop(chessBoard41, color47);
        a1.Rook rook50 = new a1.Rook(chessBoard38, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.Rook rook63 = new a1.Rook(chessBoard51, color60);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard38, color60);
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard38, color65);
        a1.Bishop bishop67 = new a1.Bishop(chessBoard33, color65);
        java.util.ArrayList<java.lang.String> strList68 = bishop67.legalMoves();
        java.lang.String str69 = bishop67.toString();
        a1.ChessPiece.Color color70 = bishop67.getColor();
        a1.Rook rook71 = new a1.Rook(chessBoard0, color70);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessBoard chessBoard73 = null;
        a1.ChessPiece.Color color74 = null;
        a1.Pawn pawn75 = new a1.Pawn(chessBoard73, color74);
        java.lang.String str76 = pawn75.toString();
        boolean boolean78 = chessBoard72.placePiece((a1.ChessPiece) pawn75, "");
        boolean boolean80 = chessBoard0.placePiece((a1.ChessPiece) pawn75, "\u265c");
        a1.ChessBoard chessBoard81 = new a1.ChessBoard();
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Knight knight85 = new a1.Knight(chessBoard81, color83);
        a1.ChessBoard chessBoard86 = new a1.ChessBoard();
        a1.ChessPiece.Color color87 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook88 = new a1.Rook(chessBoard86, color87);
        a1.Bishop bishop89 = new a1.Bishop(chessBoard81, color87);
        a1.ChessBoard chessBoard90 = new a1.ChessBoard();
        a1.ChessPiece.Color color91 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook92 = new a1.Rook(chessBoard90, color91);
        a1.Pawn pawn93 = new a1.Pawn(chessBoard81, color91);
        a1.Pawn pawn94 = new a1.Pawn(chessBoard0, color91);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u265d" + "'", str69, "\u265d");
        org.junit.Assert.assertTrue("'" + color70 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color70.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265f" + "'", str76, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color87 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color87.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color91 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color91.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard52, color58);
        a1.Pawn pawn61 = new a1.Pawn(chessBoard0, color58);
        java.lang.String str62 = pawn61.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u265f" + "'", str62, "\u265f");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.lang.Throwable throwable7 = null;
        a1.IllegalMoveException illegalMoveException8 = new a1.IllegalMoveException("hi!", throwable7);
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException8);
        java.lang.Throwable[] throwableArray11 = illegalMoveException8.getSuppressed();
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException8);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalPositionException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalPositionException12);
        java.lang.Throwable[] throwableArray15 = illegalPositionException12.getSuppressed();
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException12);
        java.lang.Class<?> wildcardClass17 = illegalMoveException16.getClass();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.Rook rook39 = new a1.Rook(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Knight knight47 = new a1.Knight(chessBoard43, color45);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook50 = new a1.Rook(chessBoard48, color49);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard43, color49);
        a1.Rook rook52 = new a1.Rook(chessBoard40, color49);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard27, color49);
        a1.Rook rook54 = new a1.Rook(chessBoard22, color49);
        a1.Rook rook55 = new a1.Rook(chessBoard19, color49);
        java.util.ArrayList<java.lang.String> strList56 = rook55.legalMoves();
        a1.ChessPiece.Color color57 = rook55.getColor();
        a1.Pawn pawn58 = new a1.Pawn(chessBoard0, color57);
        chessBoard0.initialize();
        a1.ChessPiece.Color color60 = null;
        a1.Bishop bishop61 = new a1.Bishop(chessBoard0, color60);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        java.lang.String str65 = rook64.toString();
        java.lang.String str66 = rook64.getPosition();
        java.util.ArrayList<java.lang.String> strList67 = rook64.legalMoves();
        java.util.ArrayList<java.lang.String> strList68 = rook64.legalMoves();
        boolean boolean70 = chessBoard0.placePiece((a1.ChessPiece) rook64, "\u265c");
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265a", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + color57 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color57.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u265c" + "'", str65, "\u265c");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = null;
        a1.ChessPiece.Color color53 = null;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard52, color53);
        java.lang.String str55 = pawn54.toString();
        boolean boolean57 = chessBoard51.placePiece((a1.ChessPiece) pawn54, "");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard58, color68);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard51, color68);
        java.util.ArrayList<java.lang.String> strList72 = bishop71.legalMoves();
        a1.ChessPiece.Color color73 = bishop71.getColor();
        a1.Knight knight74 = new a1.Knight(chessBoard34, color73);
        a1.Knight knight75 = new a1.Knight(chessBoard17, color73);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard79, color85);
        a1.ChessBoard chessBoard88 = new a1.ChessBoard();
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook90 = new a1.Rook(chessBoard88, color89);
        a1.Pawn pawn91 = new a1.Pawn(chessBoard79, color89);
        a1.Pawn pawn92 = new a1.Pawn(chessBoard76, color89);
        a1.King king93 = new a1.King(chessBoard17, color89);
        a1.Knight knight94 = new a1.Knight(chessBoard0, color89);
        a1.ChessPiece.Color color95 = knight94.getColor();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265f" + "'", str55, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color95 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color95.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard23, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Pawn pawn35 = new a1.Pawn(chessBoard23, color33);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard20, color33);
        a1.Pawn pawn37 = new a1.Pawn(chessBoard0, color33);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265d", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        a1.ChessPiece chessPiece24 = null;
        boolean boolean26 = chessBoard5.placePiece(chessPiece24, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.Bishop bishop38 = new a1.Bishop(chessBoard30, color36);
        a1.King king39 = new a1.King(chessBoard27, color36);
        a1.ChessBoard chessBoard40 = null;
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard40, color41);
        java.util.ArrayList<java.lang.String> strList43 = pawn42.legalMoves();
        boolean boolean45 = chessBoard27.placePiece((a1.ChessPiece) pawn42, "\u265e");
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard27, color46);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.Knight knight52 = new a1.Knight(chessBoard48, color50);
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = null;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Knight knight60 = new a1.Knight(chessBoard56, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Bishop bishop64 = new a1.Bishop(chessBoard56, color62);
        a1.Rook rook65 = new a1.Rook(chessBoard53, color62);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = null;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Knight knight73 = new a1.Knight(chessBoard69, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard69, color75);
        a1.Rook rook78 = new a1.Rook(chessBoard66, color75);
        a1.Bishop bishop79 = new a1.Bishop(chessBoard53, color75);
        a1.ChessPiece.Color color80 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn81 = new a1.Pawn(chessBoard53, color80);
        a1.Bishop bishop82 = new a1.Bishop(chessBoard48, color80);
        java.util.ArrayList<java.lang.String> strList83 = bishop82.legalMoves();
        java.lang.String str84 = bishop82.toString();
        a1.ChessPiece.Color color85 = bishop82.getColor();
        a1.Pawn pawn86 = new a1.Pawn(chessBoard27, color85);
        a1.Rook rook87 = new a1.Rook(chessBoard5, color85);
        a1.Pawn pawn88 = new a1.Pawn(chessBoard0, color85);
        java.lang.String str89 = pawn88.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color36 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color36.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color80 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color80.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u265d" + "'", str84, "\u265d");
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.Rook rook26 = new a1.Rook(chessBoard0, color22);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u265f", "\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece53 = chessBoard0.getPiece("\u2657");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Bishop bishop28 = new a1.Bishop(chessBoard20, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Pawn pawn32 = new a1.Pawn(chessBoard20, color30);
        a1.Pawn pawn33 = new a1.Pawn(chessBoard17, color30);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard37, color47);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard34, color47);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessBoard chessBoard52 = null;
        a1.ChessPiece.Color color53 = null;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard52, color53);
        java.lang.String str55 = pawn54.toString();
        boolean boolean57 = chessBoard51.placePiece((a1.ChessPiece) pawn54, "");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard58, color68);
        a1.Bishop bishop71 = new a1.Bishop(chessBoard51, color68);
        java.util.ArrayList<java.lang.String> strList72 = bishop71.legalMoves();
        a1.ChessPiece.Color color73 = bishop71.getColor();
        a1.Knight knight74 = new a1.Knight(chessBoard34, color73);
        a1.Knight knight75 = new a1.Knight(chessBoard17, color73);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.ChessBoard chessBoard79 = new a1.ChessBoard();
        a1.ChessBoard chessBoard80 = new a1.ChessBoard();
        a1.ChessPiece.Color color81 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook82 = new a1.Rook(chessBoard80, color81);
        a1.Knight knight83 = new a1.Knight(chessBoard79, color81);
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessPiece.Color color85 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook86 = new a1.Rook(chessBoard84, color85);
        a1.Bishop bishop87 = new a1.Bishop(chessBoard79, color85);
        a1.ChessBoard chessBoard88 = new a1.ChessBoard();
        a1.ChessPiece.Color color89 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook90 = new a1.Rook(chessBoard88, color89);
        a1.Pawn pawn91 = new a1.Pawn(chessBoard79, color89);
        a1.Pawn pawn92 = new a1.Pawn(chessBoard76, color89);
        a1.King king93 = new a1.King(chessBoard17, color89);
        a1.Knight knight94 = new a1.Knight(chessBoard0, color89);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("a1.IllegalPositionException: a1.IllegalPositionException: a1.IllegalMoveException: hi!", "a1.IllegalMoveException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265f" + "'", str55, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color81 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color81.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color85 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color85.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        java.util.ArrayList<java.lang.String> strList17 = knight14.legalMoves();
        a1.ChessPiece.Color color18 = knight14.getColor();
        java.util.ArrayList<java.lang.String> strList19 = knight14.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = knight14.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = pawn2.legalMoves();
        java.lang.String str4 = pawn2.getPosition();
        a1.ChessPiece.Color color5 = pawn2.getColor();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(color5);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        java.lang.String str9 = bishop8.toString();
        java.util.ArrayList<java.lang.String> strList10 = bishop8.legalMoves();
        java.util.ArrayList<java.lang.String> strList11 = bishop8.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = bishop8.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265d" + "'", str9, "\u265d");
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.Knight knight9 = new a1.Knight(chessBoard1, color7);
        a1.Knight knight10 = new a1.Knight(chessBoard0, color7);
        java.lang.String str11 = knight10.toString();
        java.util.ArrayList<java.lang.String> strList12 = knight10.legalMoves();
        java.lang.String str13 = knight10.toString();
        java.util.ArrayList<java.lang.String> strList14 = knight10.legalMoves();
        a1.ChessPiece.Color color15 = knight10.getColor();
        java.util.ArrayList<java.lang.String> strList16 = knight10.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color7 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color7.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265e" + "'", str11, "\u265e");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265e" + "'", str13, "\u265e");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Knight knight30 = new a1.Knight(chessBoard26, color28);
        a1.Bishop bishop31 = new a1.Bishop(chessBoard9, color28);
        a1.Knight knight32 = new a1.Knight(chessBoard0, color28);
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard0, color33);
        java.lang.String str35 = pawn34.toString();
        java.util.ArrayList<java.lang.String> strList36 = pawn34.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertNotNull(strList36);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        java.lang.String str27 = bishop26.toString();
        java.util.ArrayList<java.lang.String> strList28 = bishop26.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = bishop26.legalMoves();
        java.lang.String str30 = bishop26.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265d" + "'", str27, "\u265d");
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u265d" + "'", str30, "\u265d");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        a1.Knight knight5 = new a1.Knight(chessBoard1, color3);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Rook rook8 = new a1.Rook(chessBoard6, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook12 = new a1.Rook(chessBoard10, color11);
        a1.Knight knight13 = new a1.Knight(chessBoard9, color11);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Bishop bishop17 = new a1.Bishop(chessBoard9, color15);
        a1.Rook rook18 = new a1.Rook(chessBoard6, color15);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook25 = new a1.Rook(chessBoard23, color24);
        a1.Knight knight26 = new a1.Knight(chessBoard22, color24);
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessPiece.Color color28 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook29 = new a1.Rook(chessBoard27, color28);
        a1.Bishop bishop30 = new a1.Bishop(chessBoard22, color28);
        a1.Rook rook31 = new a1.Rook(chessBoard19, color28);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard6, color28);
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard6, color33);
        a1.Bishop bishop35 = new a1.Bishop(chessBoard1, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = null;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.Rook rook48 = new a1.Rook(chessBoard36, color45);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = null;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.Rook rook61 = new a1.Rook(chessBoard49, color58);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard36, color58);
        a1.ChessPiece.Color color63 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn64 = new a1.Pawn(chessBoard36, color63);
        a1.Rook rook65 = new a1.Rook(chessBoard1, color63);
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessBoard chessBoard67 = null;
        a1.ChessPiece.Color color68 = null;
        a1.Pawn pawn69 = new a1.Pawn(chessBoard67, color68);
        java.lang.String str70 = pawn69.toString();
        boolean boolean72 = chessBoard66.placePiece((a1.ChessPiece) pawn69, "");
        a1.ChessBoard chessBoard73 = new a1.ChessBoard();
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Knight knight77 = new a1.Knight(chessBoard73, color75);
        a1.ChessBoard chessBoard78 = new a1.ChessBoard();
        a1.ChessPiece.Color color79 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook80 = new a1.Rook(chessBoard78, color79);
        a1.Bishop bishop81 = new a1.Bishop(chessBoard73, color79);
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.Pawn pawn85 = new a1.Pawn(chessBoard73, color83);
        a1.Bishop bishop86 = new a1.Bishop(chessBoard66, color83);
        a1.Pawn pawn87 = new a1.Pawn(chessBoard1, color83);
        a1.King king88 = new a1.King(chessBoard0, color83);
        a1.ChessPiece.Color color89 = king88.getColor();
        java.lang.String str90 = king88.toString();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color11 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color11.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color24 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color24.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color28 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color28.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color63 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color63.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u265f" + "'", str70, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color79 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color79.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color83 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color83.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color89 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color89.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u265a" + "'", str90, "\u265a");
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        java.lang.String str7 = pawn3.toString();
        java.util.ArrayList<java.lang.String> strList8 = pawn3.legalMoves();
        java.lang.Class<?> wildcardClass9 = strList8.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        java.util.ArrayList<java.lang.String> strList6 = rook2.legalMoves();
        // The following exception was thrown during execution in test generation
        try {
            rook2.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard13, color32);
        a1.Rook rook34 = new a1.Rook(chessBoard0, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = null;
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        java.lang.String str39 = pawn38.toString();
        boolean boolean41 = chessBoard35.placePiece((a1.ChessPiece) pawn38, "");
        java.lang.String str42 = pawn38.getPosition();
        java.util.ArrayList<java.lang.String> strList43 = pawn38.legalMoves();
        java.lang.String str44 = pawn38.toString();
        java.lang.String str45 = pawn38.toString();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) pawn38, "a1.IllegalPositionException: ");
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece49 = chessBoard0.getPiece("\u2657");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u265f" + "'", str39, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u265f" + "'", str44, "\u265f");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        boolean boolean57 = chessBoard52.placePiece((a1.ChessPiece) rook55, "\u265f");
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Knight knight66 = new a1.Knight(chessBoard58, color64);
        boolean boolean68 = chessBoard52.placePiece((a1.ChessPiece) knight66, "");
        a1.ChessPiece.Color color69 = knight66.getColor();
        a1.King king70 = new a1.King(chessBoard0, color69);
        java.util.ArrayList<java.lang.String> strList71 = king70.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList71);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        java.lang.Throwable[] throwableArray6 = illegalMoveException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException5.getSuppressed();
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException5);
        java.lang.Throwable[] throwableArray9 = illegalPositionException8.getSuppressed();
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException8);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalPositionException8);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        java.lang.String str54 = king53.toString();
        java.lang.String str55 = king53.toString();
        java.util.ArrayList<java.lang.String> strList56 = king53.legalMoves();
        java.lang.String str57 = king53.toString();
        java.util.ArrayList<java.lang.String> strList58 = king53.legalMoves();
        java.lang.Class<?> wildcardClass59 = king53.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265a" + "'", str55, "\u265a");
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265a" + "'", str57, "\u265a");
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.util.ArrayList<java.lang.String> strList18 = king12.legalMoves();
        java.lang.String str19 = king12.toString();
        java.util.ArrayList<java.lang.String> strList20 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList21 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u265a" + "'", str19, "\u265a");
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        java.util.ArrayList<java.lang.String> strList44 = knight43.legalMoves();
        java.lang.String str45 = knight43.toString();
        a1.ChessPiece.Color color46 = knight43.getColor();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265e" + "'", str45, "\u265e");
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.lang.Throwable throwable4 = null;
        a1.IllegalMoveException illegalMoveException5 = new a1.IllegalMoveException("hi!", throwable4);
        a1.IllegalPositionException illegalPositionException6 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException5);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("\u265a", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable throwable10 = null;
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("hi!", throwable10);
        java.lang.Throwable[] throwableArray12 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = illegalMoveException11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = illegalMoveException11.getSuppressed();
        illegalPositionException8.addSuppressed((java.lang.Throwable) illegalMoveException11);
        java.lang.Throwable throwable19 = null;
        a1.IllegalMoveException illegalMoveException20 = new a1.IllegalMoveException("hi!", throwable19);
        a1.IllegalPositionException illegalPositionException21 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException20);
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException21);
        java.lang.Throwable throwable25 = null;
        a1.IllegalMoveException illegalMoveException26 = new a1.IllegalMoveException("hi!", throwable25);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException26);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalPositionException27);
        java.lang.Throwable throwable32 = null;
        a1.IllegalMoveException illegalMoveException33 = new a1.IllegalMoveException("hi!", throwable32);
        a1.IllegalPositionException illegalPositionException34 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException33);
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException34);
        java.lang.Throwable throwable38 = null;
        a1.IllegalMoveException illegalMoveException39 = new a1.IllegalMoveException("hi!", throwable38);
        a1.IllegalPositionException illegalPositionException40 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException39);
        illegalMoveException35.addSuppressed((java.lang.Throwable) illegalPositionException40);
        illegalMoveException22.addSuppressed((java.lang.Throwable) illegalMoveException35);
        java.lang.Throwable throwable46 = null;
        a1.IllegalMoveException illegalMoveException47 = new a1.IllegalMoveException("hi!", throwable46);
        java.lang.Throwable[] throwableArray48 = illegalMoveException47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = illegalMoveException47.getSuppressed();
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException47);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalMoveException47);
        java.lang.Throwable[] throwableArray52 = illegalMoveException47.getSuppressed();
        java.lang.Throwable throwable55 = null;
        a1.IllegalMoveException illegalMoveException56 = new a1.IllegalMoveException("hi!", throwable55);
        java.lang.Throwable[] throwableArray57 = illegalMoveException56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = illegalMoveException56.getSuppressed();
        java.lang.Throwable[] throwableArray59 = illegalMoveException56.getSuppressed();
        java.lang.Throwable throwable63 = null;
        a1.IllegalMoveException illegalMoveException64 = new a1.IllegalMoveException("hi!", throwable63);
        a1.IllegalPositionException illegalPositionException65 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException64);
        a1.IllegalMoveException illegalMoveException66 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException64);
        illegalMoveException56.addSuppressed((java.lang.Throwable) illegalMoveException66);
        a1.IllegalPositionException illegalPositionException68 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException66);
        java.lang.Throwable throwable71 = null;
        a1.IllegalMoveException illegalMoveException72 = new a1.IllegalMoveException("hi!", throwable71);
        a1.IllegalMoveException illegalMoveException73 = new a1.IllegalMoveException("\u265a", throwable71);
        java.lang.Throwable[] throwableArray74 = illegalMoveException73.getSuppressed();
        java.lang.Throwable[] throwableArray75 = illegalMoveException73.getSuppressed();
        java.lang.Throwable throwable79 = null;
        a1.IllegalMoveException illegalMoveException80 = new a1.IllegalMoveException("hi!", throwable79);
        java.lang.Throwable[] throwableArray81 = illegalMoveException80.getSuppressed();
        java.lang.Throwable[] throwableArray82 = illegalMoveException80.getSuppressed();
        a1.IllegalPositionException illegalPositionException83 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException80);
        java.lang.Throwable[] throwableArray84 = illegalPositionException83.getSuppressed();
        a1.IllegalMoveException illegalMoveException85 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException83);
        illegalMoveException73.addSuppressed((java.lang.Throwable) illegalPositionException83);
        illegalPositionException68.addSuppressed((java.lang.Throwable) illegalPositionException83);
        illegalMoveException47.addSuppressed((java.lang.Throwable) illegalPositionException83);
        illegalMoveException35.addSuppressed((java.lang.Throwable) illegalMoveException47);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException47);
        java.lang.Throwable[] throwableArray91 = illegalMoveException11.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Knight knight58 = new a1.Knight(chessBoard54, color56);
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Bishop bishop62 = new a1.Bishop(chessBoard54, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Pawn pawn66 = new a1.Pawn(chessBoard54, color64);
        a1.Knight knight67 = new a1.Knight(chessBoard0, color64);
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece69 = chessBoard0.getPiece("\u265c");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        java.lang.Throwable throwable1 = null;
        a1.IllegalMoveException illegalMoveException2 = new a1.IllegalMoveException("hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = illegalMoveException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = illegalMoveException2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = illegalMoveException2.getSuppressed();
        java.lang.Throwable throwable9 = null;
        a1.IllegalMoveException illegalMoveException10 = new a1.IllegalMoveException("hi!", throwable9);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException10);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException10);
        illegalMoveException2.addSuppressed((java.lang.Throwable) illegalMoveException12);
        java.lang.Throwable[] throwableArray14 = illegalMoveException12.getSuppressed();
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalMoveException illegalMoveException23 = new a1.IllegalMoveException("\u265a", throwable21);
        java.lang.Throwable[] throwableArray24 = illegalMoveException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = illegalMoveException23.getSuppressed();
        java.lang.Throwable throwable29 = null;
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("hi!", throwable29);
        java.lang.Throwable[] throwableArray31 = illegalMoveException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = illegalMoveException30.getSuppressed();
        a1.IllegalPositionException illegalPositionException33 = new a1.IllegalPositionException("a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException30);
        java.lang.Throwable[] throwableArray34 = illegalPositionException33.getSuppressed();
        a1.IllegalMoveException illegalMoveException35 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException33);
        illegalMoveException23.addSuppressed((java.lang.Throwable) illegalPositionException33);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException23);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException37);
        a1.IllegalPositionException illegalPositionException39 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalPositionException37);
        java.lang.Throwable[] throwableArray40 = illegalPositionException37.getSuppressed();
        a1.IllegalPositionException illegalPositionException41 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException37);
        illegalMoveException12.addSuppressed((java.lang.Throwable) illegalPositionException41);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray40);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessBoard chessBoard10 = null;
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        java.lang.String str13 = pawn12.toString();
        boolean boolean15 = chessBoard9.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Knight knight25 = new a1.Knight(chessBoard9, color22);
        a1.Rook rook26 = new a1.Rook(chessBoard0, color22);
        java.lang.String str27 = rook26.getPosition();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u265f" + "'", str13, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        boolean boolean12 = chessBoard6.placePiece((a1.ChessPiece) pawn9, "");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook16 = new a1.Rook(chessBoard14, color15);
        a1.Knight knight17 = new a1.Knight(chessBoard13, color15);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        a1.Bishop bishop21 = new a1.Bishop(chessBoard13, color19);
        a1.Knight knight22 = new a1.Knight(chessBoard6, color19);
        a1.Knight knight23 = new a1.Knight(chessBoard0, color19);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.lang.String str28 = pawn27.toString();
        boolean boolean30 = chessBoard24.placePiece((a1.ChessPiece) pawn27, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard31, color33);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Bishop bishop39 = new a1.Bishop(chessBoard31, color37);
        a1.Knight knight40 = new a1.Knight(chessBoard24, color37);
        a1.Rook rook41 = new a1.Rook(chessBoard0, color37);
        java.util.ArrayList<java.lang.String> strList42 = rook41.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + color15 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color15.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u265f" + "'", str28, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList42);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.lang.String str6 = knight4.toString();
        java.lang.String str7 = knight4.toString();
        java.lang.String str8 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList9 = knight4.legalMoves();
        java.lang.String str10 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList11 = knight4.legalMoves();
        java.lang.String str12 = knight4.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265e" + "'", str6, "\u265e");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265e" + "'", str7, "\u265e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265e" + "'", str10, "\u265e");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u265e" + "'", str12, "\u265e");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.lang.String str18 = king12.toString();
        java.util.ArrayList<java.lang.String> strList19 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList21 = king12.legalMoves();
        java.lang.String str22 = king12.toString();
        java.lang.String str23 = king12.toString();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265a" + "'", str18, "\u265a");
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u265a" + "'", str22, "\u265a");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u265a" + "'", str23, "\u265a");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Knight knight15 = new a1.Knight(chessBoard11, color13);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Bishop bishop19 = new a1.Bishop(chessBoard11, color17);
        a1.Rook rook20 = new a1.Rook(chessBoard8, color17);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.Rook rook33 = new a1.Rook(chessBoard21, color30);
        a1.Bishop bishop34 = new a1.Bishop(chessBoard8, color30);
        a1.Rook rook35 = new a1.Rook(chessBoard3, color30);
        a1.Rook rook36 = new a1.Rook(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList37 = rook36.legalMoves();
        java.lang.String str38 = rook36.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u265c" + "'", str38, "\u265c");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.lang.String str16 = king12.getPosition();
        java.lang.String str17 = king12.toString();
        java.lang.String str18 = king12.getPosition();
        // The following exception was thrown during execution in test generation
        try {
            king12.setPosition("a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.util.ArrayList<java.lang.String> strList4 = pawn3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn3.legalMoves();
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "\u265d");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.King king25 = new a1.King(chessBoard13, color22);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        java.util.ArrayList<java.lang.String> strList29 = pawn28.legalMoves();
        boolean boolean31 = chessBoard13.placePiece((a1.ChessPiece) pawn28, "\u265e");
        chessBoard13.initialize();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard36, color38);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Bishop bishop44 = new a1.Bishop(chessBoard36, color42);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook47 = new a1.Rook(chessBoard45, color46);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard36, color46);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard33, color46);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard13, color46);
        a1.Knight knight51 = new a1.Knight(chessBoard8, color46);
        a1.King king52 = new a1.King(chessBoard0, color46);
        java.lang.String str53 = king52.toString();
        java.util.ArrayList<java.lang.String> strList54 = king52.legalMoves();
        java.lang.Class<?> wildcardClass55 = strList54.getClass();
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color46 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color46.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u265a" + "'", str53, "\u265a");
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        // The following exception was thrown during execution in test generation
        try {
            chessBoard0.move("\u2657", "a1.IllegalPositionException: a1.IllegalPositionException: ");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: Illegal move");
        } catch (a1.IllegalMoveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.lang.String str15 = king12.toString();
        java.util.ArrayList<java.lang.String> strList16 = king12.legalMoves();
        java.lang.String str17 = king12.toString();
        java.lang.String str18 = king12.toString();
        a1.ChessPiece.Color color19 = king12.getColor();
        java.lang.String str20 = king12.getPosition();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u265a" + "'", str15, "\u265a");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265a" + "'", str17, "\u265a");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265a" + "'", str18, "\u265a");
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        boolean boolean20 = chessBoard15.placePiece((a1.ChessPiece) rook18, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.Knight knight25 = new a1.Knight(chessBoard21, color23);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard21, color27);
        boolean boolean31 = chessBoard15.placePiece((a1.ChessPiece) knight29, "");
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessBoard chessBoard33 = null;
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard33, color34);
        java.lang.String str36 = pawn35.toString();
        boolean boolean38 = chessBoard32.placePiece((a1.ChessPiece) pawn35, "");
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Knight knight43 = new a1.Knight(chessBoard39, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Bishop bishop47 = new a1.Bishop(chessBoard39, color45);
        a1.Knight knight48 = new a1.Knight(chessBoard32, color45);
        a1.ChessBoard chessBoard49 = new a1.ChessBoard();
        a1.ChessPiece.Color color50 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook51 = new a1.Rook(chessBoard49, color50);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Pawn pawn64 = new a1.Pawn(chessBoard52, color62);
        a1.Pawn pawn65 = new a1.Pawn(chessBoard49, color62);
        a1.Pawn pawn66 = new a1.Pawn(chessBoard32, color62);
        a1.Pawn pawn67 = new a1.Pawn(chessBoard15, color62);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard0, color62);
        a1.ChessBoard chessBoard69 = new a1.ChessBoard();
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Knight knight73 = new a1.Knight(chessBoard69, color71);
        a1.ChessBoard chessBoard74 = new a1.ChessBoard();
        a1.ChessPiece.Color color75 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook76 = new a1.Rook(chessBoard74, color75);
        a1.Bishop bishop77 = new a1.Bishop(chessBoard69, color75);
        a1.ChessPiece.Color color78 = null;
        a1.Bishop bishop79 = new a1.Bishop(chessBoard69, color78);
        java.lang.String str80 = bishop79.getPosition();
        java.lang.String str81 = bishop79.toString();
        java.util.ArrayList<java.lang.String> strList82 = bishop79.legalMoves();
        boolean boolean84 = chessBoard0.placePiece((a1.ChessPiece) bishop79, "\u265d");
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = null;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        java.lang.String str88 = rook87.toString();
        java.lang.String str89 = rook87.getPosition();
        java.util.ArrayList<java.lang.String> strList90 = rook87.legalMoves();
        java.util.ArrayList<java.lang.String> strList91 = rook87.legalMoves();
        java.util.ArrayList<java.lang.String> strList92 = rook87.legalMoves();
        java.lang.String str93 = rook87.toString();
        boolean boolean95 = chessBoard0.placePiece((a1.ChessPiece) rook87, "a1.IllegalPositionException: ");
        a1.ChessPiece.Color color96 = rook87.getColor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u265f" + "'", str36, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color50 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color50.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color75 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color75.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265d" + "'", str81, "\u265d");
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u265c" + "'", str88, "\u265c");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\u265c" + "'", str93, "\u265c");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(color96);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.Rook rook34 = new a1.Rook(chessBoard22, color31);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.Rook rook47 = new a1.Rook(chessBoard35, color44);
        a1.Bishop bishop48 = new a1.Bishop(chessBoard22, color44);
        a1.ChessPiece.Color color49 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard22, color49);
        a1.Pawn pawn51 = new a1.Pawn(chessBoard0, color49);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook55 = new a1.Rook(chessBoard53, color54);
        a1.Knight knight56 = new a1.Knight(chessBoard52, color54);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.Bishop bishop60 = new a1.Bishop(chessBoard52, color58);
        a1.ChessPiece.Color color61 = bishop60.getColor();
        a1.King king62 = new a1.King(chessBoard0, color61);
        java.util.ArrayList<java.lang.String> strList63 = king62.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color49 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color49.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color54 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color54.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color58 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color58.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList63);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.lang.Throwable throwable5 = null;
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("hi!", throwable5);
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("\u265a", throwable5);
        java.lang.Throwable[] throwableArray8 = illegalMoveException7.getSuppressed();
        a1.IllegalPositionException illegalPositionException9 = new a1.IllegalPositionException("\u265e", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray12 = illegalPositionException11.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.King king12 = new a1.King(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = null;
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        java.util.ArrayList<java.lang.String> strList16 = pawn15.legalMoves();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn15, "\u265e");
        chessBoard0.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessBoard chessBoard23 = null;
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        java.lang.String str26 = pawn25.toString();
        boolean boolean28 = chessBoard22.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Knight knight33 = new a1.Knight(chessBoard29, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard29, color35);
        a1.Knight knight38 = new a1.Knight(chessBoard22, color35);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = null;
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard40, color41);
        java.lang.String str43 = pawn42.toString();
        boolean boolean45 = chessBoard39.placePiece((a1.ChessPiece) pawn42, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Pawn pawn58 = new a1.Pawn(chessBoard46, color56);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard39, color56);
        a1.King king60 = new a1.King(chessBoard22, color56);
        a1.Bishop bishop61 = new a1.Bishop(chessBoard0, color56);
        a1.ChessBoard chessBoard62 = new a1.ChessBoard();
        a1.ChessPiece.Color color63 = null;
        a1.Rook rook64 = new a1.Rook(chessBoard62, color63);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook68 = new a1.Rook(chessBoard66, color67);
        a1.Knight knight69 = new a1.Knight(chessBoard65, color67);
        a1.ChessBoard chessBoard70 = new a1.ChessBoard();
        a1.ChessPiece.Color color71 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook72 = new a1.Rook(chessBoard70, color71);
        a1.Bishop bishop73 = new a1.Bishop(chessBoard65, color71);
        a1.King king74 = new a1.King(chessBoard62, color71);
        a1.Rook rook75 = new a1.Rook(chessBoard0, color71);
        a1.ChessBoard chessBoard76 = null;
        a1.ChessBoard chessBoard77 = new a1.ChessBoard();
        a1.ChessBoard chessBoard78 = null;
        a1.ChessPiece.Color color79 = null;
        a1.Pawn pawn80 = new a1.Pawn(chessBoard78, color79);
        java.lang.String str81 = pawn80.toString();
        boolean boolean83 = chessBoard77.placePiece((a1.ChessPiece) pawn80, "");
        a1.ChessBoard chessBoard84 = new a1.ChessBoard();
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        a1.Knight knight88 = new a1.Knight(chessBoard84, color86);
        a1.ChessBoard chessBoard89 = new a1.ChessBoard();
        a1.ChessPiece.Color color90 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook91 = new a1.Rook(chessBoard89, color90);
        a1.Bishop bishop92 = new a1.Bishop(chessBoard84, color90);
        a1.Knight knight93 = new a1.Knight(chessBoard77, color90);
        a1.Knight knight94 = new a1.Knight(chessBoard76, color90);
        a1.Knight knight95 = new a1.Knight(chessBoard0, color90);
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265f" + "'", str26, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265f" + "'", str43, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color67 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color67.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color71 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color71.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u265f" + "'", str81, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color90 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color90.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.Knight knight67 = new a1.Knight(chessBoard63, color65);
        a1.Rook rook68 = new a1.Rook(chessBoard0, color65);
        a1.ChessBoard chessBoard69 = null;
        a1.ChessPiece.Color color70 = null;
        a1.Pawn pawn71 = new a1.Pawn(chessBoard69, color70);
        java.lang.String str72 = pawn71.toString();
        java.util.ArrayList<java.lang.String> strList73 = pawn71.legalMoves();
        java.lang.String str74 = pawn71.toString();
        java.util.ArrayList<java.lang.String> strList75 = pawn71.legalMoves();
        java.lang.String str76 = pawn71.getPosition();
        boolean boolean78 = chessBoard0.placePiece((a1.ChessPiece) pawn71, "a1.IllegalMoveException: a1.IllegalMoveException: hi!");
        java.lang.String str79 = pawn71.getPosition();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265f" + "'", str72, "\u265f");
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265f" + "'", str74, "\u265f");
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        boolean boolean35 = chessBoard30.placePiece((a1.ChessPiece) rook33, "\u265f");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Knight knight40 = new a1.Knight(chessBoard36, color38);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessPiece.Color color42 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook43 = new a1.Rook(chessBoard41, color42);
        a1.Knight knight44 = new a1.Knight(chessBoard36, color42);
        boolean boolean46 = chessBoard30.placePiece((a1.ChessPiece) knight44, "");
        a1.ChessPiece.Color color47 = knight44.getColor();
        a1.Bishop bishop48 = new a1.Bishop(chessBoard0, color47);
        java.util.ArrayList<java.lang.String> strList49 = bishop48.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color42 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color42.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList49);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard0, color27);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook33 = new a1.Rook(chessBoard31, color32);
        a1.Knight knight34 = new a1.Knight(chessBoard30, color32);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Rook rook37 = new a1.Rook(chessBoard35, color36);
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.King king47 = new a1.King(chessBoard35, color44);
        a1.ChessBoard chessBoard48 = null;
        a1.ChessPiece.Color color49 = null;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard48, color49);
        java.util.ArrayList<java.lang.String> strList51 = pawn50.legalMoves();
        boolean boolean53 = chessBoard35.placePiece((a1.ChessPiece) pawn50, "\u265e");
        chessBoard35.initialize();
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessBoard chessBoard59 = new a1.ChessBoard();
        a1.ChessPiece.Color color60 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook61 = new a1.Rook(chessBoard59, color60);
        a1.Knight knight62 = new a1.Knight(chessBoard58, color60);
        a1.ChessBoard chessBoard63 = new a1.ChessBoard();
        a1.ChessPiece.Color color64 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook65 = new a1.Rook(chessBoard63, color64);
        a1.Bishop bishop66 = new a1.Bishop(chessBoard58, color64);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessPiece.Color color68 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook69 = new a1.Rook(chessBoard67, color68);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard58, color68);
        a1.Pawn pawn71 = new a1.Pawn(chessBoard55, color68);
        a1.Pawn pawn72 = new a1.Pawn(chessBoard35, color68);
        a1.Knight knight73 = new a1.Knight(chessBoard30, color68);
        java.lang.String str74 = knight73.getPosition();
        java.util.ArrayList<java.lang.String> strList75 = knight73.legalMoves();
        a1.ChessPiece.Color color76 = knight73.getColor();
        a1.Pawn pawn77 = new a1.Pawn(chessBoard0, color76);
        a1.ChessPiece.Color color78 = a1.ChessPiece.Color.BLACK;
        a1.Pawn pawn79 = new a1.Pawn(chessBoard0, color78);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color32 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color32.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color60 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color60.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color64 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color64.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color68 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color68.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + color76 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color76.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color78 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color78.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList4 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = pawn2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        java.lang.String str7 = pawn2.toString();
        java.lang.String str8 = pawn2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u265f" + "'", str7, "\u265f");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        java.lang.String str3 = pawn2.toString();
        a1.ChessPiece.Color color4 = pawn2.getColor();
        java.lang.String str5 = pawn2.toString();
        java.util.ArrayList<java.lang.String> strList6 = pawn2.legalMoves();
        a1.ChessPiece.Color color7 = pawn2.getColor();
        java.lang.String str8 = pawn2.toString();
        java.lang.String str9 = pawn2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265f" + "'", str3, "\u265f");
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265f" + "'", str5, "\u265f");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(color7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265f" + "'", str8, "\u265f");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265f" + "'", str9, "\u265f");
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.lang.String str3 = rook2.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u265c" + "'", str3, "\u265c");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        boolean boolean5 = chessBoard0.placePiece((a1.ChessPiece) rook3, "\u265f");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook9 = new a1.Rook(chessBoard7, color8);
        a1.Knight knight10 = new a1.Knight(chessBoard6, color8);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook13 = new a1.Rook(chessBoard11, color12);
        a1.Knight knight14 = new a1.Knight(chessBoard6, color12);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) knight14, "");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook20 = new a1.Rook(chessBoard18, color19);
        boolean boolean22 = chessBoard17.placePiece((a1.ChessPiece) rook20, "\u265f");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook26 = new a1.Rook(chessBoard24, color25);
        a1.Knight knight27 = new a1.Knight(chessBoard23, color25);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard23, color29);
        boolean boolean33 = chessBoard17.placePiece((a1.ChessPiece) knight31, "");
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessPiece.Color color39 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook40 = new a1.Rook(chessBoard38, color39);
        a1.Knight knight41 = new a1.Knight(chessBoard37, color39);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook44 = new a1.Rook(chessBoard42, color43);
        a1.Bishop bishop45 = new a1.Bishop(chessBoard37, color43);
        a1.Rook rook46 = new a1.Rook(chessBoard34, color43);
        a1.King king47 = new a1.King(chessBoard17, color43);
        boolean boolean49 = chessBoard0.placePiece((a1.ChessPiece) king47, "a1.IllegalMoveException: hi!");
        java.lang.String str50 = king47.toString();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + color8 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color8.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color12 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color12.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + color19 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color19.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + color25 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color25.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color43 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color43.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u265a" + "'", str50, "\u265a");
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException9);
        java.lang.Throwable throwable13 = null;
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("hi!", throwable13);
        java.lang.Throwable[] throwableArray15 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = illegalMoveException14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = illegalMoveException14.getSuppressed();
        java.lang.Throwable throwable21 = null;
        a1.IllegalMoveException illegalMoveException22 = new a1.IllegalMoveException("hi!", throwable21);
        a1.IllegalPositionException illegalPositionException23 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException22);
        a1.IllegalMoveException illegalMoveException24 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException22);
        illegalMoveException14.addSuppressed((java.lang.Throwable) illegalMoveException24);
        illegalMoveException11.addSuppressed((java.lang.Throwable) illegalMoveException24);
        a1.IllegalPositionException illegalPositionException27 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException24);
        a1.IllegalMoveException illegalMoveException28 = new a1.IllegalMoveException("hi!", (java.lang.Throwable) illegalPositionException27);
        a1.IllegalMoveException illegalMoveException29 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalMoveException28);
        a1.IllegalMoveException illegalMoveException30 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException28);
        java.lang.Throwable throwable35 = null;
        a1.IllegalMoveException illegalMoveException36 = new a1.IllegalMoveException("hi!", throwable35);
        a1.IllegalPositionException illegalPositionException37 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException36);
        a1.IllegalMoveException illegalMoveException38 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException36);
        java.lang.Throwable throwable40 = null;
        a1.IllegalMoveException illegalMoveException41 = new a1.IllegalMoveException("hi!", throwable40);
        java.lang.Throwable[] throwableArray42 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = illegalMoveException41.getSuppressed();
        java.lang.Throwable[] throwableArray44 = illegalMoveException41.getSuppressed();
        java.lang.Throwable throwable48 = null;
        a1.IllegalMoveException illegalMoveException49 = new a1.IllegalMoveException("hi!", throwable48);
        a1.IllegalPositionException illegalPositionException50 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException49);
        a1.IllegalMoveException illegalMoveException51 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException49);
        illegalMoveException41.addSuppressed((java.lang.Throwable) illegalMoveException51);
        illegalMoveException38.addSuppressed((java.lang.Throwable) illegalMoveException51);
        a1.IllegalPositionException illegalPositionException54 = new a1.IllegalPositionException("a1.IllegalMoveException: hi!", (java.lang.Throwable) illegalMoveException51);
        java.lang.Throwable[] throwableArray55 = illegalMoveException51.getSuppressed();
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException51);
        a1.IllegalMoveException illegalMoveException57 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalMoveException30);
        java.lang.Throwable throwable59 = null;
        a1.IllegalMoveException illegalMoveException60 = new a1.IllegalMoveException("hi!", throwable59);
        java.lang.Throwable[] throwableArray61 = illegalMoveException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = illegalMoveException60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = illegalMoveException60.getSuppressed();
        java.lang.Throwable throwable67 = null;
        a1.IllegalMoveException illegalMoveException68 = new a1.IllegalMoveException("hi!", throwable67);
        a1.IllegalPositionException illegalPositionException69 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException68);
        a1.IllegalMoveException illegalMoveException70 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException68);
        illegalMoveException60.addSuppressed((java.lang.Throwable) illegalMoveException70);
        java.lang.Throwable[] throwableArray72 = illegalMoveException60.getSuppressed();
        java.lang.Throwable throwable78 = null;
        a1.IllegalMoveException illegalMoveException79 = new a1.IllegalMoveException("hi!", throwable78);
        a1.IllegalPositionException illegalPositionException80 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException79);
        a1.IllegalMoveException illegalMoveException81 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException80);
        a1.IllegalPositionException illegalPositionException82 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException80);
        a1.IllegalMoveException illegalMoveException83 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException80);
        illegalMoveException60.addSuppressed((java.lang.Throwable) illegalMoveException83);
        illegalMoveException30.addSuppressed((java.lang.Throwable) illegalMoveException60);
        java.lang.String str86 = illegalMoveException60.toString();
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "a1.IllegalMoveException: hi!" + "'", str86, "a1.IllegalMoveException: hi!");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Pawn pawn20 = new a1.Pawn(chessBoard8, color18);
        a1.Pawn pawn21 = new a1.Pawn(chessBoard5, color18);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook28 = new a1.Rook(chessBoard26, color27);
        a1.Knight knight29 = new a1.Knight(chessBoard25, color27);
        a1.ChessBoard chessBoard30 = new a1.ChessBoard();
        a1.ChessPiece.Color color31 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook32 = new a1.Rook(chessBoard30, color31);
        a1.Bishop bishop33 = new a1.Bishop(chessBoard25, color31);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook36 = new a1.Rook(chessBoard34, color35);
        a1.Pawn pawn37 = new a1.Pawn(chessBoard25, color35);
        a1.Pawn pawn38 = new a1.Pawn(chessBoard22, color35);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessBoard chessBoard40 = null;
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard40, color41);
        java.lang.String str43 = pawn42.toString();
        boolean boolean45 = chessBoard39.placePiece((a1.ChessPiece) pawn42, "");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Knight knight50 = new a1.Knight(chessBoard46, color48);
        a1.ChessBoard chessBoard51 = new a1.ChessBoard();
        a1.ChessPiece.Color color52 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook53 = new a1.Rook(chessBoard51, color52);
        a1.Bishop bishop54 = new a1.Bishop(chessBoard46, color52);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook57 = new a1.Rook(chessBoard55, color56);
        a1.Pawn pawn58 = new a1.Pawn(chessBoard46, color56);
        a1.Bishop bishop59 = new a1.Bishop(chessBoard39, color56);
        java.util.ArrayList<java.lang.String> strList60 = bishop59.legalMoves();
        a1.ChessPiece.Color color61 = bishop59.getColor();
        a1.Knight knight62 = new a1.Knight(chessBoard22, color61);
        a1.Knight knight63 = new a1.Knight(chessBoard5, color61);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook66 = new a1.Rook(chessBoard64, color65);
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        a1.ChessBoard chessBoard68 = new a1.ChessBoard();
        a1.ChessPiece.Color color69 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook70 = new a1.Rook(chessBoard68, color69);
        a1.Knight knight71 = new a1.Knight(chessBoard67, color69);
        a1.ChessBoard chessBoard72 = new a1.ChessBoard();
        a1.ChessPiece.Color color73 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook74 = new a1.Rook(chessBoard72, color73);
        a1.Bishop bishop75 = new a1.Bishop(chessBoard67, color73);
        a1.ChessBoard chessBoard76 = new a1.ChessBoard();
        a1.ChessPiece.Color color77 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook78 = new a1.Rook(chessBoard76, color77);
        a1.Pawn pawn79 = new a1.Pawn(chessBoard67, color77);
        a1.Pawn pawn80 = new a1.Pawn(chessBoard64, color77);
        a1.King king81 = new a1.King(chessBoard5, color77);
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = null;
        a1.Rook rook84 = new a1.Rook(chessBoard82, color83);
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook87 = new a1.Rook(chessBoard85, color86);
        java.lang.String str88 = rook87.toString();
        java.util.ArrayList<java.lang.String> strList89 = rook87.legalMoves();
        java.lang.String str90 = rook87.toString();
        java.lang.String str91 = rook87.toString();
        a1.ChessPiece.Color color92 = rook87.getColor();
        a1.Bishop bishop93 = new a1.Bishop(chessBoard82, color92);
        a1.Rook rook94 = new a1.Rook(chessBoard5, color92);
        a1.Rook rook95 = new a1.Rook(chessBoard0, color92);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color27 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color27.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color35 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color35.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u265f" + "'", str43, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color52 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color52.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color56 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color56.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + color61 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color61.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color65 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color65.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color69 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color69.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color73 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color73.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color77 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color77.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color86 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color86.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u265c" + "'", str88, "\u265c");
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u265c" + "'", str90, "\u265c");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u265c" + "'", str91, "\u265c");
        org.junit.Assert.assertTrue("'" + color92 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color92.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.lang.Throwable throwable8 = null;
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("hi!", throwable8);
        a1.IllegalPositionException illegalPositionException10 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException9);
        a1.IllegalMoveException illegalMoveException11 = new a1.IllegalMoveException("\u265e", (java.lang.Throwable) illegalPositionException10);
        a1.IllegalPositionException illegalPositionException12 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalPositionException10);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException10);
        a1.IllegalPositionException illegalPositionException14 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalPositionException10);
        a1.IllegalPositionException illegalPositionException15 = new a1.IllegalPositionException("\u265c", (java.lang.Throwable) illegalPositionException14);
        a1.IllegalPositionException illegalPositionException16 = new a1.IllegalPositionException("\u2657", (java.lang.Throwable) illegalPositionException15);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray10 = illegalMoveException7.getSuppressed();
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalMoveException illegalMoveException13 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalPositionException11);
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook4 = new a1.Rook(chessBoard2, color3);
        boolean boolean6 = chessBoard1.placePiece((a1.ChessPiece) rook4, "\u265f");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        a1.Knight knight18 = new a1.Knight(chessBoard14, color16);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook21 = new a1.Rook(chessBoard19, color20);
        a1.Bishop bishop22 = new a1.Bishop(chessBoard14, color20);
        a1.Knight knight23 = new a1.Knight(chessBoard7, color20);
        a1.Knight knight24 = new a1.Knight(chessBoard1, color20);
        a1.King king25 = new a1.King(chessBoard0, color20);
        java.lang.String str26 = king25.toString();
        java.util.ArrayList<java.lang.String> strList27 = king25.legalMoves();
        java.lang.String str28 = king25.getPosition();
        java.util.ArrayList<java.lang.String> strList29 = king25.legalMoves();
        org.junit.Assert.assertTrue("'" + color3 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color3.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color20 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color20.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u265a" + "'", str26, "\u265a");
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard7, color8);
        java.lang.String str10 = pawn9.toString();
        java.lang.String str11 = pawn9.toString();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn9, "\u265f");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook17 = new a1.Rook(chessBoard15, color16);
        boolean boolean19 = chessBoard14.placePiece((a1.ChessPiece) rook17, "\u265f");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Knight knight24 = new a1.Knight(chessBoard20, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard20, color26);
        boolean boolean30 = chessBoard14.placePiece((a1.ChessPiece) knight28, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessBoard chessBoard32 = null;
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        java.lang.String str35 = pawn34.toString();
        boolean boolean37 = chessBoard31.placePiece((a1.ChessPiece) pawn34, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook41 = new a1.Rook(chessBoard39, color40);
        a1.Knight knight42 = new a1.Knight(chessBoard38, color40);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook45 = new a1.Rook(chessBoard43, color44);
        a1.Bishop bishop46 = new a1.Bishop(chessBoard38, color44);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook49 = new a1.Rook(chessBoard47, color48);
        a1.Pawn pawn50 = new a1.Pawn(chessBoard38, color48);
        a1.Bishop bishop51 = new a1.Bishop(chessBoard31, color48);
        a1.King king52 = new a1.King(chessBoard14, color48);
        a1.King king53 = new a1.King(chessBoard0, color48);
        java.lang.String str54 = king53.toString();
        java.util.ArrayList<java.lang.String> strList55 = king53.legalMoves();
        java.util.ArrayList<java.lang.String> strList56 = king53.legalMoves();
        java.lang.String str57 = king53.toString();
        java.util.ArrayList<java.lang.String> strList58 = king53.legalMoves();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265f" + "'", str10, "\u265f");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + color16 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color16.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u265f" + "'", str35, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + color40 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color40.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color44 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color44.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color48 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color48.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u265a" + "'", str54, "\u265a");
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265a" + "'", str57, "\u265a");
        org.junit.Assert.assertNotNull(strList58);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        chessBoard0.initialize();
        // The following exception was thrown during execution in test generation
        try {
            a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1.IllegalMoveException: a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        java.util.ArrayList<java.lang.String> strList17 = pawn16.legalMoves();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        java.lang.String str11 = pawn10.toString();
        boolean boolean13 = chessBoard7.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        java.lang.String str17 = pawn16.toString();
        java.lang.String str18 = pawn16.toString();
        boolean boolean20 = chessBoard7.placePiece((a1.ChessPiece) pawn16, "\u265f");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook24 = new a1.Rook(chessBoard22, color23);
        boolean boolean26 = chessBoard21.placePiece((a1.ChessPiece) rook24, "\u265f");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook30 = new a1.Rook(chessBoard28, color29);
        a1.Knight knight31 = new a1.Knight(chessBoard27, color29);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.Knight knight35 = new a1.Knight(chessBoard27, color33);
        boolean boolean37 = chessBoard21.placePiece((a1.ChessPiece) knight35, "");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        java.lang.String str42 = pawn41.toString();
        boolean boolean44 = chessBoard38.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook48 = new a1.Rook(chessBoard46, color47);
        a1.Knight knight49 = new a1.Knight(chessBoard45, color47);
        a1.ChessBoard chessBoard50 = new a1.ChessBoard();
        a1.ChessPiece.Color color51 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook52 = new a1.Rook(chessBoard50, color51);
        a1.Bishop bishop53 = new a1.Bishop(chessBoard45, color51);
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.Pawn pawn57 = new a1.Pawn(chessBoard45, color55);
        a1.Bishop bishop58 = new a1.Bishop(chessBoard38, color55);
        a1.King king59 = new a1.King(chessBoard21, color55);
        a1.King king60 = new a1.King(chessBoard7, color55);
        boolean boolean62 = chessBoard0.placePiece((a1.ChessPiece) king60, "\u265c");
        java.lang.String str63 = king60.toString();
        java.lang.String str64 = king60.toString();
        java.util.ArrayList<java.lang.String> strList65 = king60.legalMoves();
        java.lang.Class<?> wildcardClass66 = strList65.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u265f" + "'", str11, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u265f" + "'", str17, "\u265f");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u265f" + "'", str18, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + color23 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color23.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + color29 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color29.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u265f" + "'", str42, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + color47 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color47.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color51 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color51.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u265a" + "'", str63, "\u265a");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u265a" + "'", str64, "\u265a");
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.lang.Throwable throwable6 = null;
        a1.IllegalMoveException illegalMoveException7 = new a1.IllegalMoveException("hi!", throwable6);
        a1.IllegalPositionException illegalPositionException8 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException9 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException7);
        java.lang.Throwable[] throwableArray10 = illegalMoveException7.getSuppressed();
        a1.IllegalPositionException illegalPositionException11 = new a1.IllegalPositionException("\u265d", (java.lang.Throwable) illegalMoveException7);
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("\u265a", (java.lang.Throwable) illegalPositionException11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("", (java.lang.Throwable) illegalMoveException12);
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook11 = new a1.Rook(chessBoard9, color10);
        a1.Knight knight12 = new a1.Knight(chessBoard8, color10);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.Bishop bishop16 = new a1.Bishop(chessBoard8, color14);
        a1.King king17 = new a1.King(chessBoard5, color14);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = pawn20.legalMoves();
        boolean boolean23 = chessBoard5.placePiece((a1.ChessPiece) pawn20, "\u265e");
        chessBoard5.initialize();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Knight knight32 = new a1.Knight(chessBoard28, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Bishop bishop36 = new a1.Bishop(chessBoard28, color34);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook39 = new a1.Rook(chessBoard37, color38);
        a1.Pawn pawn40 = new a1.Pawn(chessBoard28, color38);
        a1.Pawn pawn41 = new a1.Pawn(chessBoard25, color38);
        a1.Pawn pawn42 = new a1.Pawn(chessBoard5, color38);
        a1.Knight knight43 = new a1.Knight(chessBoard0, color38);
        java.util.ArrayList<java.lang.String> strList44 = knight43.legalMoves();
        java.lang.String str45 = knight43.toString();
        // The following exception was thrown during execution in test generation
        try {
            knight43.setPosition("a1.IllegalMoveException: hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: Position has incorrect number of characters");
        } catch (a1.IllegalPositionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color10 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color10.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color38 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color38.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265e" + "'", str45, "\u265e");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook18 = new a1.Rook(chessBoard16, color17);
        a1.Knight knight19 = new a1.Knight(chessBoard15, color17);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook22 = new a1.Rook(chessBoard20, color21);
        a1.Bishop bishop23 = new a1.Bishop(chessBoard15, color21);
        a1.King king24 = new a1.King(chessBoard12, color21);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        boolean boolean30 = chessBoard12.placePiece((a1.ChessPiece) pawn27, "\u265e");
        chessBoard12.initialize();
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook34 = new a1.Rook(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook38 = new a1.Rook(chessBoard36, color37);
        a1.Knight knight39 = new a1.Knight(chessBoard35, color37);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook42 = new a1.Rook(chessBoard40, color41);
        a1.Bishop bishop43 = new a1.Bishop(chessBoard35, color41);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook46 = new a1.Rook(chessBoard44, color45);
        a1.Pawn pawn47 = new a1.Pawn(chessBoard35, color45);
        a1.Pawn pawn48 = new a1.Pawn(chessBoard32, color45);
        a1.Pawn pawn49 = new a1.Pawn(chessBoard12, color45);
        a1.Knight knight50 = new a1.Knight(chessBoard7, color45);
        a1.Rook rook51 = new a1.Rook(chessBoard0, color45);
        a1.ChessBoard chessBoard52 = new a1.ChessBoard();
        a1.ChessPiece.Color color53 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook54 = new a1.Rook(chessBoard52, color53);
        java.lang.String str55 = rook54.toString();
        java.util.ArrayList<java.lang.String> strList56 = rook54.legalMoves();
        java.lang.String str57 = rook54.toString();
        java.util.ArrayList<java.lang.String> strList58 = rook54.legalMoves();
        boolean boolean60 = chessBoard0.placePiece((a1.ChessPiece) rook54, "a1.IllegalPositionException: a1.IllegalMoveException: hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color21 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color21.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + color33 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color33.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color37 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color37.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color41 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color41.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color45 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color45.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color53 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color53.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u265c" + "'", str55, "\u265c");
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u265c" + "'", str57, "\u265c");
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        java.lang.String str5 = knight4.toString();
        java.lang.String str6 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList7 = knight4.legalMoves();
        java.lang.String str8 = knight4.toString();
        java.lang.String str9 = knight4.toString();
        java.lang.String str10 = knight4.toString();
        java.util.ArrayList<java.lang.String> strList11 = knight4.legalMoves();
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265e" + "'", str5, "\u265e");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u265e" + "'", str6, "\u265e");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u265e" + "'", str8, "\u265e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u265e" + "'", str9, "\u265e");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u265e" + "'", str10, "\u265e");
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Pawn pawn15 = new a1.Pawn(chessBoard3, color13);
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        java.lang.String str21 = pawn20.toString();
        boolean boolean23 = chessBoard17.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Knight knight28 = new a1.Knight(chessBoard24, color26);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook31 = new a1.Rook(chessBoard29, color30);
        a1.Bishop bishop32 = new a1.Bishop(chessBoard24, color30);
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook35 = new a1.Rook(chessBoard33, color34);
        a1.Pawn pawn36 = new a1.Pawn(chessBoard24, color34);
        a1.Bishop bishop37 = new a1.Bishop(chessBoard17, color34);
        java.util.ArrayList<java.lang.String> strList38 = bishop37.legalMoves();
        a1.ChessPiece.Color color39 = bishop37.getColor();
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        a1.ChessBoard chessBoard41 = new a1.ChessBoard();
        a1.ChessBoard chessBoard42 = null;
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        java.lang.String str45 = pawn44.toString();
        boolean boolean47 = chessBoard41.placePiece((a1.ChessPiece) pawn44, "");
        java.lang.String str48 = pawn44.getPosition();
        java.util.ArrayList<java.lang.String> strList49 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList50 = pawn44.legalMoves();
        java.util.ArrayList<java.lang.String> strList51 = pawn44.legalMoves();
        boolean boolean53 = chessBoard0.placePiece((a1.ChessPiece) pawn44, "\u265d");
        a1.ChessBoard chessBoard54 = new a1.ChessBoard();
        a1.ChessPiece.Color color55 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook56 = new a1.Rook(chessBoard54, color55);
        a1.ChessBoard chessBoard57 = new a1.ChessBoard();
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard57, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook63 = new a1.Rook(chessBoard61, color62);
        a1.Knight knight64 = new a1.Knight(chessBoard60, color62);
        a1.ChessBoard chessBoard65 = new a1.ChessBoard();
        a1.ChessPiece.Color color66 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook67 = new a1.Rook(chessBoard65, color66);
        a1.Bishop bishop68 = new a1.Bishop(chessBoard60, color66);
        a1.Rook rook69 = new a1.Rook(chessBoard57, color66);
        a1.Pawn pawn70 = new a1.Pawn(chessBoard54, color66);
        a1.Rook rook71 = new a1.Rook(chessBoard0, color66);
        java.lang.String str72 = rook71.toString();
        java.lang.String str73 = rook71.toString();
        java.lang.String str74 = rook71.toString();
        java.util.ArrayList<java.lang.String> strList75 = rook71.legalMoves();
        java.lang.String str76 = rook71.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u265f" + "'", str21, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color34 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color34.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + color39 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color39.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u265f" + "'", str45, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + color55 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color55.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color62 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color62.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color66 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color66.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u265c" + "'", str72, "\u265c");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u265c" + "'", str73, "\u265c");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u265c" + "'", str74, "\u265c");
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u265c" + "'", str76, "\u265c");
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = new a1.ChessBoard();
        a1.ChessPiece.Color color2 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook3 = new a1.Rook(chessBoard1, color2);
        a1.Knight knight4 = new a1.Knight(chessBoard0, color2);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook7 = new a1.Rook(chessBoard5, color6);
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook27 = new a1.Rook(chessBoard25, color26);
        a1.Pawn pawn28 = new a1.Pawn(chessBoard16, color26);
        a1.Pawn pawn29 = new a1.Pawn(chessBoard13, color26);
        a1.ChessPiece.Color color30 = pawn29.getColor();
        a1.ChessPiece.Color color31 = pawn29.getColor();
        a1.Bishop bishop32 = new a1.Bishop(chessBoard0, color31);
        org.junit.Assert.assertTrue("'" + color2 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color2.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color6 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color6.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color14 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color14.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color26 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color26.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color30 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color30.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color31 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color31.equals(a1.ChessPiece.Color.BLACK));
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessBoard chessBoard1 = null;
        a1.ChessPiece.Color color2 = null;
        a1.Pawn pawn3 = new a1.Pawn(chessBoard1, color2);
        java.lang.String str4 = pawn3.toString();
        boolean boolean6 = chessBoard0.placePiece((a1.ChessPiece) pawn3, "");
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Knight knight11 = new a1.Knight(chessBoard7, color9);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook14 = new a1.Rook(chessBoard12, color13);
        a1.Bishop bishop15 = new a1.Bishop(chessBoard7, color13);
        a1.Knight knight16 = new a1.Knight(chessBoard0, color13);
        a1.ChessPiece.Color color17 = a1.ChessPiece.Color.BLACK;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = knight18.legalMoves();
        java.lang.String str20 = knight18.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u265f" + "'", str4, "\u265f");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color13 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color13.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color17 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color17.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u265e" + "'", str20, "\u265e");
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        java.lang.Throwable[] throwableArray5 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = illegalMoveException4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = illegalMoveException4.getSuppressed();
        java.lang.Throwable throwable11 = null;
        a1.IllegalMoveException illegalMoveException12 = new a1.IllegalMoveException("hi!", throwable11);
        a1.IllegalPositionException illegalPositionException13 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException12);
        a1.IllegalMoveException illegalMoveException14 = new a1.IllegalMoveException("\u265c", (java.lang.Throwable) illegalMoveException12);
        illegalMoveException4.addSuppressed((java.lang.Throwable) illegalMoveException14);
        a1.IllegalMoveException illegalMoveException16 = new a1.IllegalMoveException("\u265d", (java.lang.Throwable) illegalMoveException14);
        a1.IllegalMoveException illegalMoveException17 = new a1.IllegalMoveException("a1.IllegalPositionException: a1.IllegalPositionException: ", (java.lang.Throwable) illegalMoveException14);
        java.lang.Throwable[] throwableArray18 = illegalMoveException14.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = rook2.legalMoves();
        java.util.ArrayList<java.lang.String> strList4 = rook2.legalMoves();
        java.lang.String str5 = rook2.toString();
        org.junit.Assert.assertTrue("'" + color1 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color1.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u265c" + "'", str5, "\u265c");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.lang.Throwable throwable3 = null;
        a1.IllegalMoveException illegalMoveException4 = new a1.IllegalMoveException("hi!", throwable3);
        a1.IllegalPositionException illegalPositionException5 = new a1.IllegalPositionException("hi!", (java.lang.Throwable) illegalMoveException4);
        a1.IllegalMoveException illegalMoveException6 = new a1.IllegalMoveException("\u2657", (java.lang.Throwable) illegalPositionException5);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessBoard chessBoard4 = new a1.ChessBoard();
        a1.ChessPiece.Color color5 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook6 = new a1.Rook(chessBoard4, color5);
        a1.Knight knight7 = new a1.Knight(chessBoard3, color5);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook10 = new a1.Rook(chessBoard8, color9);
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color9);
        a1.Rook rook12 = new a1.Rook(chessBoard0, color9);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook19 = new a1.Rook(chessBoard17, color18);
        a1.Knight knight20 = new a1.Knight(chessBoard16, color18);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = a1.ChessPiece.Color.BLACK;
        a1.Rook rook23 = new a1.Rook(chessBoard21, color22);
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color22);
        a1.Rook rook25 = new a1.Rook(chessBoard13, color22);
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color22);
        java.lang.String str27 = bishop26.toString();
        java.util.ArrayList<java.lang.String> strList28 = bishop26.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = bishop26.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = bishop26.legalMoves();
        org.junit.Assert.assertTrue("'" + color5 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color5.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color9 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color9.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color18 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color18.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertTrue("'" + color22 + "' != '" + a1.ChessPiece.Color.BLACK + "'", color22.equals(a1.ChessPiece.Color.BLACK));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u265d" + "'", str27, "\u265d");
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
    }
}
